
Line Following - Obstacle Detection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  000014c2  00001556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000e8  008000e8  000015de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031e6  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abe  00000000  00000000  00004a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001da8  00000000  00000000  00005520  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000674  00000000  00000000  000072c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c85  00000000  00000000  0000793c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025ba  00000000  00000000  000085c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000ab7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_10>
      2c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3f       	cpi	r26, 0xF4	; 244
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <main>
      8a:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPinDirection>:
      break;
   case DIO_PORTC:
      TOGG_BIT(PORTC_REG, copy_u8pin);
      break;
   case DIO_PORTD:
      TOGG_BIT(PORTD_REG, copy_u8pin);
      92:	81 30       	cpi	r24, 0x01	; 1
      94:	19 f1       	breq	.+70     	; 0xdc <DIO_setPinDirection+0x4a>
      96:	30 f0       	brcs	.+12     	; 0xa4 <DIO_setPinDirection+0x12>
      98:	82 30       	cpi	r24, 0x02	; 2
      9a:	e1 f1       	breq	.+120    	; 0x114 <DIO_setPinDirection+0x82>
      9c:	83 30       	cpi	r24, 0x03	; 3
      9e:	09 f4       	brne	.+2      	; 0xa2 <DIO_setPinDirection+0x10>
      a0:	55 c0       	rjmp	.+170    	; 0x14c <DIO_setPinDirection+0xba>
      a2:	08 95       	ret
      a4:	44 23       	and	r20, r20
      a6:	19 f0       	breq	.+6      	; 0xae <DIO_setPinDirection+0x1c>
      a8:	41 30       	cpi	r20, 0x01	; 1
      aa:	69 f0       	breq	.+26     	; 0xc6 <DIO_setPinDirection+0x34>
      ac:	08 95       	ret
      ae:	2a b3       	in	r18, 0x1a	; 26
      b0:	81 e0       	ldi	r24, 0x01	; 1
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_setPinDirection+0x28>
      b6:	88 0f       	add	r24, r24
      b8:	99 1f       	adc	r25, r25
      ba:	6a 95       	dec	r22
      bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_setPinDirection+0x24>
      be:	80 95       	com	r24
      c0:	82 23       	and	r24, r18
      c2:	8a bb       	out	0x1a, r24	; 26
      c4:	08 95       	ret
      c6:	2a b3       	in	r18, 0x1a	; 26
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_setPinDirection+0x40>
      ce:	88 0f       	add	r24, r24
      d0:	99 1f       	adc	r25, r25
      d2:	6a 95       	dec	r22
      d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_setPinDirection+0x3c>
      d6:	82 2b       	or	r24, r18
      d8:	8a bb       	out	0x1a, r24	; 26
      da:	08 95       	ret
      dc:	44 23       	and	r20, r20
      de:	19 f0       	breq	.+6      	; 0xe6 <DIO_setPinDirection+0x54>
      e0:	41 30       	cpi	r20, 0x01	; 1
      e2:	69 f0       	breq	.+26     	; 0xfe <DIO_setPinDirection+0x6c>
      e4:	08 95       	ret
      e6:	27 b3       	in	r18, 0x17	; 23
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_setPinDirection+0x60>
      ee:	88 0f       	add	r24, r24
      f0:	99 1f       	adc	r25, r25
      f2:	6a 95       	dec	r22
      f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_setPinDirection+0x5c>
      f6:	80 95       	com	r24
      f8:	82 23       	and	r24, r18
      fa:	87 bb       	out	0x17, r24	; 23
      fc:	08 95       	ret
      fe:	27 b3       	in	r18, 0x17	; 23
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_setPinDirection+0x78>
     106:	88 0f       	add	r24, r24
     108:	99 1f       	adc	r25, r25
     10a:	6a 95       	dec	r22
     10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_setPinDirection+0x74>
     10e:	82 2b       	or	r24, r18
     110:	87 bb       	out	0x17, r24	; 23
     112:	08 95       	ret
     114:	44 23       	and	r20, r20
     116:	19 f0       	breq	.+6      	; 0x11e <DIO_setPinDirection+0x8c>
     118:	41 30       	cpi	r20, 0x01	; 1
     11a:	69 f0       	breq	.+26     	; 0x136 <DIO_setPinDirection+0xa4>
     11c:	08 95       	ret
     11e:	24 b3       	in	r18, 0x14	; 20
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_setPinDirection+0x98>
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	6a 95       	dec	r22
     12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_setPinDirection+0x94>
     12e:	80 95       	com	r24
     130:	82 23       	and	r24, r18
     132:	84 bb       	out	0x14, r24	; 20
     134:	08 95       	ret
     136:	24 b3       	in	r18, 0x14	; 20
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_setPinDirection+0xb0>
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	6a 95       	dec	r22
     144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_setPinDirection+0xac>
     146:	82 2b       	or	r24, r18
     148:	84 bb       	out	0x14, r24	; 20
     14a:	08 95       	ret
     14c:	44 23       	and	r20, r20
     14e:	19 f0       	breq	.+6      	; 0x156 <DIO_setPinDirection+0xc4>
     150:	41 30       	cpi	r20, 0x01	; 1
     152:	69 f0       	breq	.+26     	; 0x16e <DIO_setPinDirection+0xdc>
     154:	08 95       	ret
     156:	21 b3       	in	r18, 0x11	; 17
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDirection+0xd0>
     15e:	88 0f       	add	r24, r24
     160:	99 1f       	adc	r25, r25
     162:	6a 95       	dec	r22
     164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDirection+0xcc>
     166:	80 95       	com	r24
     168:	82 23       	and	r24, r18
     16a:	81 bb       	out	0x11, r24	; 17
     16c:	08 95       	ret
     16e:	21 b3       	in	r18, 0x11	; 17
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_setPinDirection+0xe8>
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	6a 95       	dec	r22
     17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_setPinDirection+0xe4>
     17e:	82 2b       	or	r24, r18
     180:	81 bb       	out	0x11, r24	; 17
     182:	08 95       	ret

00000184 <DIO_setPinVal>:
     184:	81 30       	cpi	r24, 0x01	; 1
     186:	19 f1       	breq	.+70     	; 0x1ce <DIO_setPinVal+0x4a>
     188:	30 f0       	brcs	.+12     	; 0x196 <DIO_setPinVal+0x12>
     18a:	82 30       	cpi	r24, 0x02	; 2
     18c:	e1 f1       	breq	.+120    	; 0x206 <DIO_setPinVal+0x82>
     18e:	83 30       	cpi	r24, 0x03	; 3
     190:	09 f4       	brne	.+2      	; 0x194 <DIO_setPinVal+0x10>
     192:	55 c0       	rjmp	.+170    	; 0x23e <DIO_setPinVal+0xba>
     194:	08 95       	ret
     196:	44 23       	and	r20, r20
     198:	19 f0       	breq	.+6      	; 0x1a0 <DIO_setPinVal+0x1c>
     19a:	41 30       	cpi	r20, 0x01	; 1
     19c:	69 f0       	breq	.+26     	; 0x1b8 <DIO_setPinVal+0x34>
     19e:	08 95       	ret
     1a0:	2b b3       	in	r18, 0x1b	; 27
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_setPinVal+0x28>
     1a8:	88 0f       	add	r24, r24
     1aa:	99 1f       	adc	r25, r25
     1ac:	6a 95       	dec	r22
     1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_setPinVal+0x24>
     1b0:	80 95       	com	r24
     1b2:	82 23       	and	r24, r18
     1b4:	8b bb       	out	0x1b, r24	; 27
     1b6:	08 95       	ret
     1b8:	2b b3       	in	r18, 0x1b	; 27
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_setPinVal+0x40>
     1c0:	88 0f       	add	r24, r24
     1c2:	99 1f       	adc	r25, r25
     1c4:	6a 95       	dec	r22
     1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_setPinVal+0x3c>
     1c8:	82 2b       	or	r24, r18
     1ca:	8b bb       	out	0x1b, r24	; 27
     1cc:	08 95       	ret
     1ce:	44 23       	and	r20, r20
     1d0:	19 f0       	breq	.+6      	; 0x1d8 <DIO_setPinVal+0x54>
     1d2:	41 30       	cpi	r20, 0x01	; 1
     1d4:	69 f0       	breq	.+26     	; 0x1f0 <DIO_setPinVal+0x6c>
     1d6:	08 95       	ret
     1d8:	28 b3       	in	r18, 0x18	; 24
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_setPinVal+0x60>
     1e0:	88 0f       	add	r24, r24
     1e2:	99 1f       	adc	r25, r25
     1e4:	6a 95       	dec	r22
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_setPinVal+0x5c>
     1e8:	80 95       	com	r24
     1ea:	82 23       	and	r24, r18
     1ec:	88 bb       	out	0x18, r24	; 24
     1ee:	08 95       	ret
     1f0:	28 b3       	in	r18, 0x18	; 24
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_setPinVal+0x78>
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_setPinVal+0x74>
     200:	82 2b       	or	r24, r18
     202:	88 bb       	out	0x18, r24	; 24
     204:	08 95       	ret
     206:	44 23       	and	r20, r20
     208:	19 f0       	breq	.+6      	; 0x210 <DIO_setPinVal+0x8c>
     20a:	41 30       	cpi	r20, 0x01	; 1
     20c:	69 f0       	breq	.+26     	; 0x228 <DIO_setPinVal+0xa4>
     20e:	08 95       	ret
     210:	25 b3       	in	r18, 0x15	; 21
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_setPinVal+0x98>
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	6a 95       	dec	r22
     21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_setPinVal+0x94>
     220:	80 95       	com	r24
     222:	82 23       	and	r24, r18
     224:	85 bb       	out	0x15, r24	; 21
     226:	08 95       	ret
     228:	25 b3       	in	r18, 0x15	; 21
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_setPinVal+0xb0>
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	6a 95       	dec	r22
     236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_setPinVal+0xac>
     238:	82 2b       	or	r24, r18
     23a:	85 bb       	out	0x15, r24	; 21
     23c:	08 95       	ret
     23e:	44 23       	and	r20, r20
     240:	19 f0       	breq	.+6      	; 0x248 <DIO_setPinVal+0xc4>
     242:	41 30       	cpi	r20, 0x01	; 1
     244:	69 f0       	breq	.+26     	; 0x260 <DIO_setPinVal+0xdc>
     246:	08 95       	ret
     248:	22 b3       	in	r18, 0x12	; 18
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_setPinVal+0xd0>
     250:	88 0f       	add	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_setPinVal+0xcc>
     258:	80 95       	com	r24
     25a:	82 23       	and	r24, r18
     25c:	82 bb       	out	0x12, r24	; 18
     25e:	08 95       	ret
     260:	22 b3       	in	r18, 0x12	; 18
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_setPinVal+0xe8>
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	6a 95       	dec	r22
     26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_setPinVal+0xe4>
     270:	82 2b       	or	r24, r18
     272:	82 bb       	out	0x12, r24	; 18
     274:	08 95       	ret

00000276 <DIO_readPinVal>:
}

u8 DIO_readPinVal(u8 copy_u8port, u8 copy_u8pin) {
   u8 local_u8State;

   switch (copy_u8port) {
     276:	81 30       	cpi	r24, 0x01	; 1
     278:	81 f0       	breq	.+32     	; 0x29a <DIO_readPinVal+0x24>
     27a:	28 f0       	brcs	.+10     	; 0x286 <DIO_readPinVal+0x10>
     27c:	82 30       	cpi	r24, 0x02	; 2
     27e:	b9 f0       	breq	.+46     	; 0x2ae <DIO_readPinVal+0x38>
     280:	83 30       	cpi	r24, 0x03	; 3
     282:	f9 f0       	breq	.+62     	; 0x2c2 <DIO_readPinVal+0x4c>
     284:	27 c0       	rjmp	.+78     	; 0x2d4 <DIO_readPinVal+0x5e>
   case DIO_PORTA:
      local_u8State = GET_BIT(PINA_REG, copy_u8pin);
     286:	89 b3       	in	r24, 0x19	; 25
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_readPinVal+0x1a>
     28c:	95 95       	asr	r25
     28e:	87 95       	ror	r24
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_readPinVal+0x16>
     294:	98 2f       	mov	r25, r24
     296:	91 70       	andi	r25, 0x01	; 1
      break;
     298:	1d c0       	rjmp	.+58     	; 0x2d4 <DIO_readPinVal+0x5e>
   case DIO_PORTB:
      local_u8State = GET_BIT(PINB_REG, copy_u8pin);
     29a:	86 b3       	in	r24, 0x16	; 22
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_readPinVal+0x2e>
     2a0:	95 95       	asr	r25
     2a2:	87 95       	ror	r24
     2a4:	6a 95       	dec	r22
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_readPinVal+0x2a>
     2a8:	98 2f       	mov	r25, r24
     2aa:	91 70       	andi	r25, 0x01	; 1
      break;
     2ac:	13 c0       	rjmp	.+38     	; 0x2d4 <DIO_readPinVal+0x5e>
   case DIO_PORTC:
      local_u8State = GET_BIT(PINC_REG, copy_u8pin);
     2ae:	83 b3       	in	r24, 0x13	; 19
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_readPinVal+0x42>
     2b4:	95 95       	asr	r25
     2b6:	87 95       	ror	r24
     2b8:	6a 95       	dec	r22
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_readPinVal+0x3e>
     2bc:	98 2f       	mov	r25, r24
     2be:	91 70       	andi	r25, 0x01	; 1
      break;
     2c0:	09 c0       	rjmp	.+18     	; 0x2d4 <DIO_readPinVal+0x5e>
   case DIO_PORTD:
      local_u8State = GET_BIT(PINC_REG, copy_u8pin);
     2c2:	83 b3       	in	r24, 0x13	; 19
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_readPinVal+0x56>
     2c8:	95 95       	asr	r25
     2ca:	87 95       	ror	r24
     2cc:	6a 95       	dec	r22
     2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_readPinVal+0x52>
     2d0:	98 2f       	mov	r25, r24
     2d2:	91 70       	andi	r25, 0x01	; 1
   default: // Add an Error Prompt or interrupt here later******
      break;
   }

   return local_u8State;
}
     2d4:	89 2f       	mov	r24, r25
     2d6:	08 95       	ret

000002d8 <TMR0_init>:
		}
		break;
		default: // Add error state here
		break;
	}
}
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	31 f0       	breq	.+12     	; 0x2e8 <TMR0_init+0x10>
     2dc:	a8 f0       	brcs	.+42     	; 0x308 <TMR0_init+0x30>
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	f9 f0       	breq	.+62     	; 0x320 <TMR0_init+0x48>
     2e2:	83 30       	cpi	r24, 0x03	; 3
     2e4:	a9 f1       	breq	.+106    	; 0x350 <TMR0_init+0x78>
     2e6:	08 95       	ret
     2e8:	83 b7       	in	r24, 0x33	; 51
     2ea:	8f 7b       	andi	r24, 0xBF	; 191
     2ec:	83 bf       	out	0x33, r24	; 51
     2ee:	83 b7       	in	r24, 0x33	; 51
     2f0:	87 7f       	andi	r24, 0xF7	; 247
     2f2:	83 bf       	out	0x33, r24	; 51
     2f4:	61 30       	cpi	r22, 0x01	; 1
     2f6:	19 f4       	brne	.+6      	; 0x2fe <TMR0_init+0x26>
     2f8:	81 e7       	ldi	r24, 0x71	; 113
     2fa:	82 bf       	out	0x32, r24	; 50
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <TMR0_init+0x28>
     2fe:	12 be       	out	0x32, r1	; 50
     300:	89 b7       	in	r24, 0x39	; 57
     302:	81 60       	ori	r24, 0x01	; 1
     304:	89 bf       	out	0x39, r24	; 57
     306:	08 95       	ret
     308:	83 b7       	in	r24, 0x33	; 51
     30a:	8f 7b       	andi	r24, 0xBF	; 191
     30c:	83 bf       	out	0x33, r24	; 51
     30e:	83 b7       	in	r24, 0x33	; 51
     310:	88 60       	ori	r24, 0x08	; 8
     312:	83 bf       	out	0x33, r24	; 51
     314:	89 ef       	ldi	r24, 0xF9	; 249
     316:	8c bf       	out	0x3c, r24	; 60
     318:	89 b7       	in	r24, 0x39	; 57
     31a:	82 60       	ori	r24, 0x02	; 2
     31c:	89 bf       	out	0x39, r24	; 57
     31e:	08 95       	ret
     320:	83 b7       	in	r24, 0x33	; 51
     322:	80 64       	ori	r24, 0x40	; 64
     324:	83 bf       	out	0x33, r24	; 51
     326:	83 b7       	in	r24, 0x33	; 51
     328:	88 60       	ori	r24, 0x08	; 8
     32a:	83 bf       	out	0x33, r24	; 51
     32c:	44 23       	and	r20, r20
     32e:	19 f0       	breq	.+6      	; 0x336 <TMR0_init+0x5e>
     330:	41 30       	cpi	r20, 0x01	; 1
     332:	41 f0       	breq	.+16     	; 0x344 <TMR0_init+0x6c>
     334:	0d c0       	rjmp	.+26     	; 0x350 <TMR0_init+0x78>
     336:	83 b7       	in	r24, 0x33	; 51
     338:	80 61       	ori	r24, 0x10	; 16
     33a:	83 bf       	out	0x33, r24	; 51
     33c:	83 b7       	in	r24, 0x33	; 51
     33e:	80 62       	ori	r24, 0x20	; 32
     340:	83 bf       	out	0x33, r24	; 51
     342:	06 c0       	rjmp	.+12     	; 0x350 <TMR0_init+0x78>
     344:	83 b7       	in	r24, 0x33	; 51
     346:	8f 7e       	andi	r24, 0xEF	; 239
     348:	83 bf       	out	0x33, r24	; 51
     34a:	83 b7       	in	r24, 0x33	; 51
     34c:	80 62       	ori	r24, 0x20	; 32
     34e:	83 bf       	out	0x33, r24	; 51
     350:	83 b7       	in	r24, 0x33	; 51
     352:	80 64       	ori	r24, 0x40	; 64
     354:	83 bf       	out	0x33, r24	; 51
     356:	83 b7       	in	r24, 0x33	; 51
     358:	87 7f       	andi	r24, 0xF7	; 247
     35a:	83 bf       	out	0x33, r24	; 51
     35c:	44 23       	and	r20, r20
     35e:	19 f0       	breq	.+6      	; 0x366 <TMR0_init+0x8e>
     360:	41 30       	cpi	r20, 0x01	; 1
     362:	41 f0       	breq	.+16     	; 0x374 <TMR0_init+0x9c>
     364:	08 95       	ret
     366:	83 b7       	in	r24, 0x33	; 51
     368:	80 61       	ori	r24, 0x10	; 16
     36a:	83 bf       	out	0x33, r24	; 51
     36c:	83 b7       	in	r24, 0x33	; 51
     36e:	80 62       	ori	r24, 0x20	; 32
     370:	83 bf       	out	0x33, r24	; 51
     372:	08 95       	ret
     374:	83 b7       	in	r24, 0x33	; 51
     376:	8f 7e       	andi	r24, 0xEF	; 239
     378:	83 bf       	out	0x33, r24	; 51
     37a:	83 b7       	in	r24, 0x33	; 51
     37c:	80 62       	ori	r24, 0x20	; 32
     37e:	83 bf       	out	0x33, r24	; 51
     380:	08 95       	ret

00000382 <TMR0_start>:
     382:	82 30       	cpi	r24, 0x02	; 2
     384:	f9 f0       	breq	.+62     	; 0x3c4 <TMR0_start+0x42>
     386:	28 f4       	brcc	.+10     	; 0x392 <TMR0_start+0x10>
     388:	88 23       	and	r24, r24
     38a:	41 f0       	breq	.+16     	; 0x39c <TMR0_start+0x1a>
     38c:	81 30       	cpi	r24, 0x01	; 1
     38e:	81 f0       	breq	.+32     	; 0x3b0 <TMR0_start+0x2e>
     390:	08 95       	ret
     392:	83 30       	cpi	r24, 0x03	; 3
     394:	09 f1       	breq	.+66     	; 0x3d8 <TMR0_start+0x56>
     396:	84 30       	cpi	r24, 0x04	; 4
     398:	49 f1       	breq	.+82     	; 0x3ec <TMR0_start+0x6a>
     39a:	08 95       	ret
     39c:	83 b7       	in	r24, 0x33	; 51
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	83 bf       	out	0x33, r24	; 51
     3a2:	83 b7       	in	r24, 0x33	; 51
     3a4:	8d 7f       	andi	r24, 0xFD	; 253
     3a6:	83 bf       	out	0x33, r24	; 51
     3a8:	83 b7       	in	r24, 0x33	; 51
     3aa:	8b 7f       	andi	r24, 0xFB	; 251
     3ac:	83 bf       	out	0x33, r24	; 51
     3ae:	08 95       	ret
     3b0:	83 b7       	in	r24, 0x33	; 51
     3b2:	8e 7f       	andi	r24, 0xFE	; 254
     3b4:	83 bf       	out	0x33, r24	; 51
     3b6:	83 b7       	in	r24, 0x33	; 51
     3b8:	82 60       	ori	r24, 0x02	; 2
     3ba:	83 bf       	out	0x33, r24	; 51
     3bc:	83 b7       	in	r24, 0x33	; 51
     3be:	8b 7f       	andi	r24, 0xFB	; 251
     3c0:	83 bf       	out	0x33, r24	; 51
     3c2:	08 95       	ret
     3c4:	83 b7       	in	r24, 0x33	; 51
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	83 bf       	out	0x33, r24	; 51
     3ca:	83 b7       	in	r24, 0x33	; 51
     3cc:	82 60       	ori	r24, 0x02	; 2
     3ce:	83 bf       	out	0x33, r24	; 51
     3d0:	83 b7       	in	r24, 0x33	; 51
     3d2:	8b 7f       	andi	r24, 0xFB	; 251
     3d4:	83 bf       	out	0x33, r24	; 51
     3d6:	08 95       	ret
     3d8:	83 b7       	in	r24, 0x33	; 51
     3da:	8e 7f       	andi	r24, 0xFE	; 254
     3dc:	83 bf       	out	0x33, r24	; 51
     3de:	83 b7       	in	r24, 0x33	; 51
     3e0:	8d 7f       	andi	r24, 0xFD	; 253
     3e2:	83 bf       	out	0x33, r24	; 51
     3e4:	83 b7       	in	r24, 0x33	; 51
     3e6:	84 60       	ori	r24, 0x04	; 4
     3e8:	83 bf       	out	0x33, r24	; 51
     3ea:	08 95       	ret
     3ec:	83 b7       	in	r24, 0x33	; 51
     3ee:	81 60       	ori	r24, 0x01	; 1
     3f0:	83 bf       	out	0x33, r24	; 51
     3f2:	83 b7       	in	r24, 0x33	; 51
     3f4:	8d 7f       	andi	r24, 0xFD	; 253
     3f6:	83 bf       	out	0x33, r24	; 51
     3f8:	83 b7       	in	r24, 0x33	; 51
     3fa:	84 60       	ori	r24, 0x04	; 4
     3fc:	83 bf       	out	0x33, r24	; 51
     3fe:	08 95       	ret

00000400 <TMR0_generatePWM>:
     400:	85 36       	cpi	r24, 0x65	; 101
     402:	08 f0       	brcs	.+2      	; 0x406 <TMR0_generatePWM+0x6>
     404:	84 e6       	ldi	r24, 0x64	; 100
     406:	66 23       	and	r22, r22
     408:	71 f0       	breq	.+28     	; 0x426 <TMR0_generatePWM+0x26>
     40a:	61 30       	cpi	r22, 0x01	; 1
     40c:	e9 f4       	brne	.+58     	; 0x448 <TMR0_generatePWM+0x48>
     40e:	98 2f       	mov	r25, r24
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	64 e6       	ldi	r22, 0x64	; 100
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	0e 94 37 0a 	call	0x146e	; 0x146e <__divmodhi4>
     41a:	61 50       	subi	r22, 0x01	; 1
     41c:	6c bf       	out	0x3c, r22	; 60
     41e:	84 2f       	mov	r24, r20
     420:	0e 94 c1 01 	call	0x382	; 0x382 <TMR0_start>
     424:	08 95       	ret
     426:	64 e6       	ldi	r22, 0x64	; 100
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	9b 01       	movw	r18, r22
     42c:	28 1b       	sub	r18, r24
     42e:	31 09       	sbc	r19, r1
     430:	5f ef       	ldi	r21, 0xFF	; 255
     432:	52 9f       	mul	r21, r18
     434:	c0 01       	movw	r24, r0
     436:	53 9f       	mul	r21, r19
     438:	90 0d       	add	r25, r0
     43a:	11 24       	eor	r1, r1
     43c:	0e 94 37 0a 	call	0x146e	; 0x146e <__divmodhi4>
     440:	6c bf       	out	0x3c, r22	; 60
     442:	84 2f       	mov	r24, r20
     444:	0e 94 c1 01 	call	0x382	; 0x382 <TMR0_start>
     448:	08 95       	ret

0000044a <__vector_11>:
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	2f 93       	push	r18
     456:	3f 93       	push	r19
     458:	4f 93       	push	r20
     45a:	5f 93       	push	r21
     45c:	6f 93       	push	r22
     45e:	7f 93       	push	r23
     460:	8f 93       	push	r24
     462:	9f 93       	push	r25
     464:	af 93       	push	r26
     466:	bf 93       	push	r27
     468:	ef 93       	push	r30
     46a:	ff 93       	push	r31
     46c:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <overflowCounter.1709>
     470:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <overflowCounter.1709+0x1>
     474:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <overflowCounter.1709+0x2>
     478:	b0 91 ed 00 	lds	r27, 0x00ED	; 0x8000ed <overflowCounter.1709+0x3>
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	a1 1d       	adc	r26, r1
     480:	b1 1d       	adc	r27, r1
     482:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <overflowCounter.1709>
     486:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <overflowCounter.1709+0x1>
     48a:	a0 93 ec 00 	sts	0x00EC, r26	; 0x8000ec <overflowCounter.1709+0x2>
     48e:	b0 93 ed 00 	sts	0x00ED, r27	; 0x8000ed <overflowCounter.1709+0x3>
     492:	40 91 ee 00 	lds	r20, 0x00EE	; 0x8000ee <PRV_u16CounterVal>
     496:	50 91 ef 00 	lds	r21, 0x00EF	; 0x8000ef <PRV_u16CounterVal+0x1>
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	84 17       	cp	r24, r20
     4a0:	95 07       	cpc	r25, r21
     4a2:	a6 07       	cpc	r26, r22
     4a4:	b7 07       	cpc	r27, r23
     4a6:	78 f0       	brcs	.+30     	; 0x4c6 <__vector_11+0x7c>
     4a8:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <overflowCounter.1709>
     4ac:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <overflowCounter.1709+0x1>
     4b0:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <overflowCounter.1709+0x2>
     4b4:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <overflowCounter.1709+0x3>
     4b8:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <PRV_ptrFuncCallBack_OVF>
     4bc:	f0 91 f3 00 	lds	r31, 0x00F3	; 0x8000f3 <PRV_ptrFuncCallBack_OVF+0x1>
     4c0:	30 97       	sbiw	r30, 0x00	; 0
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <__vector_11+0x7c>
     4c4:	09 95       	icall
     4c6:	ff 91       	pop	r31
     4c8:	ef 91       	pop	r30
     4ca:	bf 91       	pop	r27
     4cc:	af 91       	pop	r26
     4ce:	9f 91       	pop	r25
     4d0:	8f 91       	pop	r24
     4d2:	7f 91       	pop	r23
     4d4:	6f 91       	pop	r22
     4d6:	5f 91       	pop	r21
     4d8:	4f 91       	pop	r20
     4da:	3f 91       	pop	r19
     4dc:	2f 91       	pop	r18
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <__vector_10>:
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	2f 93       	push	r18
     4f4:	3f 93       	push	r19
     4f6:	4f 93       	push	r20
     4f8:	5f 93       	push	r21
     4fa:	6f 93       	push	r22
     4fc:	7f 93       	push	r23
     4fe:	8f 93       	push	r24
     500:	9f 93       	push	r25
     502:	af 93       	push	r26
     504:	bf 93       	push	r27
     506:	ef 93       	push	r30
     508:	ff 93       	push	r31
     50a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
     50e:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__data_end+0x1>
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__data_end+0x1>
     518:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__data_end>
     51c:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <PRV_u16CounterVal>
     520:	30 91 ef 00 	lds	r19, 0x00EF	; 0x8000ef <PRV_u16CounterVal+0x1>
     524:	82 17       	cp	r24, r18
     526:	93 07       	cpc	r25, r19
     528:	58 f0       	brcs	.+22     	; 0x540 <__vector_10+0x58>
     52a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__data_end+0x1>
     52e:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__data_end>
     532:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <PRV_ptrFuncCallBack_CTC>
     536:	f0 91 f1 00 	lds	r31, 0x00F1	; 0x8000f1 <PRV_ptrFuncCallBack_CTC+0x1>
     53a:	30 97       	sbiw	r30, 0x00	; 0
     53c:	09 f0       	breq	.+2      	; 0x540 <__vector_10+0x58>
     53e:	09 95       	icall
     540:	ff 91       	pop	r31
     542:	ef 91       	pop	r30
     544:	bf 91       	pop	r27
     546:	af 91       	pop	r26
     548:	9f 91       	pop	r25
     54a:	8f 91       	pop	r24
     54c:	7f 91       	pop	r23
     54e:	6f 91       	pop	r22
     550:	5f 91       	pop	r21
     552:	4f 91       	pop	r20
     554:	3f 91       	pop	r19
     556:	2f 91       	pop	r18
     558:	0f 90       	pop	r0
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	0f 90       	pop	r0
     55e:	1f 90       	pop	r1
     560:	18 95       	reti

00000562 <L293D_init>:
     562:	41 e0       	ldi	r20, 0x01	; 1
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <TMR0_init>
     56c:	41 e0       	ldi	r20, 0x01	; 1
     56e:	63 e0       	ldi	r22, 0x03	; 3
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	64 e0       	ldi	r22, 0x04	; 4
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	65 e0       	ldi	r22, 0x05	; 5
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     58a:	41 e0       	ldi	r20, 0x01	; 1
     58c:	66 e0       	ldi	r22, 0x06	; 6
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     594:	41 e0       	ldi	r20, 0x01	; 1
     596:	67 e0       	ldi	r22, 0x07	; 7
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     59e:	41 e0       	ldi	r20, 0x01	; 1
     5a0:	62 e0       	ldi	r22, 0x02	; 2
     5a2:	83 e0       	ldi	r24, 0x03	; 3
     5a4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     5a8:	41 e0       	ldi	r20, 0x01	; 1
     5aa:	62 e0       	ldi	r22, 0x02	; 2
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     5b2:	41 e0       	ldi	r20, 0x01	; 1
     5b4:	66 e0       	ldi	r22, 0x06	; 6
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     5bc:	41 e0       	ldi	r20, 0x01	; 1
     5be:	63 e0       	ldi	r22, 0x03	; 3
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     5c6:	08 95       	ret

000005c8 <Motors_forward>:
     5c8:	41 e0       	ldi	r20, 0x01	; 1
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	0e 94 00 02 	call	0x400	; 0x400 <TMR0_generatePWM>
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	63 e0       	ldi	r22, 0x03	; 3
     5d4:	82 e0       	ldi	r24, 0x02	; 2
     5d6:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     5da:	41 e0       	ldi	r20, 0x01	; 1
     5dc:	64 e0       	ldi	r22, 0x04	; 4
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	65 e0       	ldi	r22, 0x05	; 5
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	66 e0       	ldi	r22, 0x06	; 6
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	67 e0       	ldi	r22, 0x07	; 7
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     602:	41 e0       	ldi	r20, 0x01	; 1
     604:	62 e0       	ldi	r22, 0x02	; 2
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	62 e0       	ldi	r22, 0x02	; 2
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     616:	41 e0       	ldi	r20, 0x01	; 1
     618:	66 e0       	ldi	r22, 0x06	; 6
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     620:	08 95       	ret

00000622 <Motors_left>:
     622:	41 e0       	ldi	r20, 0x01	; 1
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	0e 94 00 02 	call	0x400	; 0x400 <TMR0_generatePWM>
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	67 e0       	ldi	r22, 0x07	; 7
     62e:	82 e0       	ldi	r24, 0x02	; 2
     630:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     634:	41 e0       	ldi	r20, 0x01	; 1
     636:	62 e0       	ldi	r22, 0x02	; 2
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	63 e0       	ldi	r22, 0x03	; 3
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	64 e0       	ldi	r22, 0x04	; 4
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     652:	40 e0       	ldi	r20, 0x00	; 0
     654:	62 e0       	ldi	r22, 0x02	; 2
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	66 e0       	ldi	r22, 0x06	; 6
     660:	83 e0       	ldi	r24, 0x03	; 3
     662:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	65 e0       	ldi	r22, 0x05	; 5
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	66 e0       	ldi	r22, 0x06	; 6
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     67a:	08 95       	ret

0000067c <Motors_right>:
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	0e 94 00 02 	call	0x400	; 0x400 <TMR0_generatePWM>
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	63 e0       	ldi	r22, 0x03	; 3
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     68e:	41 e0       	ldi	r20, 0x01	; 1
     690:	64 e0       	ldi	r22, 0x04	; 4
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     698:	41 e0       	ldi	r20, 0x01	; 1
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	62 e0       	ldi	r22, 0x02	; 2
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	65 e0       	ldi	r22, 0x05	; 5
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	66 e0       	ldi	r22, 0x06	; 6
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	62 e0       	ldi	r22, 0x02	; 2
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	66 e0       	ldi	r22, 0x06	; 6
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6d4:	08 95       	ret

000006d6 <Motors_off>:
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	63 e0       	ldi	r22, 0x03	; 3
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	64 e0       	ldi	r22, 0x04	; 4
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	65 e0       	ldi	r22, 0x05	; 5
     6ee:	82 e0       	ldi	r24, 0x02	; 2
     6f0:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	66 e0       	ldi	r22, 0x06	; 6
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	67 e0       	ldi	r22, 0x07	; 7
     702:	82 e0       	ldi	r24, 0x02	; 2
     704:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	62 e0       	ldi	r22, 0x02	; 2
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	62 e0       	ldi	r22, 0x02	; 2
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	66 e0       	ldi	r22, 0x06	; 6
     720:	83 e0       	ldi	r24, 0x03	; 3
     722:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     726:	08 95       	ret

00000728 <SERVO_centerHead>:
     728:	8a e5       	ldi	r24, 0x5A	; 90
     72a:	0e 94 c1 07 	call	0xf82	; 0xf82 <SG90_move>
     72e:	08 95       	ret

00000730 <TCRT_init>:
*
*/

void TCRT_init(void) {
	// Left sensor initialize
	DIO_setPinDirection(TCRT_LEFT_PORT_A, TCRT_LEFT_PIN_A, DIO_PIN_INPUT); // A0
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	62 e0       	ldi	r22, 0x02	; 2
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(TCRT_LEFT_PORT, TCRT_LEFT_PIN, DIO_PIN_INPUT); // D0
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	67 e0       	ldi	r22, 0x07	; 7
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	
	// Right sensor initialize
	DIO_setPinDirection(TCRT_RIGHT_PORT_A, TCRT_RIGHT_PIN_A, DIO_PIN_INPUT); // A0
     744:	40 e0       	ldi	r20, 0x00	; 0
     746:	63 e0       	ldi	r22, 0x03	; 3
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(TCRT_RIGHT_PORT, TCRT_RIGHT_PIN, DIO_PIN_INPUT); // D0
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	66 e0       	ldi	r22, 0x06	; 6
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	
	// Center sensor initialize
	DIO_setPinDirection(TCRT_CENTER_PORT_A, TCRT_CENTER_PIN_A, DIO_PIN_INPUT); // A0
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	61 e0       	ldi	r22, 0x01	; 1
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(TCRT_CENTER_PORT, TCRT_CENTER_PIN, DIO_PIN_INPUT); // D0
     762:	40 e0       	ldi	r20, 0x00	; 0
     764:	65 e0       	ldi	r22, 0x05	; 5
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     76c:	08 95       	ret

0000076e <TCRT_getAnalog>:
}

void TCRT_getAnalog(u8 copy_u8SensorPosition, u16 *copy_u16Reading) {
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	eb 01       	movw	r28, r22
	// Option to read from specified sensor
	switch (copy_u8SensorPosition) {
     774:	81 30       	cpi	r24, 0x01	; 1
     776:	81 f0       	breq	.+32     	; 0x798 <TCRT_getAnalog+0x2a>
     778:	18 f0       	brcs	.+6      	; 0x780 <TCRT_getAnalog+0x12>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	39 f0       	breq	.+14     	; 0x78c <TCRT_getAnalog+0x1e>
     77e:	11 c0       	rjmp	.+34     	; 0x7a2 <TCRT_getAnalog+0x34>
		case CENTER_SENSOR:
		*copy_u16Reading = ADC_getValue(TCRT_CENTER_CHANNEL);
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	0e 94 bc 05 	call	0xb78	; 0xb78 <ADC_getValue>
     786:	99 83       	std	Y+1, r25	; 0x01
     788:	88 83       	st	Y, r24
		break;
     78a:	0b c0       	rjmp	.+22     	; 0x7a2 <TCRT_getAnalog+0x34>
		case LEFT_SENSOR:
		*copy_u16Reading = ADC_getValue(TCRT_LEFT_CHANNEL);
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	0e 94 bc 05 	call	0xb78	; 0xb78 <ADC_getValue>
     792:	99 83       	std	Y+1, r25	; 0x01
     794:	88 83       	st	Y, r24
		break;
     796:	05 c0       	rjmp	.+10     	; 0x7a2 <TCRT_getAnalog+0x34>
		case RIGHT_SENSOR:
		*copy_u16Reading = ADC_getValue(TCRT_RIGHT_CHANNEL);
     798:	83 e0       	ldi	r24, 0x03	; 3
     79a:	0e 94 bc 05 	call	0xb78	; 0xb78 <ADC_getValue>
     79e:	99 83       	std	Y+1, r25	; 0x01
     7a0:	88 83       	st	Y, r24
		break;
		default: // Add error state
		break;
	}
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <TCRT_getDigitalVal>:

void TCRT_getDigitalVal(u8 copy_u8SensorPosition, u8 *copy_u8State) {
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	eb 01       	movw	r28, r22
	// Reading state of the Digital value of sensors
	switch (copy_u8SensorPosition) {
     7ae:	81 30       	cpi	r24, 0x01	; 1
     7b0:	81 f0       	breq	.+32     	; 0x7d2 <TCRT_getDigitalVal+0x2a>
     7b2:	18 f0       	brcs	.+6      	; 0x7ba <TCRT_getDigitalVal+0x12>
     7b4:	82 30       	cpi	r24, 0x02	; 2
     7b6:	39 f0       	breq	.+14     	; 0x7c6 <TCRT_getDigitalVal+0x1e>
     7b8:	11 c0       	rjmp	.+34     	; 0x7dc <TCRT_getDigitalVal+0x34>
		case CENTER_SENSOR:
		*copy_u8State = DIO_readPinVal(TCRT_CENTER_PORT, TCRT_CENTER_PIN);
     7ba:	65 e0       	ldi	r22, 0x05	; 5
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_readPinVal>
     7c2:	88 83       	st	Y, r24
		break;
     7c4:	0b c0       	rjmp	.+22     	; 0x7dc <TCRT_getDigitalVal+0x34>
		case LEFT_SENSOR:
		*copy_u8State = DIO_readPinVal(TCRT_LEFT_PORT, TCRT_LEFT_PIN);
     7c6:	67 e0       	ldi	r22, 0x07	; 7
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_readPinVal>
     7ce:	88 83       	st	Y, r24
		break;
     7d0:	05 c0       	rjmp	.+10     	; 0x7dc <TCRT_getDigitalVal+0x34>
		case RIGHT_SENSOR:
		*copy_u8State = DIO_readPinVal(TCRT_RIGHT_PORT, TCRT_RIGHT_PIN);
     7d2:	66 e0       	ldi	r22, 0x06	; 6
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_readPinVal>
     7da:	88 83       	st	Y, r24
		break;
		default: // Add error state
		break;
	}
}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <AUTOV_init>:
*/

// Function to initialize pins connected, modules, and peripherals.
void AUTOV_init(void) {
	// Calling function to setup L293D module board functions
	L293D_init();
     7e2:	0e 94 b1 02 	call	0x562	; 0x562 <L293D_init>
	// Calling initialization of HC-SR04 ultrasonic sensor
	HCSR04_init();
     7e6:	0e 94 bb 06 	call	0xd76	; 0xd76 <HCSR04_init>
	// Initializing Servo motor
	SG90_init();
     7ea:	0e 94 a2 07 	call	0xf44	; 0xf44 <SG90_init>
	// Start ADC peripheral
	ADC_init(ADC_REFERENCE_AVCC);
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	0e 94 8f 05 	call	0xb1e	; 0xb1e <ADC_init>
	// Initializing all pins of the Infrared tracking sensors
	TCRT_init();
     7f4:	0e 94 98 03 	call	0x730	; 0x730 <TCRT_init>
	// Global interrupts
	GIE_enable();
     7f8:	0e 94 8b 05 	call	0xb16	; 0xb16 <GIE_enable>
	// LCD initialize
	LCD_init();
     7fc:	0e 94 03 06 	call	0xc06	; 0xc06 <LCD_init>
     800:	08 95       	ret

00000802 <AUTOV_lineFollowing>:
}

// Main line following function, this function simply follows the line on ground by reading
// output of 3 TCRT sensors and constantly checking for obstacles using the Ultrasonic sensor
// And taking the appropriate action should an obstacle appear
void AUTOV_lineFollowing(void) {
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	29 97       	sbiw	r28, 0x09	; 9
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
	// Sensor variables
	u8 local_u8CenterState = 0, local_u8LeftState = 0, local_u8RightState = 0;
     816:	19 82       	std	Y+1, r1	; 0x01
     818:	1a 82       	std	Y+2, r1	; 0x02
     81a:	1b 82       	std	Y+3, r1	; 0x03
	u16 local_u16CenterSensAnalog = 0, local_u16RightSensAnalog = 0, local_u16LeftSensAnalog = 0;
     81c:	1d 82       	std	Y+5, r1	; 0x05
     81e:	1c 82       	std	Y+4, r1	; 0x04
     820:	1f 82       	std	Y+7, r1	; 0x07
     822:	1e 82       	std	Y+6, r1	; 0x06
     824:	19 86       	std	Y+9, r1	; 0x09
     826:	18 86       	std	Y+8, r1	; 0x08
	
	// Error Variable
	u8 local_u8ErrVar = 0;
	
	// Checking for TCRT sensor values digital readings
	TCRT_getDigitalVal(RIGHT_SENSOR, &local_u8RightState);
     828:	be 01       	movw	r22, r28
     82a:	6d 5f       	subi	r22, 0xFD	; 253
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <TCRT_getDigitalVal>
	TCRT_getDigitalVal(CENTER_SENSOR, &local_u8CenterState);
     834:	be 01       	movw	r22, r28
     836:	6f 5f       	subi	r22, 0xFF	; 255
     838:	7f 4f       	sbci	r23, 0xFF	; 255
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <TCRT_getDigitalVal>
	TCRT_getDigitalVal(LEFT_SENSOR, &local_u8LeftState);
     840:	be 01       	movw	r22, r28
     842:	6e 5f       	subi	r22, 0xFE	; 254
     844:	7f 4f       	sbci	r23, 0xFF	; 255
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <TCRT_getDigitalVal>
	
	// Checking for TCRT analog readings
	TCRT_getAnalog(RIGHT_SENSOR, &local_u16RightSensAnalog);
     84c:	be 01       	movw	r22, r28
     84e:	6a 5f       	subi	r22, 0xFA	; 250
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	0e 94 b7 03 	call	0x76e	; 0x76e <TCRT_getAnalog>
	TCRT_getAnalog(CENTER_SENSOR, &local_u16CenterSensAnalog);
     858:	be 01       	movw	r22, r28
     85a:	6c 5f       	subi	r22, 0xFC	; 252
     85c:	7f 4f       	sbci	r23, 0xFF	; 255
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 b7 03 	call	0x76e	; 0x76e <TCRT_getAnalog>
	TCRT_getAnalog(LEFT_SENSOR, &local_u16LeftSensAnalog);
     864:	be 01       	movw	r22, r28
     866:	68 5f       	subi	r22, 0xF8	; 248
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	0e 94 b7 03 	call	0x76e	; 0x76e <TCRT_getAnalog>
	LCD_moveCursor(1, 0);
	LCD_displayNumber(local_f32DistMeasured, 2);
	_delay_ms(400);*/
	
	// Main Line following conditions
	if (local_u8RightState == RIGHT_LOW && local_u8LeftState == LEFT_LOW) {
     870:	8b 81       	ldd	r24, Y+3	; 0x03
     872:	81 11       	cpse	r24, r1
     874:	27 c0       	rjmp	.+78     	; 0x8c4 <__stack+0x65>
     876:	9a 81       	ldd	r25, Y+2	; 0x02
     878:	91 11       	cpse	r25, r1
     87a:	24 c0       	rjmp	.+72     	; 0x8c4 <__stack+0x65>
		Motors_forward(MEDIUM);
     87c:	82 e3       	ldi	r24, 0x32	; 50
     87e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Motors_forward>
		LCD_clear();
     882:	0e 94 6d 06 	call	0xcda	; 0xcda <LCD_clear>
		LCD_displayString((u8*) "Direction: ");
     886:	88 e7       	ldi	r24, 0x78	; 120
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 57 06 	call	0xcae	; 0xcae <LCD_displayString>
		LCD_moveCursor(1, 0);
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 77 06 	call	0xcee	; 0xcee <LCD_moveCursor>
		LCD_displayString((u8*) "Forward ");
     89a:	84 e8       	ldi	r24, 0x84	; 132
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0e 94 57 06 	call	0xcae	; 0xcae <LCD_displayString>
		LCD_createAndDisplayChar(0, arrowUP, 1, 9);
     8a2:	29 e0       	ldi	r18, 0x09	; 9
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	41 e0       	ldi	r20, 0x01	; 1
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	60 e7       	ldi	r22, 0x70	; 112
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_createAndDisplayChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8b6:	8f e3       	ldi	r24, 0x3F	; 63
     8b8:	9c e9       	ldi	r25, 0x9C	; 156
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <__stack+0x5b>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <__stack+0x61>
     8c0:	00 00       	nop
     8c2:	6b c0       	rjmp	.+214    	; 0x99a <__stack+0x13b>
		_delay_ms(10);
	}
	else if (local_u8RightState == RIGHT_HIGH && local_u8LeftState == LEFT_LOW) {
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	39 f5       	brne	.+78     	; 0x916 <__stack+0xb7>
     8c8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ca:	91 11       	cpse	r25, r1
     8cc:	24 c0       	rjmp	.+72     	; 0x916 <__stack+0xb7>
		Motors_right(FULL_SPEED);
     8ce:	84 e6       	ldi	r24, 0x64	; 100
     8d0:	0e 94 3e 03 	call	0x67c	; 0x67c <Motors_right>
		LCD_clear();
     8d4:	0e 94 6d 06 	call	0xcda	; 0xcda <LCD_clear>
		LCD_displayString((u8*) "Direction: ");
     8d8:	88 e7       	ldi	r24, 0x78	; 120
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 57 06 	call	0xcae	; 0xcae <LCD_displayString>
		LCD_moveCursor(1, 0);
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 77 06 	call	0xcee	; 0xcee <LCD_moveCursor>
		LCD_displayString((u8*) "Right ");
     8ec:	8d e8       	ldi	r24, 0x8D	; 141
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 57 06 	call	0xcae	; 0xcae <LCD_displayString>
		LCD_createAndDisplayChar(1, arrowRIGHT, 1, 7);
     8f4:	27 e0       	ldi	r18, 0x07	; 7
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	41 e0       	ldi	r20, 0x01	; 1
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	68 e6       	ldi	r22, 0x68	; 104
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_createAndDisplayChar>
     908:	8f e3       	ldi	r24, 0x3F	; 63
     90a:	9c e9       	ldi	r25, 0x9C	; 156
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <__stack+0xad>
     910:	00 c0       	rjmp	.+0      	; 0x912 <__stack+0xb3>
     912:	00 00       	nop
     914:	42 c0       	rjmp	.+132    	; 0x99a <__stack+0x13b>
		_delay_ms(10);
	}
	else if (local_u8RightState == RIGHT_LOW && local_u8LeftState == LEFT_HIGH) {
     916:	81 11       	cpse	r24, r1
     918:	27 c0       	rjmp	.+78     	; 0x968 <__stack+0x109>
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	21 f5       	brne	.+72     	; 0x968 <__stack+0x109>
		Motors_left(FULL_SPEED);
     920:	84 e6       	ldi	r24, 0x64	; 100
     922:	0e 94 11 03 	call	0x622	; 0x622 <Motors_left>
		LCD_clear();
     926:	0e 94 6d 06 	call	0xcda	; 0xcda <LCD_clear>
		LCD_displayString((u8*) "Direction: ");
     92a:	88 e7       	ldi	r24, 0x78	; 120
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 57 06 	call	0xcae	; 0xcae <LCD_displayString>
		LCD_moveCursor(1, 0);
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 77 06 	call	0xcee	; 0xcee <LCD_moveCursor>
		LCD_displayString((u8*) "Left ");
     93e:	84 e9       	ldi	r24, 0x94	; 148
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 57 06 	call	0xcae	; 0xcae <LCD_displayString>
		LCD_createAndDisplayChar(1, arrowLEFT, 1, 6);
     946:	26 e0       	ldi	r18, 0x06	; 6
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	41 e0       	ldi	r20, 0x01	; 1
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	60 e6       	ldi	r22, 0x60	; 96
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_createAndDisplayChar>
     95a:	8f e3       	ldi	r24, 0x3F	; 63
     95c:	9c e9       	ldi	r25, 0x9C	; 156
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	f1 f7       	brne	.-4      	; 0x95e <__stack+0xff>
     962:	00 c0       	rjmp	.+0      	; 0x964 <__stack+0x105>
     964:	00 00       	nop
     966:	19 c0       	rjmp	.+50     	; 0x99a <__stack+0x13b>
		_delay_ms(10);
	}
	else {
		local_u8ErrVar = 1; // Error in reading sensor values
		LCD_clear();
     968:	0e 94 6d 06 	call	0xcda	; 0xcda <LCD_clear>
		LCD_displayString((u8*) "Error type 1");
     96c:	8a e9       	ldi	r24, 0x9A	; 154
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 57 06 	call	0xcae	; 0xcae <LCD_displayString>
		LCD_moveCursor(1, 0);
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 77 06 	call	0xcee	; 0xcee <LCD_moveCursor>
		LCD_displayString((u8*) "Reading sensors");
     980:	87 ea       	ldi	r24, 0xA7	; 167
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 57 06 	call	0xcae	; 0xcae <LCD_displayString>
     988:	9f ef       	ldi	r25, 0xFF	; 255
     98a:	28 ef       	ldi	r18, 0xF8	; 248
     98c:	85 e1       	ldi	r24, 0x15	; 21
     98e:	91 50       	subi	r25, 0x01	; 1
     990:	20 40       	sbci	r18, 0x00	; 0
     992:	80 40       	sbci	r24, 0x00	; 0
     994:	e1 f7       	brne	.-8      	; 0x98e <__stack+0x12f>
     996:	00 c0       	rjmp	.+0      	; 0x998 <__stack+0x139>
     998:	00 00       	nop
		_delay_ms(450);
		}
}
     99a:	29 96       	adiw	r28, 0x09	; 9
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <AUTOV_buzzerAlarm>:

void AUTOV_buzzerAlarm(void) {
	// Generating a tone for the buzzer
	DIO_setPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT_HIGH);
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	67 e0       	ldi	r22, 0x07	; 7
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     9b6:	2f ef       	ldi	r18, 0xFF	; 255
     9b8:	81 ee       	ldi	r24, 0xE1	; 225
     9ba:	94 e0       	ldi	r25, 0x04	; 4
     9bc:	21 50       	subi	r18, 0x01	; 1
     9be:	80 40       	sbci	r24, 0x00	; 0
     9c0:	90 40       	sbci	r25, 0x00	; 0
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <AUTOV_buzzerAlarm+0x10>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <AUTOV_buzzerAlarm+0x1a>
     9c6:	00 00       	nop
	_delay_ms(100);
	DIO_setPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT_LOW);
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	67 e0       	ldi	r22, 0x07	; 7
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     9d2:	2f ef       	ldi	r18, 0xFF	; 255
     9d4:	81 ee       	ldi	r24, 0xE1	; 225
     9d6:	94 e0       	ldi	r25, 0x04	; 4
     9d8:	21 50       	subi	r18, 0x01	; 1
     9da:	80 40       	sbci	r24, 0x00	; 0
     9dc:	90 40       	sbci	r25, 0x00	; 0
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <AUTOV_buzzerAlarm+0x2c>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <AUTOV_buzzerAlarm+0x36>
     9e2:	00 00       	nop
	_delay_ms(100);
	DIO_setPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT_HIGH);
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     9ee:	2f ef       	ldi	r18, 0xFF	; 255
     9f0:	81 ee       	ldi	r24, 0xE1	; 225
     9f2:	94 e0       	ldi	r25, 0x04	; 4
     9f4:	21 50       	subi	r18, 0x01	; 1
     9f6:	80 40       	sbci	r24, 0x00	; 0
     9f8:	90 40       	sbci	r25, 0x00	; 0
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <AUTOV_buzzerAlarm+0x48>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <AUTOV_buzzerAlarm+0x52>
     9fe:	00 00       	nop
	_delay_ms(100);
	DIO_setPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT_LOW);
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	67 e0       	ldi	r22, 0x07	; 7
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     a0a:	2f ef       	ldi	r18, 0xFF	; 255
     a0c:	81 ee       	ldi	r24, 0xE1	; 225
     a0e:	94 e0       	ldi	r25, 0x04	; 4
     a10:	21 50       	subi	r18, 0x01	; 1
     a12:	80 40       	sbci	r24, 0x00	; 0
     a14:	90 40       	sbci	r25, 0x00	; 0
     a16:	e1 f7       	brne	.-8      	; 0xa10 <AUTOV_buzzerAlarm+0x64>
     a18:	00 c0       	rjmp	.+0      	; 0xa1a <AUTOV_buzzerAlarm+0x6e>
     a1a:	00 00       	nop
	_delay_ms(100);
	DIO_setPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT_HIGH);
     a1c:	41 e0       	ldi	r20, 0x01	; 1
     a1e:	67 e0       	ldi	r22, 0x07	; 7
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     a26:	2f ef       	ldi	r18, 0xFF	; 255
     a28:	81 ee       	ldi	r24, 0xE1	; 225
     a2a:	94 e0       	ldi	r25, 0x04	; 4
     a2c:	21 50       	subi	r18, 0x01	; 1
     a2e:	80 40       	sbci	r24, 0x00	; 0
     a30:	90 40       	sbci	r25, 0x00	; 0
     a32:	e1 f7       	brne	.-8      	; 0xa2c <AUTOV_buzzerAlarm+0x80>
     a34:	00 c0       	rjmp	.+0      	; 0xa36 <AUTOV_buzzerAlarm+0x8a>
     a36:	00 00       	nop
	_delay_ms(100);
	DIO_setPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT_LOW);	
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	67 e0       	ldi	r22, 0x07	; 7
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     a42:	08 95       	ret

00000a44 <AUTOV_obstacleAvoidance>:
// This is the second main function of the Autonomous vehicle where if an obstacle is detected
// at less than 30cm, it is activated. This function checks the right direction and left direction
// And if both are clear, then the Autonomous robot is free to swerve at any direction then return back on track
void AUTOV_obstacleAvoidance(void) {
	// Turning off motors
	Motors_off();
     a44:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <Motors_off>
	
	// Display warning on screen
	LCD_clear();
     a48:	0e 94 6d 06 	call	0xcda	; 0xcda <LCD_clear>
	LCD_displayString((u8*) "Obstacle is");
     a4c:	87 eb       	ldi	r24, 0xB7	; 183
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 57 06 	call	0xcae	; 0xcae <LCD_displayString>
	LCD_moveCursor(1, 0);
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 77 06 	call	0xcee	; 0xcee <LCD_moveCursor>
	LCD_displayString((u8*) "detected.");
     a60:	83 ec       	ldi	r24, 0xC3	; 195
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 57 06 	call	0xcae	; 0xcae <LCD_displayString>
     a68:	2f ef       	ldi	r18, 0xFF	; 255
     a6a:	84 e3       	ldi	r24, 0x34	; 52
     a6c:	9c e0       	ldi	r25, 0x0C	; 12
     a6e:	21 50       	subi	r18, 0x01	; 1
     a70:	80 40       	sbci	r24, 0x00	; 0
     a72:	90 40       	sbci	r25, 0x00	; 0
     a74:	e1 f7       	brne	.-8      	; 0xa6e <AUTOV_obstacleAvoidance+0x2a>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <AUTOV_obstacleAvoidance+0x34>
     a78:	00 00       	nop
	_delay_ms(250);
	LCD_clear();
     a7a:	0e 94 6d 06 	call	0xcda	; 0xcda <LCD_clear>
	LCD_displayString((u8*) "Please remove");
     a7e:	8d ec       	ldi	r24, 0xCD	; 205
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 57 06 	call	0xcae	; 0xcae <LCD_displayString>
	LCD_moveCursor(1, 0);
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 77 06 	call	0xcee	; 0xcee <LCD_moveCursor>
	LCD_displayString((u8*) "the obstacle");
     a92:	8b ed       	ldi	r24, 0xDB	; 219
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 57 06 	call	0xcae	; 0xcae <LCD_displayString>
     a9a:	2f ef       	ldi	r18, 0xFF	; 255
     a9c:	84 e3       	ldi	r24, 0x34	; 52
     a9e:	9c e0       	ldi	r25, 0x0C	; 12
     aa0:	21 50       	subi	r18, 0x01	; 1
     aa2:	80 40       	sbci	r24, 0x00	; 0
     aa4:	90 40       	sbci	r25, 0x00	; 0
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <AUTOV_obstacleAvoidance+0x5c>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <AUTOV_obstacleAvoidance+0x66>
     aaa:	00 00       	nop
	_delay_ms(250);
	
	// Sound off buzzer as an alarm sound
	AUTOV_buzzerAlarm();
     aac:	0e 94 d6 04 	call	0x9ac	; 0x9ac <AUTOV_buzzerAlarm>
	
	// center servo head 
	SERVO_centerHead();
     ab0:	0e 94 94 03 	call	0x728	; 0x728 <SERVO_centerHead>
     ab4:	08 95       	ret

00000ab6 <PRV_writeHalfPort>:
		case LCD_SHIFT_RIGHT:
		for (local_u8Loop = 0; local_u8Loop < copy_u8ShiftsAmount; local_u8Loop++)
		        LCD_sendCommand(0b00011100);
		break;
	}
}
     ab6:	cf 93       	push	r28
     ab8:	c8 2f       	mov	r28, r24
     aba:	48 2f       	mov	r20, r24
     abc:	41 70       	andi	r20, 0x01	; 1
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     ac6:	c1 fb       	bst	r28, 1
     ac8:	44 27       	eor	r20, r20
     aca:	40 f9       	bld	r20, 0
     acc:	61 e0       	ldi	r22, 0x01	; 1
     ace:	83 e0       	ldi	r24, 0x03	; 3
     ad0:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     ad4:	c2 fb       	bst	r28, 2
     ad6:	44 27       	eor	r20, r20
     ad8:	40 f9       	bld	r20, 0
     ada:	63 e0       	ldi	r22, 0x03	; 3
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     ae2:	c3 fb       	bst	r28, 3
     ae4:	44 27       	eor	r20, r20
     ae6:	40 f9       	bld	r20, 0
     ae8:	64 e0       	ldi	r22, 0x04	; 4
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <PRV_enableTriggerWrite>:
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	62 e0       	ldi	r22, 0x02	; 2
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     afe:	8f e9       	ldi	r24, 0x9F	; 159
     b00:	9f e0       	ldi	r25, 0x0F	; 15
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <PRV_enableTriggerWrite+0xe>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <PRV_enableTriggerWrite+0x14>
     b08:	00 00       	nop
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	62 e0       	ldi	r22, 0x02	; 2
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     b14:	08 95       	ret

00000b16 <GIE_enable>:
     b16:	8f b7       	in	r24, 0x3f	; 63
     b18:	80 68       	ori	r24, 0x80	; 128
     b1a:	8f bf       	out	0x3f, r24	; 63
     b1c:	08 95       	ret

00000b1e <ADC_init>:
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	21 f0       	breq	.+8      	; 0xb2a <ADC_init+0xc>
     b22:	50 f0       	brcs	.+20     	; 0xb38 <ADC_init+0x1a>
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	79 f0       	breq	.+30     	; 0xb46 <ADC_init+0x28>
     b28:	14 c0       	rjmp	.+40     	; 0xb52 <ADC_init+0x34>
     b2a:	87 b1       	in	r24, 0x07	; 7
     b2c:	8f 77       	andi	r24, 0x7F	; 127
     b2e:	87 b9       	out	0x07, r24	; 7
     b30:	87 b1       	in	r24, 0x07	; 7
     b32:	8f 7b       	andi	r24, 0xBF	; 191
     b34:	87 b9       	out	0x07, r24	; 7
     b36:	0d c0       	rjmp	.+26     	; 0xb52 <ADC_init+0x34>
     b38:	87 b1       	in	r24, 0x07	; 7
     b3a:	8f 77       	andi	r24, 0x7F	; 127
     b3c:	87 b9       	out	0x07, r24	; 7
     b3e:	87 b1       	in	r24, 0x07	; 7
     b40:	80 64       	ori	r24, 0x40	; 64
     b42:	87 b9       	out	0x07, r24	; 7
     b44:	06 c0       	rjmp	.+12     	; 0xb52 <ADC_init+0x34>
     b46:	87 b1       	in	r24, 0x07	; 7
     b48:	80 68       	ori	r24, 0x80	; 128
     b4a:	87 b9       	out	0x07, r24	; 7
     b4c:	87 b1       	in	r24, 0x07	; 7
     b4e:	80 64       	ori	r24, 0x40	; 64
     b50:	87 b9       	out	0x07, r24	; 7
     b52:	86 b1       	in	r24, 0x06	; 6
     b54:	81 60       	ori	r24, 0x01	; 1
     b56:	86 b9       	out	0x06, r24	; 6
     b58:	86 b1       	in	r24, 0x06	; 6
     b5a:	82 60       	ori	r24, 0x02	; 2
     b5c:	86 b9       	out	0x06, r24	; 6
     b5e:	86 b1       	in	r24, 0x06	; 6
     b60:	84 60       	ori	r24, 0x04	; 4
     b62:	86 b9       	out	0x06, r24	; 6
     b64:	86 b1       	in	r24, 0x06	; 6
     b66:	87 7f       	andi	r24, 0xF7	; 247
     b68:	86 b9       	out	0x06, r24	; 6
     b6a:	86 b1       	in	r24, 0x06	; 6
     b6c:	8f 7d       	andi	r24, 0xDF	; 223
     b6e:	86 b9       	out	0x06, r24	; 6
     b70:	86 b1       	in	r24, 0x06	; 6
     b72:	80 68       	ori	r24, 0x80	; 128
     b74:	86 b9       	out	0x06, r24	; 6
     b76:	08 95       	ret

00000b78 <ADC_getValue>:
     b78:	88 30       	cpi	r24, 0x08	; 8
     b7a:	70 f4       	brcc	.+28     	; 0xb98 <ADC_getValue+0x20>
     b7c:	97 b1       	in	r25, 0x07	; 7
     b7e:	90 7e       	andi	r25, 0xE0	; 224
     b80:	97 b9       	out	0x07, r25	; 7
     b82:	97 b1       	in	r25, 0x07	; 7
     b84:	89 2b       	or	r24, r25
     b86:	87 b9       	out	0x07, r24	; 7
     b88:	86 b1       	in	r24, 0x06	; 6
     b8a:	80 64       	ori	r24, 0x40	; 64
     b8c:	86 b9       	out	0x06, r24	; 6
     b8e:	36 99       	sbic	0x06, 6	; 6
     b90:	fe cf       	rjmp	.-4      	; 0xb8e <ADC_getValue+0x16>
     b92:	84 b1       	in	r24, 0x04	; 4
     b94:	95 b1       	in	r25, 0x05	; 5
     b96:	08 95       	ret
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	08 95       	ret

00000b9e <LCD_displayChar>:
     b9e:	cf 93       	push	r28
     ba0:	c8 2f       	mov	r28, r24
     ba2:	41 e0       	ldi	r20, 0x01	; 1
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     bb6:	8c 2f       	mov	r24, r28
     bb8:	82 95       	swap	r24
     bba:	8f 70       	andi	r24, 0x0F	; 15
     bbc:	0e 94 5b 05 	call	0xab6	; 0xab6 <PRV_writeHalfPort>
     bc0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <PRV_enableTriggerWrite>
     bc4:	8c 2f       	mov	r24, r28
     bc6:	0e 94 5b 05 	call	0xab6	; 0xab6 <PRV_writeHalfPort>
     bca:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <PRV_enableTriggerWrite>
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <LCD_sendCommand>:
     bd2:	cf 93       	push	r28
     bd4:	c8 2f       	mov	r28, r24
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     bea:	8c 2f       	mov	r24, r28
     bec:	82 95       	swap	r24
     bee:	8f 70       	andi	r24, 0x0F	; 15
     bf0:	0e 94 5b 05 	call	0xab6	; 0xab6 <PRV_writeHalfPort>
     bf4:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <PRV_enableTriggerWrite>
     bf8:	8c 2f       	mov	r24, r28
     bfa:	0e 94 5b 05 	call	0xab6	; 0xab6 <PRV_writeHalfPort>
     bfe:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <PRV_enableTriggerWrite>
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <LCD_init>:
     c06:	41 e0       	ldi	r20, 0x01	; 1
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     c1a:	41 e0       	ldi	r20, 0x01	; 1
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     c24:	41 e0       	ldi	r20, 0x01	; 1
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	83 e0       	ldi	r24, 0x03	; 3
     c2a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     c2e:	41 e0       	ldi	r20, 0x01	; 1
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     c38:	41 e0       	ldi	r20, 0x01	; 1
     c3a:	63 e0       	ldi	r22, 0x03	; 3
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     c42:	41 e0       	ldi	r20, 0x01	; 1
     c44:	64 e0       	ldi	r22, 0x04	; 4
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     c4c:	2f e7       	ldi	r18, 0x7F	; 127
     c4e:	85 eb       	ldi	r24, 0xB5	; 181
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	21 50       	subi	r18, 0x01	; 1
     c54:	80 40       	sbci	r24, 0x00	; 0
     c56:	90 40       	sbci	r25, 0x00	; 0
     c58:	e1 f7       	brne	.-8      	; 0xc52 <LCD_init+0x4c>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <LCD_init+0x56>
     c5c:	00 00       	nop
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	0e 94 5b 05 	call	0xab6	; 0xab6 <PRV_writeHalfPort>
     c78:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <PRV_enableTriggerWrite>
     c7c:	88 e2       	ldi	r24, 0x28	; 40
     c7e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_sendCommand>
     c82:	20 ef       	ldi	r18, 0xF0	; 240
     c84:	2a 95       	dec	r18
     c86:	f1 f7       	brne	.-4      	; 0xc84 <LCD_init+0x7e>
     c88:	8f e0       	ldi	r24, 0x0F	; 15
     c8a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_sendCommand>
     c8e:	80 ef       	ldi	r24, 0xF0	; 240
     c90:	8a 95       	dec	r24
     c92:	f1 f7       	brne	.-4      	; 0xc90 <LCD_init+0x8a>
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_sendCommand>
     c9a:	8f e3       	ldi	r24, 0x3F	; 63
     c9c:	9f e1       	ldi	r25, 0x1F	; 31
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <LCD_init+0x98>
     ca2:	00 c0       	rjmp	.+0      	; 0xca4 <LCD_init+0x9e>
     ca4:	00 00       	nop
     ca6:	86 e0       	ldi	r24, 0x06	; 6
     ca8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_sendCommand>
     cac:	08 95       	ret

00000cae <LCD_displayString>:
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	29 f4       	brne	.+10     	; 0xcc2 <LCD_displayString+0x14>
     cb8:	0c c0       	rjmp	.+24     	; 0xcd2 <LCD_displayString+0x24>
     cba:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_displayChar>
     cbe:	cf 5f       	subi	r28, 0xFF	; 255
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <LCD_displayString+0x18>
     cc2:	8c 01       	movw	r16, r24
     cc4:	c0 e0       	ldi	r28, 0x00	; 0
     cc6:	f8 01       	movw	r30, r16
     cc8:	ec 0f       	add	r30, r28
     cca:	f1 1d       	adc	r31, r1
     ccc:	80 81       	ld	r24, Z
     cce:	81 11       	cpse	r24, r1
     cd0:	f4 cf       	rjmp	.-24     	; 0xcba <LCD_displayString+0xc>
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	08 95       	ret

00000cda <LCD_clear>:
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_sendCommand>
     ce0:	8f e3       	ldi	r24, 0x3F	; 63
     ce2:	9f e1       	ldi	r25, 0x1F	; 31
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	f1 f7       	brne	.-4      	; 0xce4 <LCD_clear+0xa>
     ce8:	00 c0       	rjmp	.+0      	; 0xcea <LCD_clear+0x10>
     cea:	00 00       	nop
     cec:	08 95       	ret

00000cee <LCD_moveCursor>:

void LCD_moveCursor(u8 copy_u8Row, u8 copy_u8Column) {
	u8 address;

	// Calculate the address based on the row and column
	switch (copy_u8Row) {
     cee:	88 23       	and	r24, r24
     cf0:	19 f0       	breq	.+6      	; 0xcf8 <LCD_moveCursor+0xa>
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	29 f4       	brne	.+10     	; 0xd00 <LCD_moveCursor+0x12>
		case 0:
		address = 0x00 + copy_u8Column;
		break;
		case 1:
		address = 0x40 + copy_u8Column;
     cf6:	60 5c       	subi	r22, 0xC0	; 192
		// Handle invalid row input if necessary
		return;
	}

	// Send the command to set the DDRAM address
	LCD_sendCommand(0x80 | address);
     cf8:	86 2f       	mov	r24, r22
     cfa:	80 68       	ori	r24, 0x80	; 128
     cfc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_sendCommand>
     d00:	08 95       	ret

00000d02 <LCD_createAndDisplayChar>:
}

void LCD_createAndDisplayChar(u8 copy_u8CgramLocation, u8* copy_u8CustomChar, u8 copy_u8Row, u8 copy_u8Col) {
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	8b 01       	movw	r16, r22
     d10:	e4 2e       	mov	r14, r20
     d12:	d2 2f       	mov	r29, r18
	    // Location should be within the range of 0-7 for CGRAM
	    copy_u8CgramLocation &= 0x07;
     d14:	87 70       	andi	r24, 0x07	; 7
     d16:	f8 2e       	mov	r15, r24
	    
	    // Set CGRAM address
	    LCD_sendCommand(0x40 | (copy_u8CgramLocation << 3));
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	80 64       	ori	r24, 0x40	; 64
     d28:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_sendCommand>
	    
	    // Write the custom character data to CGRAM
	    for (u8 i = 0; i < 8; i++) {
     d2c:	c0 e0       	ldi	r28, 0x00	; 0
     d2e:	07 c0       	rjmp	.+14     	; 0xd3e <LCD_createAndDisplayChar+0x3c>
		    LCD_displayChar(copy_u8CustomChar[i]);
     d30:	f8 01       	movw	r30, r16
     d32:	ec 0f       	add	r30, r28
     d34:	f1 1d       	adc	r31, r1
     d36:	80 81       	ld	r24, Z
     d38:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_displayChar>
	    
	    // Set CGRAM address
	    LCD_sendCommand(0x40 | (copy_u8CgramLocation << 3));
	    
	    // Write the custom character data to CGRAM
	    for (u8 i = 0; i < 8; i++) {
     d3c:	cf 5f       	subi	r28, 0xFF	; 255
     d3e:	c8 30       	cpi	r28, 0x08	; 8
     d40:	b8 f3       	brcs	.-18     	; 0xd30 <LCD_createAndDisplayChar+0x2e>
		    LCD_displayChar(copy_u8CustomChar[i]);
	    }

	    // Set DDRAM address (to position the cursor)
	    u8 address;
	    switch(copy_u8Row) {
     d42:	ee 20       	and	r14, r14
     d44:	21 f0       	breq	.+8      	; 0xd4e <LCD_createAndDisplayChar+0x4c>
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	e8 16       	cp	r14, r24
     d4a:	21 f0       	breq	.+8      	; 0xd54 <LCD_createAndDisplayChar+0x52>
     d4c:	06 c0       	rjmp	.+12     	; 0xd5a <LCD_createAndDisplayChar+0x58>
		    case 0:
		    address = 0x80 + copy_u8Col;
     d4e:	80 e8       	ldi	r24, 0x80	; 128
     d50:	8d 0f       	add	r24, r29
		    break;
     d52:	05 c0       	rjmp	.+10     	; 0xd5e <LCD_createAndDisplayChar+0x5c>
		    case 1:
		    address = 0xC0 + copy_u8Col;
     d54:	80 ec       	ldi	r24, 0xC0	; 192
     d56:	8d 0f       	add	r24, r29
		    break;
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <LCD_createAndDisplayChar+0x5c>
		    default:
		    address = 0x80 + copy_u8Col; // Default to first row if row is invalid
     d5a:	80 e8       	ldi	r24, 0x80	; 128
     d5c:	8d 0f       	add	r24, r29
		    break;
	    }
	    LCD_sendCommand(address);
     d5e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_sendCommand>

	    // Display the custom character from CGRAM
	    LCD_displayChar(copy_u8CgramLocation);
     d62:	8f 2d       	mov	r24, r15
     d64:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_displayChar>
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	08 95       	ret

00000d76 <HCSR04_init>:
#include "HCSR04_CONFIG.h"
#include "../../../HAL/LCD_DRIVER/LCD_DRIVER/LCD_PROGRAM.h"

void HCSR04_init(void) {
    // Set Trig pin as output
    DIO_setPinDirection(HCSR04_TRIG_PORT, HCSR04_TRIG_PIN, DIO_PIN_OUTPUT);
     d76:	41 e0       	ldi	r20, 0x01	; 1
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
    // Set Echo pin as input
    DIO_setPinDirection(HCSR04_ECHO_PORT, HCSR04_ECHO_PIN, DIO_PIN_INPUT);
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     d8a:	08 95       	ret

00000d8c <HCSR04_trigger>:
}

void HCSR04_trigger(void) {
    DIO_setPinVal(HCSR04_TRIG_PORT, HCSR04_TRIG_PIN, DIO_PIN_OUTPUT_LOW); // Ensure Trig is low
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d96:	8a e0       	ldi	r24, 0x0A	; 10
     d98:	8a 95       	dec	r24
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <HCSR04_trigger+0xc>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <HCSR04_trigger+0x12>
    _delay_us(2);                                    // Wait for 2 microseconds
    DIO_setPinVal(HCSR04_TRIG_PORT, HCSR04_TRIG_PIN, DIO_PIN_OUTPUT_HIGH); // Set Trig high
     d9e:	41 e0       	ldi	r20, 0x01	; 1
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     da8:	85 e3       	ldi	r24, 0x35	; 53
     daa:	8a 95       	dec	r24
     dac:	f1 f7       	brne	.-4      	; 0xdaa <HCSR04_trigger+0x1e>
     dae:	00 00       	nop
    _delay_us(10);                                   // Wait for 10 microseconds
    DIO_setPinVal(HCSR04_TRIG_PORT, HCSR04_TRIG_PIN, DIO_PIN_OUTPUT_LOW);  // Set Trig low
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     dba:	08 95       	ret

00000dbc <HCSR04_getDistance>:
}

void HCSR04_getDistance(f32 *copy_f32Distance) {
     dbc:	cf 92       	push	r12
     dbe:	df 92       	push	r13
     dc0:	ef 92       	push	r14
     dc2:	ff 92       	push	r15
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	ec 01       	movw	r28, r24
	u32 pulseWidth = 0;
	u32 timeout = 0;

	// Trigger the sensor
	HCSR04_trigger();
     dca:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HCSR04_trigger>
    DIO_setPinVal(HCSR04_TRIG_PORT, HCSR04_TRIG_PIN, DIO_PIN_OUTPUT_LOW);  // Set Trig low
}

void HCSR04_getDistance(f32 *copy_f32Distance) {
	u32 pulseWidth = 0;
	u32 timeout = 0;
     dce:	c1 2c       	mov	r12, r1
     dd0:	d1 2c       	mov	r13, r1
     dd2:	76 01       	movw	r14, r12

	// Trigger the sensor
	HCSR04_trigger();

	// Wait for Echo to go high
	while (DIO_readPinVal(HCSR04_ECHO_PORT, HCSR04_ECHO_PIN) == 0) {
     dd4:	15 c0       	rjmp	.+42     	; 0xe00 <HCSR04_getDistance+0x44>
		timeout++;
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	c8 1a       	sub	r12, r24
     dda:	d8 0a       	sbc	r13, r24
     ddc:	e8 0a       	sbc	r14, r24
     dde:	f8 0a       	sbc	r15, r24
		if (timeout > 30000) {
     de0:	81 e3       	ldi	r24, 0x31	; 49
     de2:	c8 16       	cp	r12, r24
     de4:	85 e7       	ldi	r24, 0x75	; 117
     de6:	d8 06       	cpc	r13, r24
     de8:	e1 04       	cpc	r14, r1
     dea:	f1 04       	cpc	r15, r1
     dec:	48 f0       	brcs	.+18     	; 0xe00 <HCSR04_getDistance+0x44>
			*copy_f32Distance = -1.0; // Return -1 if no echo within timeout
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	a0 e8       	ldi	r26, 0x80	; 128
     df4:	bf eb       	ldi	r27, 0xBF	; 191
     df6:	88 83       	st	Y, r24
     df8:	99 83       	std	Y+1, r25	; 0x01
     dfa:	aa 83       	std	Y+2, r26	; 0x02
     dfc:	bb 83       	std	Y+3, r27	; 0x03
			return;
     dfe:	2d c0       	rjmp	.+90     	; 0xe5a <HCSR04_getDistance+0x9e>

	// Trigger the sensor
	HCSR04_trigger();

	// Wait for Echo to go high
	while (DIO_readPinVal(HCSR04_ECHO_PORT, HCSR04_ECHO_PIN) == 0) {
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_readPinVal>
     e08:	88 23       	and	r24, r24
     e0a:	29 f3       	breq	.-54     	; 0xdd6 <HCSR04_getDistance+0x1a>
     e0c:	c1 2c       	mov	r12, r1
     e0e:	d1 2c       	mov	r13, r1
     e10:	76 01       	movw	r14, r12
     e12:	09 c0       	rjmp	.+18     	; 0xe26 <HCSR04_getDistance+0x6a>
	}

	// Measure the pulse width
	pulseWidth = 0;
	while (DIO_readPinVal(HCSR04_ECHO_PORT, HCSR04_ECHO_PIN) != 0) {
		pulseWidth++;
     e14:	8f ef       	ldi	r24, 0xFF	; 255
     e16:	c8 1a       	sub	r12, r24
     e18:	d8 0a       	sbc	r13, r24
     e1a:	e8 0a       	sbc	r14, r24
     e1c:	f8 0a       	sbc	r15, r24
     e1e:	85 e0       	ldi	r24, 0x05	; 5
     e20:	8a 95       	dec	r24
     e22:	f1 f7       	brne	.-4      	; 0xe20 <HCSR04_getDistance+0x64>
     e24:	00 00       	nop
		}
	}

	// Measure the pulse width
	pulseWidth = 0;
	while (DIO_readPinVal(HCSR04_ECHO_PORT, HCSR04_ECHO_PIN) != 0) {
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_readPinVal>
     e2e:	81 11       	cpse	r24, r1
     e30:	f1 cf       	rjmp	.-30     	; 0xe14 <HCSR04_getDistance+0x58>
		pulseWidth++;
		_delay_us(1); // Increment pulse width in microseconds
	}

	// Calculate distance in cm
	*copy_f32Distance = (pulseWidth * 0.0343) / 2;
     e32:	c7 01       	movw	r24, r14
     e34:	b6 01       	movw	r22, r12
     e36:	0e 94 13 09 	call	0x1226	; 0x1226 <__floatunsisf>
     e3a:	28 e2       	ldi	r18, 0x28	; 40
     e3c:	3e e7       	ldi	r19, 0x7E	; 126
     e3e:	4c e0       	ldi	r20, 0x0C	; 12
     e40:	5d e3       	ldi	r21, 0x3D	; 61
     e42:	0e 94 ca 09 	call	0x1394	; 0x1394 <__mulsf3>
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	5f e3       	ldi	r21, 0x3F	; 63
     e4e:	0e 94 ca 09 	call	0x1394	; 0x1394 <__mulsf3>
     e52:	68 83       	st	Y, r22
     e54:	79 83       	std	Y+1, r23	; 0x01
     e56:	8a 83       	std	Y+2, r24	; 0x02
     e58:	9b 83       	std	Y+3, r25	; 0x03
}
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	df 90       	pop	r13
     e64:	cf 90       	pop	r12
     e66:	08 95       	ret

00000e68 <HCSR04_getAverageDistance>:


void HCSR04_getAverageDistance(u8 copy_u8Samples, f32 *copy_f32Distance) {
     e68:	4f 92       	push	r4
     e6a:	5f 92       	push	r5
     e6c:	6f 92       	push	r6
     e6e:	7f 92       	push	r7
     e70:	af 92       	push	r10
     e72:	bf 92       	push	r11
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	00 d0       	rcall	.+0      	; 0xe86 <HCSR04_getAverageDistance+0x1e>
     e86:	00 d0       	rcall	.+0      	; 0xe88 <HCSR04_getAverageDistance+0x20>
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	08 2f       	mov	r16, r24
     e8e:	5b 01       	movw	r10, r22
    u32 sum = 0;
    for (u8 i = 0; i < copy_u8Samples; i++) {
     e90:	10 e0       	ldi	r17, 0x00	; 0
	*copy_f32Distance = (pulseWidth * 0.0343) / 2;
}


void HCSR04_getAverageDistance(u8 copy_u8Samples, f32 *copy_f32Distance) {
    u32 sum = 0;
     e92:	41 2c       	mov	r4, r1
     e94:	51 2c       	mov	r5, r1
     e96:	32 01       	movw	r6, r4
    for (u8 i = 0; i < copy_u8Samples; i++) {
     e98:	29 c0       	rjmp	.+82     	; 0xeec <HCSR04_getAverageDistance+0x84>
        f32 distance;
        HCSR04_getDistance(&distance);
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	0e 94 de 06 	call	0xdbc	; 0xdbc <HCSR04_getDistance>
        if (distance >= 0) {
     ea2:	c9 80       	ldd	r12, Y+1	; 0x01
     ea4:	da 80       	ldd	r13, Y+2	; 0x02
     ea6:	eb 80       	ldd	r14, Y+3	; 0x03
     ea8:	fc 80       	ldd	r15, Y+4	; 0x04
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	a9 01       	movw	r20, r18
     eb0:	c7 01       	movw	r24, r14
     eb2:	b6 01       	movw	r22, r12
     eb4:	0e 94 c5 09 	call	0x138a	; 0x138a <__gesf2>
     eb8:	88 23       	and	r24, r24
     eba:	6c f0       	brlt	.+26     	; 0xed6 <HCSR04_getAverageDistance+0x6e>
            sum += distance;
     ebc:	c3 01       	movw	r24, r6
     ebe:	b2 01       	movw	r22, r4
     ec0:	0e 94 13 09 	call	0x1226	; 0x1226 <__floatunsisf>
     ec4:	a7 01       	movw	r20, r14
     ec6:	96 01       	movw	r18, r12
     ec8:	0e 94 06 08 	call	0x100c	; 0x100c <__addsf3>
     ecc:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fixunssfsi>
     ed0:	2b 01       	movw	r4, r22
     ed2:	3c 01       	movw	r6, r24
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <HCSR04_getAverageDistance+0x70>
        } else {
            i--; // Ignore invalid readings
     ed6:	11 50       	subi	r17, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ed8:	2f ef       	ldi	r18, 0xFF	; 255
     eda:	8d ee       	ldi	r24, 0xED	; 237
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	21 50       	subi	r18, 0x01	; 1
     ee0:	80 40       	sbci	r24, 0x00	; 0
     ee2:	90 40       	sbci	r25, 0x00	; 0
     ee4:	e1 f7       	brne	.-8      	; 0xede <HCSR04_getAverageDistance+0x76>
     ee6:	00 c0       	rjmp	.+0      	; 0xee8 <HCSR04_getAverageDistance+0x80>
     ee8:	00 00       	nop
}


void HCSR04_getAverageDistance(u8 copy_u8Samples, f32 *copy_f32Distance) {
    u32 sum = 0;
    for (u8 i = 0; i < copy_u8Samples; i++) {
     eea:	1f 5f       	subi	r17, 0xFF	; 255
     eec:	10 17       	cp	r17, r16
     eee:	a8 f2       	brcs	.-86     	; 0xe9a <HCSR04_getAverageDistance+0x32>
        } else {
            i--; // Ignore invalid readings
        }
        _delay_ms(60); // Delay between samples
    }
    *copy_f32Distance = (f32)sum / copy_u8Samples;
     ef0:	c3 01       	movw	r24, r6
     ef2:	b2 01       	movw	r22, r4
     ef4:	0e 94 13 09 	call	0x1226	; 0x1226 <__floatunsisf>
     ef8:	6b 01       	movw	r12, r22
     efa:	7c 01       	movw	r14, r24
     efc:	60 2f       	mov	r22, r16
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     f08:	9b 01       	movw	r18, r22
     f0a:	ac 01       	movw	r20, r24
     f0c:	c7 01       	movw	r24, r14
     f0e:	b6 01       	movw	r22, r12
     f10:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__divsf3>
     f14:	f5 01       	movw	r30, r10
     f16:	60 83       	st	Z, r22
     f18:	71 83       	std	Z+1, r23	; 0x01
     f1a:	82 83       	std	Z+2, r24	; 0x02
     f1c:	93 83       	std	Z+3, r25	; 0x03
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	bf 90       	pop	r11
     f38:	af 90       	pop	r10
     f3a:	7f 90       	pop	r7
     f3c:	6f 90       	pop	r6
     f3e:	5f 90       	pop	r5
     f40:	4f 90       	pop	r4
     f42:	08 95       	ret

00000f44 <SG90_init>:
#include "SERVO_INT.h"

// Function to initialize the servo motor and it's PIN (PD5 Timer 1)
void SG90_init(void) {
	// Set PD5/OC1A as output pin
	DIO_setPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
     f44:	41 e0       	ldi	r20, 0x01	; 1
     f46:	65 e0       	ldi	r22, 0x05	; 5
     f48:	83 e0       	ldi	r24, 0x03	; 3
     f4a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>

	// Set Fast PWM mode with ICR1 as top
	TCCR1A_REG |= (1 << WGM11);
     f4e:	8f b5       	in	r24, 0x2f	; 47
     f50:	82 60       	ori	r24, 0x02	; 2
     f52:	8f bd       	out	0x2f, r24	; 47
	TCCR1B_REG |= (1 << WGM12) | (1 << WGM13);
     f54:	8e b5       	in	r24, 0x2e	; 46
     f56:	88 61       	ori	r24, 0x18	; 24
     f58:	8e bd       	out	0x2e, r24	; 46

	// Set non-inverting mode
	TCCR1A_REG |= (1 << COM1A1);
     f5a:	8f b5       	in	r24, 0x2f	; 47
     f5c:	80 68       	ori	r24, 0x80	; 128
     f5e:	8f bd       	out	0x2f, r24	; 47
	TCCR1A_REG &= ~(1 << COM1A0);
     f60:	8f b5       	in	r24, 0x2f	; 47
     f62:	8f 7b       	andi	r24, 0xBF	; 191
     f64:	8f bd       	out	0x2f, r24	; 47

	// Set Prescaler to 8
	TCCR1B_REG |= (1 << CS11);
     f66:	8e b5       	in	r24, 0x2e	; 46
     f68:	82 60       	ori	r24, 0x02	; 2
     f6a:	8e bd       	out	0x2e, r24	; 46
	TCCR1B_REG &= ~(1 << CS10);
     f6c:	8e b5       	in	r24, 0x2e	; 46
     f6e:	8e 7f       	andi	r24, 0xFE	; 254
     f70:	8e bd       	out	0x2e, r24	; 46
	TCCR1B_REG &= ~(1 << CS12);
     f72:	8e b5       	in	r24, 0x2e	; 46
     f74:	8b 7f       	andi	r24, 0xFB	; 251
     f76:	8e bd       	out	0x2e, r24	; 46

	// Set ICR1 for 20ms period (50 Hz)
	ICR1_u16_REG = 39999;  // ICR1 = (F_CPU / (N * f_PWM)) - 1 = (16000000 / (8 * 50)) - 1 = 39999
     f78:	8f e3       	ldi	r24, 0x3F	; 63
     f7a:	9c e9       	ldi	r25, 0x9C	; 156
     f7c:	97 bd       	out	0x27, r25	; 39
     f7e:	86 bd       	out	0x26, r24	; 38
     f80:	08 95       	ret

00000f82 <SG90_move>:
}

// Function to move the servo motor to a specific angle
void SG90_move(u8 copy_u8Angle) {
	// Ensure the angle is within the range of 0 to 180 degrees
	if (copy_u8Angle > 180) {
     f82:	85 3b       	cpi	r24, 0xB5	; 181
     f84:	08 f0       	brcs	.+2      	; 0xf88 <SG90_move+0x6>
		copy_u8Angle = 180;
     f86:	84 eb       	ldi	r24, 0xB4	; 180
	}

	// Map the angle to the corresponding pulse width
	// Pulse width range: 1ms (1000us) to 2ms (2000us)
	f32 local_f32PulseWidth = ((copy_u8Angle * 11.1) + 1000);
     f88:	68 2f       	mov	r22, r24
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     f94:	2a e9       	ldi	r18, 0x9A	; 154
     f96:	39 e9       	ldi	r19, 0x99	; 153
     f98:	41 e3       	ldi	r20, 0x31	; 49
     f9a:	51 e4       	ldi	r21, 0x41	; 65
     f9c:	0e 94 ca 09 	call	0x1394	; 0x1394 <__mulsf3>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	4a e7       	ldi	r20, 0x7A	; 122
     fa6:	54 e4       	ldi	r21, 0x44	; 68
     fa8:	0e 94 06 08 	call	0x100c	; 0x100c <__addsf3>

	// Set OCR1A for the desired pulse width
	OCR1A_u16_REG = START_PULSE + local_f32PulseWidth;
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	4a e7       	ldi	r20, 0x7A	; 122
     fb2:	54 e4       	ldi	r21, 0x44	; 68
     fb4:	0e 94 06 08 	call	0x100c	; 0x100c <__addsf3>
     fb8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fixunssfsi>
     fbc:	7b bd       	out	0x2b, r23	; 43
     fbe:	6a bd       	out	0x2a, r22	; 42
     fc0:	08 95       	ret

00000fc2 <main>:
#include "../../../HAL/HC-SR04 sensor/HC-SR04 sensor/HCSR04_INT.h"
#include "../../../HAL/HC-SR04 sensor/HC-SR04 sensor/HCSR04_PROG.C"
#include "../../../HAL/SG-90 Servo motor/SG-90 Servo motor/SERVO_INT.h"
#include "../../../HAL/SG-90 Servo motor/SG-90 Servo motor/SERVO_PROG.C"

int main(void) {
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <main+0x6>
     fc8:	00 d0       	rcall	.+0      	; 0xfca <main+0x8>
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
    // Calling startup function to initialize program
	AUTOV_init();
     fce:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <AUTOV_init>
	
	// Ultrasonic distance variable
	f32 local_f32DistMeasured = 0.0;
     fd2:	19 82       	std	Y+1, r1	; 0x01
     fd4:	1a 82       	std	Y+2, r1	; 0x02
     fd6:	1b 82       	std	Y+3, r1	; 0x03
     fd8:	1c 82       	std	Y+4, r1	; 0x04
	
    while (1) {
		// Checking Ultrasonic sensor reading
		HCSR04_getAverageDistance(HCSR04_SAMPLES, &local_f32DistMeasured);
     fda:	be 01       	movw	r22, r28
     fdc:	6f 5f       	subi	r22, 0xFF	; 255
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	83 e0       	ldi	r24, 0x03	; 3
     fe2:	0e 94 34 07 	call	0xe68	; 0xe68 <HCSR04_getAverageDistance>
		LCD_displayString((u8*) "Distance: ");
		LCD_moveCursor(1, 0);
		LCD_displayNumber(local_f32DistMeasured, 2);
		_delay_ms(400);*/
		
		if (local_f32DistMeasured > HCSR04_MIN_DISTANCE) {
     fe6:	69 81       	ldd	r22, Y+1	; 0x01
     fe8:	7a 81       	ldd	r23, Y+2	; 0x02
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 ef       	ldi	r20, 0xF0	; 240
     ff4:	51 e4       	ldi	r21, 0x41	; 65
     ff6:	0e 94 c5 09 	call	0x138a	; 0x138a <__gesf2>
     ffa:	18 16       	cp	r1, r24
     ffc:	1c f4       	brge	.+6      	; 0x1004 <main+0x42>
			// Main program
			AUTOV_lineFollowing();
     ffe:	0e 94 01 04 	call	0x802	; 0x802 <AUTOV_lineFollowing>
    1002:	eb cf       	rjmp	.-42     	; 0xfda <main+0x18>
		}
		else {
			// Calling the function responsible for going into obstacle avoidance mode
			AUTOV_obstacleAvoidance();
    1004:	0e 94 22 05 	call	0xa44	; 0xa44 <AUTOV_obstacleAvoidance>
    1008:	e8 cf       	rjmp	.-48     	; 0xfda <main+0x18>

0000100a <__subsf3>:
    100a:	50 58       	subi	r21, 0x80	; 128

0000100c <__addsf3>:
    100c:	bb 27       	eor	r27, r27
    100e:	aa 27       	eor	r26, r26
    1010:	0e 94 1d 08 	call	0x103a	; 0x103a <__addsf3x>
    1014:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_round>
    1018:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__fp_pscA>
    101c:	38 f0       	brcs	.+14     	; 0x102c <__addsf3+0x20>
    101e:	0e 94 84 09 	call	0x1308	; 0x1308 <__fp_pscB>
    1022:	20 f0       	brcs	.+8      	; 0x102c <__addsf3+0x20>
    1024:	39 f4       	brne	.+14     	; 0x1034 <__addsf3+0x28>
    1026:	9f 3f       	cpi	r25, 0xFF	; 255
    1028:	19 f4       	brne	.+6      	; 0x1030 <__addsf3+0x24>
    102a:	26 f4       	brtc	.+8      	; 0x1034 <__addsf3+0x28>
    102c:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__fp_nan>
    1030:	0e f4       	brtc	.+2      	; 0x1034 <__addsf3+0x28>
    1032:	e0 95       	com	r30
    1034:	e7 fb       	bst	r30, 7
    1036:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__fp_inf>

0000103a <__addsf3x>:
    103a:	e9 2f       	mov	r30, r25
    103c:	0e 94 9c 09 	call	0x1338	; 0x1338 <__fp_split3>
    1040:	58 f3       	brcs	.-42     	; 0x1018 <__addsf3+0xc>
    1042:	ba 17       	cp	r27, r26
    1044:	62 07       	cpc	r22, r18
    1046:	73 07       	cpc	r23, r19
    1048:	84 07       	cpc	r24, r20
    104a:	95 07       	cpc	r25, r21
    104c:	20 f0       	brcs	.+8      	; 0x1056 <__addsf3x+0x1c>
    104e:	79 f4       	brne	.+30     	; 0x106e <__addsf3x+0x34>
    1050:	a6 f5       	brtc	.+104    	; 0x10ba <__addsf3x+0x80>
    1052:	0c 94 be 09 	jmp	0x137c	; 0x137c <__fp_zero>
    1056:	0e f4       	brtc	.+2      	; 0x105a <__addsf3x+0x20>
    1058:	e0 95       	com	r30
    105a:	0b 2e       	mov	r0, r27
    105c:	ba 2f       	mov	r27, r26
    105e:	a0 2d       	mov	r26, r0
    1060:	0b 01       	movw	r0, r22
    1062:	b9 01       	movw	r22, r18
    1064:	90 01       	movw	r18, r0
    1066:	0c 01       	movw	r0, r24
    1068:	ca 01       	movw	r24, r20
    106a:	a0 01       	movw	r20, r0
    106c:	11 24       	eor	r1, r1
    106e:	ff 27       	eor	r31, r31
    1070:	59 1b       	sub	r21, r25
    1072:	99 f0       	breq	.+38     	; 0x109a <__addsf3x+0x60>
    1074:	59 3f       	cpi	r21, 0xF9	; 249
    1076:	50 f4       	brcc	.+20     	; 0x108c <__addsf3x+0x52>
    1078:	50 3e       	cpi	r21, 0xE0	; 224
    107a:	68 f1       	brcs	.+90     	; 0x10d6 <__addsf3x+0x9c>
    107c:	1a 16       	cp	r1, r26
    107e:	f0 40       	sbci	r31, 0x00	; 0
    1080:	a2 2f       	mov	r26, r18
    1082:	23 2f       	mov	r18, r19
    1084:	34 2f       	mov	r19, r20
    1086:	44 27       	eor	r20, r20
    1088:	58 5f       	subi	r21, 0xF8	; 248
    108a:	f3 cf       	rjmp	.-26     	; 0x1072 <__addsf3x+0x38>
    108c:	46 95       	lsr	r20
    108e:	37 95       	ror	r19
    1090:	27 95       	ror	r18
    1092:	a7 95       	ror	r26
    1094:	f0 40       	sbci	r31, 0x00	; 0
    1096:	53 95       	inc	r21
    1098:	c9 f7       	brne	.-14     	; 0x108c <__addsf3x+0x52>
    109a:	7e f4       	brtc	.+30     	; 0x10ba <__addsf3x+0x80>
    109c:	1f 16       	cp	r1, r31
    109e:	ba 0b       	sbc	r27, r26
    10a0:	62 0b       	sbc	r22, r18
    10a2:	73 0b       	sbc	r23, r19
    10a4:	84 0b       	sbc	r24, r20
    10a6:	ba f0       	brmi	.+46     	; 0x10d6 <__addsf3x+0x9c>
    10a8:	91 50       	subi	r25, 0x01	; 1
    10aa:	a1 f0       	breq	.+40     	; 0x10d4 <__addsf3x+0x9a>
    10ac:	ff 0f       	add	r31, r31
    10ae:	bb 1f       	adc	r27, r27
    10b0:	66 1f       	adc	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	c2 f7       	brpl	.-16     	; 0x10a8 <__addsf3x+0x6e>
    10b8:	0e c0       	rjmp	.+28     	; 0x10d6 <__addsf3x+0x9c>
    10ba:	ba 0f       	add	r27, r26
    10bc:	62 1f       	adc	r22, r18
    10be:	73 1f       	adc	r23, r19
    10c0:	84 1f       	adc	r24, r20
    10c2:	48 f4       	brcc	.+18     	; 0x10d6 <__addsf3x+0x9c>
    10c4:	87 95       	ror	r24
    10c6:	77 95       	ror	r23
    10c8:	67 95       	ror	r22
    10ca:	b7 95       	ror	r27
    10cc:	f7 95       	ror	r31
    10ce:	9e 3f       	cpi	r25, 0xFE	; 254
    10d0:	08 f0       	brcs	.+2      	; 0x10d4 <__addsf3x+0x9a>
    10d2:	b0 cf       	rjmp	.-160    	; 0x1034 <__addsf3+0x28>
    10d4:	93 95       	inc	r25
    10d6:	88 0f       	add	r24, r24
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <__addsf3x+0xa2>
    10da:	99 27       	eor	r25, r25
    10dc:	ee 0f       	add	r30, r30
    10de:	97 95       	ror	r25
    10e0:	87 95       	ror	r24
    10e2:	08 95       	ret

000010e4 <__divsf3>:
    10e4:	0e 94 86 08 	call	0x110c	; 0x110c <__divsf3x>
    10e8:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_round>
    10ec:	0e 94 84 09 	call	0x1308	; 0x1308 <__fp_pscB>
    10f0:	58 f0       	brcs	.+22     	; 0x1108 <__divsf3+0x24>
    10f2:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__fp_pscA>
    10f6:	40 f0       	brcs	.+16     	; 0x1108 <__divsf3+0x24>
    10f8:	29 f4       	brne	.+10     	; 0x1104 <__divsf3+0x20>
    10fa:	5f 3f       	cpi	r21, 0xFF	; 255
    10fc:	29 f0       	breq	.+10     	; 0x1108 <__divsf3+0x24>
    10fe:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__fp_inf>
    1102:	51 11       	cpse	r21, r1
    1104:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__fp_szero>
    1108:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__fp_nan>

0000110c <__divsf3x>:
    110c:	0e 94 9c 09 	call	0x1338	; 0x1338 <__fp_split3>
    1110:	68 f3       	brcs	.-38     	; 0x10ec <__divsf3+0x8>

00001112 <__divsf3_pse>:
    1112:	99 23       	and	r25, r25
    1114:	b1 f3       	breq	.-20     	; 0x1102 <__divsf3+0x1e>
    1116:	55 23       	and	r21, r21
    1118:	91 f3       	breq	.-28     	; 0x10fe <__divsf3+0x1a>
    111a:	95 1b       	sub	r25, r21
    111c:	55 0b       	sbc	r21, r21
    111e:	bb 27       	eor	r27, r27
    1120:	aa 27       	eor	r26, r26
    1122:	62 17       	cp	r22, r18
    1124:	73 07       	cpc	r23, r19
    1126:	84 07       	cpc	r24, r20
    1128:	38 f0       	brcs	.+14     	; 0x1138 <__divsf3_pse+0x26>
    112a:	9f 5f       	subi	r25, 0xFF	; 255
    112c:	5f 4f       	sbci	r21, 0xFF	; 255
    112e:	22 0f       	add	r18, r18
    1130:	33 1f       	adc	r19, r19
    1132:	44 1f       	adc	r20, r20
    1134:	aa 1f       	adc	r26, r26
    1136:	a9 f3       	breq	.-22     	; 0x1122 <__divsf3_pse+0x10>
    1138:	35 d0       	rcall	.+106    	; 0x11a4 <__divsf3_pse+0x92>
    113a:	0e 2e       	mov	r0, r30
    113c:	3a f0       	brmi	.+14     	; 0x114c <__divsf3_pse+0x3a>
    113e:	e0 e8       	ldi	r30, 0x80	; 128
    1140:	32 d0       	rcall	.+100    	; 0x11a6 <__divsf3_pse+0x94>
    1142:	91 50       	subi	r25, 0x01	; 1
    1144:	50 40       	sbci	r21, 0x00	; 0
    1146:	e6 95       	lsr	r30
    1148:	00 1c       	adc	r0, r0
    114a:	ca f7       	brpl	.-14     	; 0x113e <__divsf3_pse+0x2c>
    114c:	2b d0       	rcall	.+86     	; 0x11a4 <__divsf3_pse+0x92>
    114e:	fe 2f       	mov	r31, r30
    1150:	29 d0       	rcall	.+82     	; 0x11a4 <__divsf3_pse+0x92>
    1152:	66 0f       	add	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	88 1f       	adc	r24, r24
    1158:	bb 1f       	adc	r27, r27
    115a:	26 17       	cp	r18, r22
    115c:	37 07       	cpc	r19, r23
    115e:	48 07       	cpc	r20, r24
    1160:	ab 07       	cpc	r26, r27
    1162:	b0 e8       	ldi	r27, 0x80	; 128
    1164:	09 f0       	breq	.+2      	; 0x1168 <__divsf3_pse+0x56>
    1166:	bb 0b       	sbc	r27, r27
    1168:	80 2d       	mov	r24, r0
    116a:	bf 01       	movw	r22, r30
    116c:	ff 27       	eor	r31, r31
    116e:	93 58       	subi	r25, 0x83	; 131
    1170:	5f 4f       	sbci	r21, 0xFF	; 255
    1172:	3a f0       	brmi	.+14     	; 0x1182 <__divsf3_pse+0x70>
    1174:	9e 3f       	cpi	r25, 0xFE	; 254
    1176:	51 05       	cpc	r21, r1
    1178:	78 f0       	brcs	.+30     	; 0x1198 <__divsf3_pse+0x86>
    117a:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__fp_inf>
    117e:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__fp_szero>
    1182:	5f 3f       	cpi	r21, 0xFF	; 255
    1184:	e4 f3       	brlt	.-8      	; 0x117e <__divsf3_pse+0x6c>
    1186:	98 3e       	cpi	r25, 0xE8	; 232
    1188:	d4 f3       	brlt	.-12     	; 0x117e <__divsf3_pse+0x6c>
    118a:	86 95       	lsr	r24
    118c:	77 95       	ror	r23
    118e:	67 95       	ror	r22
    1190:	b7 95       	ror	r27
    1192:	f7 95       	ror	r31
    1194:	9f 5f       	subi	r25, 0xFF	; 255
    1196:	c9 f7       	brne	.-14     	; 0x118a <__divsf3_pse+0x78>
    1198:	88 0f       	add	r24, r24
    119a:	91 1d       	adc	r25, r1
    119c:	96 95       	lsr	r25
    119e:	87 95       	ror	r24
    11a0:	97 f9       	bld	r25, 7
    11a2:	08 95       	ret
    11a4:	e1 e0       	ldi	r30, 0x01	; 1
    11a6:	66 0f       	add	r22, r22
    11a8:	77 1f       	adc	r23, r23
    11aa:	88 1f       	adc	r24, r24
    11ac:	bb 1f       	adc	r27, r27
    11ae:	62 17       	cp	r22, r18
    11b0:	73 07       	cpc	r23, r19
    11b2:	84 07       	cpc	r24, r20
    11b4:	ba 07       	cpc	r27, r26
    11b6:	20 f0       	brcs	.+8      	; 0x11c0 <__divsf3_pse+0xae>
    11b8:	62 1b       	sub	r22, r18
    11ba:	73 0b       	sbc	r23, r19
    11bc:	84 0b       	sbc	r24, r20
    11be:	ba 0b       	sbc	r27, r26
    11c0:	ee 1f       	adc	r30, r30
    11c2:	88 f7       	brcc	.-30     	; 0x11a6 <__divsf3_pse+0x94>
    11c4:	e0 95       	com	r30
    11c6:	08 95       	ret

000011c8 <__fixunssfsi>:
    11c8:	0e 94 a4 09 	call	0x1348	; 0x1348 <__fp_splitA>
    11cc:	88 f0       	brcs	.+34     	; 0x11f0 <__fixunssfsi+0x28>
    11ce:	9f 57       	subi	r25, 0x7F	; 127
    11d0:	98 f0       	brcs	.+38     	; 0x11f8 <__fixunssfsi+0x30>
    11d2:	b9 2f       	mov	r27, r25
    11d4:	99 27       	eor	r25, r25
    11d6:	b7 51       	subi	r27, 0x17	; 23
    11d8:	b0 f0       	brcs	.+44     	; 0x1206 <__fixunssfsi+0x3e>
    11da:	e1 f0       	breq	.+56     	; 0x1214 <__fixunssfsi+0x4c>
    11dc:	66 0f       	add	r22, r22
    11de:	77 1f       	adc	r23, r23
    11e0:	88 1f       	adc	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	1a f0       	brmi	.+6      	; 0x11ec <__fixunssfsi+0x24>
    11e6:	ba 95       	dec	r27
    11e8:	c9 f7       	brne	.-14     	; 0x11dc <__fixunssfsi+0x14>
    11ea:	14 c0       	rjmp	.+40     	; 0x1214 <__fixunssfsi+0x4c>
    11ec:	b1 30       	cpi	r27, 0x01	; 1
    11ee:	91 f0       	breq	.+36     	; 0x1214 <__fixunssfsi+0x4c>
    11f0:	0e 94 be 09 	call	0x137c	; 0x137c <__fp_zero>
    11f4:	b1 e0       	ldi	r27, 0x01	; 1
    11f6:	08 95       	ret
    11f8:	0c 94 be 09 	jmp	0x137c	; 0x137c <__fp_zero>
    11fc:	67 2f       	mov	r22, r23
    11fe:	78 2f       	mov	r23, r24
    1200:	88 27       	eor	r24, r24
    1202:	b8 5f       	subi	r27, 0xF8	; 248
    1204:	39 f0       	breq	.+14     	; 0x1214 <__fixunssfsi+0x4c>
    1206:	b9 3f       	cpi	r27, 0xF9	; 249
    1208:	cc f3       	brlt	.-14     	; 0x11fc <__fixunssfsi+0x34>
    120a:	86 95       	lsr	r24
    120c:	77 95       	ror	r23
    120e:	67 95       	ror	r22
    1210:	b3 95       	inc	r27
    1212:	d9 f7       	brne	.-10     	; 0x120a <__fixunssfsi+0x42>
    1214:	3e f4       	brtc	.+14     	; 0x1224 <__fixunssfsi+0x5c>
    1216:	90 95       	com	r25
    1218:	80 95       	com	r24
    121a:	70 95       	com	r23
    121c:	61 95       	neg	r22
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	8f 4f       	sbci	r24, 0xFF	; 255
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	08 95       	ret

00001226 <__floatunsisf>:
    1226:	e8 94       	clt
    1228:	09 c0       	rjmp	.+18     	; 0x123c <__floatsisf+0x12>

0000122a <__floatsisf>:
    122a:	97 fb       	bst	r25, 7
    122c:	3e f4       	brtc	.+14     	; 0x123c <__floatsisf+0x12>
    122e:	90 95       	com	r25
    1230:	80 95       	com	r24
    1232:	70 95       	com	r23
    1234:	61 95       	neg	r22
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	8f 4f       	sbci	r24, 0xFF	; 255
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	99 23       	and	r25, r25
    123e:	a9 f0       	breq	.+42     	; 0x126a <__floatsisf+0x40>
    1240:	f9 2f       	mov	r31, r25
    1242:	96 e9       	ldi	r25, 0x96	; 150
    1244:	bb 27       	eor	r27, r27
    1246:	93 95       	inc	r25
    1248:	f6 95       	lsr	r31
    124a:	87 95       	ror	r24
    124c:	77 95       	ror	r23
    124e:	67 95       	ror	r22
    1250:	b7 95       	ror	r27
    1252:	f1 11       	cpse	r31, r1
    1254:	f8 cf       	rjmp	.-16     	; 0x1246 <__floatsisf+0x1c>
    1256:	fa f4       	brpl	.+62     	; 0x1296 <__floatsisf+0x6c>
    1258:	bb 0f       	add	r27, r27
    125a:	11 f4       	brne	.+4      	; 0x1260 <__floatsisf+0x36>
    125c:	60 ff       	sbrs	r22, 0
    125e:	1b c0       	rjmp	.+54     	; 0x1296 <__floatsisf+0x6c>
    1260:	6f 5f       	subi	r22, 0xFF	; 255
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	8f 4f       	sbci	r24, 0xFF	; 255
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
    1268:	16 c0       	rjmp	.+44     	; 0x1296 <__floatsisf+0x6c>
    126a:	88 23       	and	r24, r24
    126c:	11 f0       	breq	.+4      	; 0x1272 <__floatsisf+0x48>
    126e:	96 e9       	ldi	r25, 0x96	; 150
    1270:	11 c0       	rjmp	.+34     	; 0x1294 <__floatsisf+0x6a>
    1272:	77 23       	and	r23, r23
    1274:	21 f0       	breq	.+8      	; 0x127e <__floatsisf+0x54>
    1276:	9e e8       	ldi	r25, 0x8E	; 142
    1278:	87 2f       	mov	r24, r23
    127a:	76 2f       	mov	r23, r22
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <__floatsisf+0x5e>
    127e:	66 23       	and	r22, r22
    1280:	71 f0       	breq	.+28     	; 0x129e <__floatsisf+0x74>
    1282:	96 e8       	ldi	r25, 0x86	; 134
    1284:	86 2f       	mov	r24, r22
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	2a f0       	brmi	.+10     	; 0x1296 <__floatsisf+0x6c>
    128c:	9a 95       	dec	r25
    128e:	66 0f       	add	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	da f7       	brpl	.-10     	; 0x128c <__floatsisf+0x62>
    1296:	88 0f       	add	r24, r24
    1298:	96 95       	lsr	r25
    129a:	87 95       	ror	r24
    129c:	97 f9       	bld	r25, 7
    129e:	08 95       	ret

000012a0 <__fp_cmp>:
    12a0:	99 0f       	add	r25, r25
    12a2:	00 08       	sbc	r0, r0
    12a4:	55 0f       	add	r21, r21
    12a6:	aa 0b       	sbc	r26, r26
    12a8:	e0 e8       	ldi	r30, 0x80	; 128
    12aa:	fe ef       	ldi	r31, 0xFE	; 254
    12ac:	16 16       	cp	r1, r22
    12ae:	17 06       	cpc	r1, r23
    12b0:	e8 07       	cpc	r30, r24
    12b2:	f9 07       	cpc	r31, r25
    12b4:	c0 f0       	brcs	.+48     	; 0x12e6 <__fp_cmp+0x46>
    12b6:	12 16       	cp	r1, r18
    12b8:	13 06       	cpc	r1, r19
    12ba:	e4 07       	cpc	r30, r20
    12bc:	f5 07       	cpc	r31, r21
    12be:	98 f0       	brcs	.+38     	; 0x12e6 <__fp_cmp+0x46>
    12c0:	62 1b       	sub	r22, r18
    12c2:	73 0b       	sbc	r23, r19
    12c4:	84 0b       	sbc	r24, r20
    12c6:	95 0b       	sbc	r25, r21
    12c8:	39 f4       	brne	.+14     	; 0x12d8 <__fp_cmp+0x38>
    12ca:	0a 26       	eor	r0, r26
    12cc:	61 f0       	breq	.+24     	; 0x12e6 <__fp_cmp+0x46>
    12ce:	23 2b       	or	r18, r19
    12d0:	24 2b       	or	r18, r20
    12d2:	25 2b       	or	r18, r21
    12d4:	21 f4       	brne	.+8      	; 0x12de <__fp_cmp+0x3e>
    12d6:	08 95       	ret
    12d8:	0a 26       	eor	r0, r26
    12da:	09 f4       	brne	.+2      	; 0x12de <__fp_cmp+0x3e>
    12dc:	a1 40       	sbci	r26, 0x01	; 1
    12de:	a6 95       	lsr	r26
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	81 1d       	adc	r24, r1
    12e4:	81 1d       	adc	r24, r1
    12e6:	08 95       	ret

000012e8 <__fp_inf>:
    12e8:	97 f9       	bld	r25, 7
    12ea:	9f 67       	ori	r25, 0x7F	; 127
    12ec:	80 e8       	ldi	r24, 0x80	; 128
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	08 95       	ret

000012f4 <__fp_nan>:
    12f4:	9f ef       	ldi	r25, 0xFF	; 255
    12f6:	80 ec       	ldi	r24, 0xC0	; 192
    12f8:	08 95       	ret

000012fa <__fp_pscA>:
    12fa:	00 24       	eor	r0, r0
    12fc:	0a 94       	dec	r0
    12fe:	16 16       	cp	r1, r22
    1300:	17 06       	cpc	r1, r23
    1302:	18 06       	cpc	r1, r24
    1304:	09 06       	cpc	r0, r25
    1306:	08 95       	ret

00001308 <__fp_pscB>:
    1308:	00 24       	eor	r0, r0
    130a:	0a 94       	dec	r0
    130c:	12 16       	cp	r1, r18
    130e:	13 06       	cpc	r1, r19
    1310:	14 06       	cpc	r1, r20
    1312:	05 06       	cpc	r0, r21
    1314:	08 95       	ret

00001316 <__fp_round>:
    1316:	09 2e       	mov	r0, r25
    1318:	03 94       	inc	r0
    131a:	00 0c       	add	r0, r0
    131c:	11 f4       	brne	.+4      	; 0x1322 <__fp_round+0xc>
    131e:	88 23       	and	r24, r24
    1320:	52 f0       	brmi	.+20     	; 0x1336 <__fp_round+0x20>
    1322:	bb 0f       	add	r27, r27
    1324:	40 f4       	brcc	.+16     	; 0x1336 <__fp_round+0x20>
    1326:	bf 2b       	or	r27, r31
    1328:	11 f4       	brne	.+4      	; 0x132e <__fp_round+0x18>
    132a:	60 ff       	sbrs	r22, 0
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <__fp_round+0x20>
    132e:	6f 5f       	subi	r22, 0xFF	; 255
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	8f 4f       	sbci	r24, 0xFF	; 255
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	08 95       	ret

00001338 <__fp_split3>:
    1338:	57 fd       	sbrc	r21, 7
    133a:	90 58       	subi	r25, 0x80	; 128
    133c:	44 0f       	add	r20, r20
    133e:	55 1f       	adc	r21, r21
    1340:	59 f0       	breq	.+22     	; 0x1358 <__fp_splitA+0x10>
    1342:	5f 3f       	cpi	r21, 0xFF	; 255
    1344:	71 f0       	breq	.+28     	; 0x1362 <__fp_splitA+0x1a>
    1346:	47 95       	ror	r20

00001348 <__fp_splitA>:
    1348:	88 0f       	add	r24, r24
    134a:	97 fb       	bst	r25, 7
    134c:	99 1f       	adc	r25, r25
    134e:	61 f0       	breq	.+24     	; 0x1368 <__fp_splitA+0x20>
    1350:	9f 3f       	cpi	r25, 0xFF	; 255
    1352:	79 f0       	breq	.+30     	; 0x1372 <__fp_splitA+0x2a>
    1354:	87 95       	ror	r24
    1356:	08 95       	ret
    1358:	12 16       	cp	r1, r18
    135a:	13 06       	cpc	r1, r19
    135c:	14 06       	cpc	r1, r20
    135e:	55 1f       	adc	r21, r21
    1360:	f2 cf       	rjmp	.-28     	; 0x1346 <__fp_split3+0xe>
    1362:	46 95       	lsr	r20
    1364:	f1 df       	rcall	.-30     	; 0x1348 <__fp_splitA>
    1366:	08 c0       	rjmp	.+16     	; 0x1378 <__fp_splitA+0x30>
    1368:	16 16       	cp	r1, r22
    136a:	17 06       	cpc	r1, r23
    136c:	18 06       	cpc	r1, r24
    136e:	99 1f       	adc	r25, r25
    1370:	f1 cf       	rjmp	.-30     	; 0x1354 <__fp_splitA+0xc>
    1372:	86 95       	lsr	r24
    1374:	71 05       	cpc	r23, r1
    1376:	61 05       	cpc	r22, r1
    1378:	08 94       	sec
    137a:	08 95       	ret

0000137c <__fp_zero>:
    137c:	e8 94       	clt

0000137e <__fp_szero>:
    137e:	bb 27       	eor	r27, r27
    1380:	66 27       	eor	r22, r22
    1382:	77 27       	eor	r23, r23
    1384:	cb 01       	movw	r24, r22
    1386:	97 f9       	bld	r25, 7
    1388:	08 95       	ret

0000138a <__gesf2>:
    138a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__fp_cmp>
    138e:	08 f4       	brcc	.+2      	; 0x1392 <__gesf2+0x8>
    1390:	8f ef       	ldi	r24, 0xFF	; 255
    1392:	08 95       	ret

00001394 <__mulsf3>:
    1394:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__mulsf3x>
    1398:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_round>
    139c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__fp_pscA>
    13a0:	38 f0       	brcs	.+14     	; 0x13b0 <__mulsf3+0x1c>
    13a2:	0e 94 84 09 	call	0x1308	; 0x1308 <__fp_pscB>
    13a6:	20 f0       	brcs	.+8      	; 0x13b0 <__mulsf3+0x1c>
    13a8:	95 23       	and	r25, r21
    13aa:	11 f0       	breq	.+4      	; 0x13b0 <__mulsf3+0x1c>
    13ac:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__fp_inf>
    13b0:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__fp_nan>
    13b4:	11 24       	eor	r1, r1
    13b6:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__fp_szero>

000013ba <__mulsf3x>:
    13ba:	0e 94 9c 09 	call	0x1338	; 0x1338 <__fp_split3>
    13be:	70 f3       	brcs	.-36     	; 0x139c <__mulsf3+0x8>

000013c0 <__mulsf3_pse>:
    13c0:	95 9f       	mul	r25, r21
    13c2:	c1 f3       	breq	.-16     	; 0x13b4 <__mulsf3+0x20>
    13c4:	95 0f       	add	r25, r21
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	55 1f       	adc	r21, r21
    13ca:	62 9f       	mul	r22, r18
    13cc:	f0 01       	movw	r30, r0
    13ce:	72 9f       	mul	r23, r18
    13d0:	bb 27       	eor	r27, r27
    13d2:	f0 0d       	add	r31, r0
    13d4:	b1 1d       	adc	r27, r1
    13d6:	63 9f       	mul	r22, r19
    13d8:	aa 27       	eor	r26, r26
    13da:	f0 0d       	add	r31, r0
    13dc:	b1 1d       	adc	r27, r1
    13de:	aa 1f       	adc	r26, r26
    13e0:	64 9f       	mul	r22, r20
    13e2:	66 27       	eor	r22, r22
    13e4:	b0 0d       	add	r27, r0
    13e6:	a1 1d       	adc	r26, r1
    13e8:	66 1f       	adc	r22, r22
    13ea:	82 9f       	mul	r24, r18
    13ec:	22 27       	eor	r18, r18
    13ee:	b0 0d       	add	r27, r0
    13f0:	a1 1d       	adc	r26, r1
    13f2:	62 1f       	adc	r22, r18
    13f4:	73 9f       	mul	r23, r19
    13f6:	b0 0d       	add	r27, r0
    13f8:	a1 1d       	adc	r26, r1
    13fa:	62 1f       	adc	r22, r18
    13fc:	83 9f       	mul	r24, r19
    13fe:	a0 0d       	add	r26, r0
    1400:	61 1d       	adc	r22, r1
    1402:	22 1f       	adc	r18, r18
    1404:	74 9f       	mul	r23, r20
    1406:	33 27       	eor	r19, r19
    1408:	a0 0d       	add	r26, r0
    140a:	61 1d       	adc	r22, r1
    140c:	23 1f       	adc	r18, r19
    140e:	84 9f       	mul	r24, r20
    1410:	60 0d       	add	r22, r0
    1412:	21 1d       	adc	r18, r1
    1414:	82 2f       	mov	r24, r18
    1416:	76 2f       	mov	r23, r22
    1418:	6a 2f       	mov	r22, r26
    141a:	11 24       	eor	r1, r1
    141c:	9f 57       	subi	r25, 0x7F	; 127
    141e:	50 40       	sbci	r21, 0x00	; 0
    1420:	9a f0       	brmi	.+38     	; 0x1448 <__mulsf3_pse+0x88>
    1422:	f1 f0       	breq	.+60     	; 0x1460 <__mulsf3_pse+0xa0>
    1424:	88 23       	and	r24, r24
    1426:	4a f0       	brmi	.+18     	; 0x143a <__mulsf3_pse+0x7a>
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	bb 1f       	adc	r27, r27
    142e:	66 1f       	adc	r22, r22
    1430:	77 1f       	adc	r23, r23
    1432:	88 1f       	adc	r24, r24
    1434:	91 50       	subi	r25, 0x01	; 1
    1436:	50 40       	sbci	r21, 0x00	; 0
    1438:	a9 f7       	brne	.-22     	; 0x1424 <__mulsf3_pse+0x64>
    143a:	9e 3f       	cpi	r25, 0xFE	; 254
    143c:	51 05       	cpc	r21, r1
    143e:	80 f0       	brcs	.+32     	; 0x1460 <__mulsf3_pse+0xa0>
    1440:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__fp_inf>
    1444:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__fp_szero>
    1448:	5f 3f       	cpi	r21, 0xFF	; 255
    144a:	e4 f3       	brlt	.-8      	; 0x1444 <__mulsf3_pse+0x84>
    144c:	98 3e       	cpi	r25, 0xE8	; 232
    144e:	d4 f3       	brlt	.-12     	; 0x1444 <__mulsf3_pse+0x84>
    1450:	86 95       	lsr	r24
    1452:	77 95       	ror	r23
    1454:	67 95       	ror	r22
    1456:	b7 95       	ror	r27
    1458:	f7 95       	ror	r31
    145a:	e7 95       	ror	r30
    145c:	9f 5f       	subi	r25, 0xFF	; 255
    145e:	c1 f7       	brne	.-16     	; 0x1450 <__mulsf3_pse+0x90>
    1460:	fe 2b       	or	r31, r30
    1462:	88 0f       	add	r24, r24
    1464:	91 1d       	adc	r25, r1
    1466:	96 95       	lsr	r25
    1468:	87 95       	ror	r24
    146a:	97 f9       	bld	r25, 7
    146c:	08 95       	ret

0000146e <__divmodhi4>:
    146e:	97 fb       	bst	r25, 7
    1470:	07 2e       	mov	r0, r23
    1472:	16 f4       	brtc	.+4      	; 0x1478 <__divmodhi4+0xa>
    1474:	00 94       	com	r0
    1476:	07 d0       	rcall	.+14     	; 0x1486 <__divmodhi4_neg1>
    1478:	77 fd       	sbrc	r23, 7
    147a:	09 d0       	rcall	.+18     	; 0x148e <__divmodhi4_neg2>
    147c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__udivmodhi4>
    1480:	07 fc       	sbrc	r0, 7
    1482:	05 d0       	rcall	.+10     	; 0x148e <__divmodhi4_neg2>
    1484:	3e f4       	brtc	.+14     	; 0x1494 <__divmodhi4_exit>

00001486 <__divmodhi4_neg1>:
    1486:	90 95       	com	r25
    1488:	81 95       	neg	r24
    148a:	9f 4f       	sbci	r25, 0xFF	; 255
    148c:	08 95       	ret

0000148e <__divmodhi4_neg2>:
    148e:	70 95       	com	r23
    1490:	61 95       	neg	r22
    1492:	7f 4f       	sbci	r23, 0xFF	; 255

00001494 <__divmodhi4_exit>:
    1494:	08 95       	ret

00001496 <__udivmodhi4>:
    1496:	aa 1b       	sub	r26, r26
    1498:	bb 1b       	sub	r27, r27
    149a:	51 e1       	ldi	r21, 0x11	; 17
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <__udivmodhi4_ep>

0000149e <__udivmodhi4_loop>:
    149e:	aa 1f       	adc	r26, r26
    14a0:	bb 1f       	adc	r27, r27
    14a2:	a6 17       	cp	r26, r22
    14a4:	b7 07       	cpc	r27, r23
    14a6:	10 f0       	brcs	.+4      	; 0x14ac <__udivmodhi4_ep>
    14a8:	a6 1b       	sub	r26, r22
    14aa:	b7 0b       	sbc	r27, r23

000014ac <__udivmodhi4_ep>:
    14ac:	88 1f       	adc	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	5a 95       	dec	r21
    14b2:	a9 f7       	brne	.-22     	; 0x149e <__udivmodhi4_loop>
    14b4:	80 95       	com	r24
    14b6:	90 95       	com	r25
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	08 95       	ret

000014be <_exit>:
    14be:	f8 94       	cli

000014c0 <__stop_program>:
    14c0:	ff cf       	rjmp	.-2      	; 0x14c0 <__stop_program>
