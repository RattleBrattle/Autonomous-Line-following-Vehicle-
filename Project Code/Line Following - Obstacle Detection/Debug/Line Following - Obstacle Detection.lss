
Line Following - Obstacle Detection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000013dc  00001470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000f6  008000f6  00001506  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001506  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000321e  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abe  00000000  00000000  000049c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dcc  00000000  00000000  00005480  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000674  00000000  00000000  0000724c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c3a  00000000  00000000  000078c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025bb  00000000  00000000  000084fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000aab5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_10>
      2c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6e 07 	call	0xedc	; 0xedc <main>
      8a:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPinDirection>:
      break;
   case DIO_PORTC:
      TOGG_BIT(PORTC_REG, copy_u8pin);
      break;
   case DIO_PORTD:
      TOGG_BIT(PORTD_REG, copy_u8pin);
      92:	81 30       	cpi	r24, 0x01	; 1
      94:	19 f1       	breq	.+70     	; 0xdc <DIO_setPinDirection+0x4a>
      96:	30 f0       	brcs	.+12     	; 0xa4 <DIO_setPinDirection+0x12>
      98:	82 30       	cpi	r24, 0x02	; 2
      9a:	e1 f1       	breq	.+120    	; 0x114 <DIO_setPinDirection+0x82>
      9c:	83 30       	cpi	r24, 0x03	; 3
      9e:	09 f4       	brne	.+2      	; 0xa2 <DIO_setPinDirection+0x10>
      a0:	55 c0       	rjmp	.+170    	; 0x14c <DIO_setPinDirection+0xba>
      a2:	08 95       	ret
      a4:	44 23       	and	r20, r20
      a6:	19 f0       	breq	.+6      	; 0xae <DIO_setPinDirection+0x1c>
      a8:	41 30       	cpi	r20, 0x01	; 1
      aa:	69 f0       	breq	.+26     	; 0xc6 <DIO_setPinDirection+0x34>
      ac:	08 95       	ret
      ae:	2a b3       	in	r18, 0x1a	; 26
      b0:	81 e0       	ldi	r24, 0x01	; 1
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_setPinDirection+0x28>
      b6:	88 0f       	add	r24, r24
      b8:	99 1f       	adc	r25, r25
      ba:	6a 95       	dec	r22
      bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_setPinDirection+0x24>
      be:	80 95       	com	r24
      c0:	82 23       	and	r24, r18
      c2:	8a bb       	out	0x1a, r24	; 26
      c4:	08 95       	ret
      c6:	2a b3       	in	r18, 0x1a	; 26
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_setPinDirection+0x40>
      ce:	88 0f       	add	r24, r24
      d0:	99 1f       	adc	r25, r25
      d2:	6a 95       	dec	r22
      d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_setPinDirection+0x3c>
      d6:	82 2b       	or	r24, r18
      d8:	8a bb       	out	0x1a, r24	; 26
      da:	08 95       	ret
      dc:	44 23       	and	r20, r20
      de:	19 f0       	breq	.+6      	; 0xe6 <DIO_setPinDirection+0x54>
      e0:	41 30       	cpi	r20, 0x01	; 1
      e2:	69 f0       	breq	.+26     	; 0xfe <DIO_setPinDirection+0x6c>
      e4:	08 95       	ret
      e6:	27 b3       	in	r18, 0x17	; 23
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_setPinDirection+0x60>
      ee:	88 0f       	add	r24, r24
      f0:	99 1f       	adc	r25, r25
      f2:	6a 95       	dec	r22
      f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_setPinDirection+0x5c>
      f6:	80 95       	com	r24
      f8:	82 23       	and	r24, r18
      fa:	87 bb       	out	0x17, r24	; 23
      fc:	08 95       	ret
      fe:	27 b3       	in	r18, 0x17	; 23
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_setPinDirection+0x78>
     106:	88 0f       	add	r24, r24
     108:	99 1f       	adc	r25, r25
     10a:	6a 95       	dec	r22
     10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_setPinDirection+0x74>
     10e:	82 2b       	or	r24, r18
     110:	87 bb       	out	0x17, r24	; 23
     112:	08 95       	ret
     114:	44 23       	and	r20, r20
     116:	19 f0       	breq	.+6      	; 0x11e <DIO_setPinDirection+0x8c>
     118:	41 30       	cpi	r20, 0x01	; 1
     11a:	69 f0       	breq	.+26     	; 0x136 <DIO_setPinDirection+0xa4>
     11c:	08 95       	ret
     11e:	24 b3       	in	r18, 0x14	; 20
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_setPinDirection+0x98>
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	6a 95       	dec	r22
     12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_setPinDirection+0x94>
     12e:	80 95       	com	r24
     130:	82 23       	and	r24, r18
     132:	84 bb       	out	0x14, r24	; 20
     134:	08 95       	ret
     136:	24 b3       	in	r18, 0x14	; 20
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_setPinDirection+0xb0>
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	6a 95       	dec	r22
     144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_setPinDirection+0xac>
     146:	82 2b       	or	r24, r18
     148:	84 bb       	out	0x14, r24	; 20
     14a:	08 95       	ret
     14c:	44 23       	and	r20, r20
     14e:	19 f0       	breq	.+6      	; 0x156 <DIO_setPinDirection+0xc4>
     150:	41 30       	cpi	r20, 0x01	; 1
     152:	69 f0       	breq	.+26     	; 0x16e <DIO_setPinDirection+0xdc>
     154:	08 95       	ret
     156:	21 b3       	in	r18, 0x11	; 17
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDirection+0xd0>
     15e:	88 0f       	add	r24, r24
     160:	99 1f       	adc	r25, r25
     162:	6a 95       	dec	r22
     164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDirection+0xcc>
     166:	80 95       	com	r24
     168:	82 23       	and	r24, r18
     16a:	81 bb       	out	0x11, r24	; 17
     16c:	08 95       	ret
     16e:	21 b3       	in	r18, 0x11	; 17
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_setPinDirection+0xe8>
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	6a 95       	dec	r22
     17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_setPinDirection+0xe4>
     17e:	82 2b       	or	r24, r18
     180:	81 bb       	out	0x11, r24	; 17
     182:	08 95       	ret

00000184 <DIO_setPinVal>:
     184:	81 30       	cpi	r24, 0x01	; 1
     186:	19 f1       	breq	.+70     	; 0x1ce <DIO_setPinVal+0x4a>
     188:	30 f0       	brcs	.+12     	; 0x196 <DIO_setPinVal+0x12>
     18a:	82 30       	cpi	r24, 0x02	; 2
     18c:	e1 f1       	breq	.+120    	; 0x206 <DIO_setPinVal+0x82>
     18e:	83 30       	cpi	r24, 0x03	; 3
     190:	09 f4       	brne	.+2      	; 0x194 <DIO_setPinVal+0x10>
     192:	55 c0       	rjmp	.+170    	; 0x23e <DIO_setPinVal+0xba>
     194:	08 95       	ret
     196:	44 23       	and	r20, r20
     198:	19 f0       	breq	.+6      	; 0x1a0 <DIO_setPinVal+0x1c>
     19a:	41 30       	cpi	r20, 0x01	; 1
     19c:	69 f0       	breq	.+26     	; 0x1b8 <DIO_setPinVal+0x34>
     19e:	08 95       	ret
     1a0:	2b b3       	in	r18, 0x1b	; 27
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_setPinVal+0x28>
     1a8:	88 0f       	add	r24, r24
     1aa:	99 1f       	adc	r25, r25
     1ac:	6a 95       	dec	r22
     1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_setPinVal+0x24>
     1b0:	80 95       	com	r24
     1b2:	82 23       	and	r24, r18
     1b4:	8b bb       	out	0x1b, r24	; 27
     1b6:	08 95       	ret
     1b8:	2b b3       	in	r18, 0x1b	; 27
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_setPinVal+0x40>
     1c0:	88 0f       	add	r24, r24
     1c2:	99 1f       	adc	r25, r25
     1c4:	6a 95       	dec	r22
     1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_setPinVal+0x3c>
     1c8:	82 2b       	or	r24, r18
     1ca:	8b bb       	out	0x1b, r24	; 27
     1cc:	08 95       	ret
     1ce:	44 23       	and	r20, r20
     1d0:	19 f0       	breq	.+6      	; 0x1d8 <DIO_setPinVal+0x54>
     1d2:	41 30       	cpi	r20, 0x01	; 1
     1d4:	69 f0       	breq	.+26     	; 0x1f0 <DIO_setPinVal+0x6c>
     1d6:	08 95       	ret
     1d8:	28 b3       	in	r18, 0x18	; 24
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_setPinVal+0x60>
     1e0:	88 0f       	add	r24, r24
     1e2:	99 1f       	adc	r25, r25
     1e4:	6a 95       	dec	r22
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_setPinVal+0x5c>
     1e8:	80 95       	com	r24
     1ea:	82 23       	and	r24, r18
     1ec:	88 bb       	out	0x18, r24	; 24
     1ee:	08 95       	ret
     1f0:	28 b3       	in	r18, 0x18	; 24
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_setPinVal+0x78>
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_setPinVal+0x74>
     200:	82 2b       	or	r24, r18
     202:	88 bb       	out	0x18, r24	; 24
     204:	08 95       	ret
     206:	44 23       	and	r20, r20
     208:	19 f0       	breq	.+6      	; 0x210 <DIO_setPinVal+0x8c>
     20a:	41 30       	cpi	r20, 0x01	; 1
     20c:	69 f0       	breq	.+26     	; 0x228 <DIO_setPinVal+0xa4>
     20e:	08 95       	ret
     210:	25 b3       	in	r18, 0x15	; 21
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_setPinVal+0x98>
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	6a 95       	dec	r22
     21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_setPinVal+0x94>
     220:	80 95       	com	r24
     222:	82 23       	and	r24, r18
     224:	85 bb       	out	0x15, r24	; 21
     226:	08 95       	ret
     228:	25 b3       	in	r18, 0x15	; 21
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_setPinVal+0xb0>
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	6a 95       	dec	r22
     236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_setPinVal+0xac>
     238:	82 2b       	or	r24, r18
     23a:	85 bb       	out	0x15, r24	; 21
     23c:	08 95       	ret
     23e:	44 23       	and	r20, r20
     240:	19 f0       	breq	.+6      	; 0x248 <DIO_setPinVal+0xc4>
     242:	41 30       	cpi	r20, 0x01	; 1
     244:	69 f0       	breq	.+26     	; 0x260 <DIO_setPinVal+0xdc>
     246:	08 95       	ret
     248:	22 b3       	in	r18, 0x12	; 18
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_setPinVal+0xd0>
     250:	88 0f       	add	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_setPinVal+0xcc>
     258:	80 95       	com	r24
     25a:	82 23       	and	r24, r18
     25c:	82 bb       	out	0x12, r24	; 18
     25e:	08 95       	ret
     260:	22 b3       	in	r18, 0x12	; 18
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_setPinVal+0xe8>
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	6a 95       	dec	r22
     26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_setPinVal+0xe4>
     270:	82 2b       	or	r24, r18
     272:	82 bb       	out	0x12, r24	; 18
     274:	08 95       	ret

00000276 <DIO_readPinVal>:
}

u8 DIO_readPinVal(u8 copy_u8port, u8 copy_u8pin) {
   u8 local_u8State;

   switch (copy_u8port) {
     276:	81 30       	cpi	r24, 0x01	; 1
     278:	81 f0       	breq	.+32     	; 0x29a <DIO_readPinVal+0x24>
     27a:	28 f0       	brcs	.+10     	; 0x286 <DIO_readPinVal+0x10>
     27c:	82 30       	cpi	r24, 0x02	; 2
     27e:	b9 f0       	breq	.+46     	; 0x2ae <DIO_readPinVal+0x38>
     280:	83 30       	cpi	r24, 0x03	; 3
     282:	f9 f0       	breq	.+62     	; 0x2c2 <DIO_readPinVal+0x4c>
     284:	27 c0       	rjmp	.+78     	; 0x2d4 <DIO_readPinVal+0x5e>
   case DIO_PORTA:
      local_u8State = GET_BIT(PINA_REG, copy_u8pin);
     286:	89 b3       	in	r24, 0x19	; 25
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_readPinVal+0x1a>
     28c:	95 95       	asr	r25
     28e:	87 95       	ror	r24
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_readPinVal+0x16>
     294:	98 2f       	mov	r25, r24
     296:	91 70       	andi	r25, 0x01	; 1
      break;
     298:	1d c0       	rjmp	.+58     	; 0x2d4 <DIO_readPinVal+0x5e>
   case DIO_PORTB:
      local_u8State = GET_BIT(PINB_REG, copy_u8pin);
     29a:	86 b3       	in	r24, 0x16	; 22
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_readPinVal+0x2e>
     2a0:	95 95       	asr	r25
     2a2:	87 95       	ror	r24
     2a4:	6a 95       	dec	r22
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_readPinVal+0x2a>
     2a8:	98 2f       	mov	r25, r24
     2aa:	91 70       	andi	r25, 0x01	; 1
      break;
     2ac:	13 c0       	rjmp	.+38     	; 0x2d4 <DIO_readPinVal+0x5e>
   case DIO_PORTC:
      local_u8State = GET_BIT(PINC_REG, copy_u8pin);
     2ae:	83 b3       	in	r24, 0x13	; 19
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_readPinVal+0x42>
     2b4:	95 95       	asr	r25
     2b6:	87 95       	ror	r24
     2b8:	6a 95       	dec	r22
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_readPinVal+0x3e>
     2bc:	98 2f       	mov	r25, r24
     2be:	91 70       	andi	r25, 0x01	; 1
      break;
     2c0:	09 c0       	rjmp	.+18     	; 0x2d4 <DIO_readPinVal+0x5e>
   case DIO_PORTD:
      local_u8State = GET_BIT(PINC_REG, copy_u8pin);
     2c2:	83 b3       	in	r24, 0x13	; 19
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_readPinVal+0x56>
     2c8:	95 95       	asr	r25
     2ca:	87 95       	ror	r24
     2cc:	6a 95       	dec	r22
     2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_readPinVal+0x52>
     2d0:	98 2f       	mov	r25, r24
     2d2:	91 70       	andi	r25, 0x01	; 1
   default: // Add an Error Prompt or interrupt here later******
      break;
   }

   return local_u8State;
}
     2d4:	89 2f       	mov	r24, r25
     2d6:	08 95       	ret

000002d8 <TMR0_init>:
		*copy_u16Reading = ADC_getValue(TCRT_RIGHT_CHANNEL);
		break;
		default: // Add error state
		break;
	}
}
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	31 f0       	breq	.+12     	; 0x2e8 <TMR0_init+0x10>
     2dc:	a8 f0       	brcs	.+42     	; 0x308 <TMR0_init+0x30>
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	f9 f0       	breq	.+62     	; 0x320 <TMR0_init+0x48>
     2e2:	83 30       	cpi	r24, 0x03	; 3
     2e4:	a9 f1       	breq	.+106    	; 0x350 <TMR0_init+0x78>
     2e6:	08 95       	ret
     2e8:	83 b7       	in	r24, 0x33	; 51
     2ea:	8f 7b       	andi	r24, 0xBF	; 191
     2ec:	83 bf       	out	0x33, r24	; 51
     2ee:	83 b7       	in	r24, 0x33	; 51
     2f0:	87 7f       	andi	r24, 0xF7	; 247
     2f2:	83 bf       	out	0x33, r24	; 51
     2f4:	61 30       	cpi	r22, 0x01	; 1
     2f6:	19 f4       	brne	.+6      	; 0x2fe <TMR0_init+0x26>
     2f8:	81 e7       	ldi	r24, 0x71	; 113
     2fa:	82 bf       	out	0x32, r24	; 50
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <TMR0_init+0x28>
     2fe:	12 be       	out	0x32, r1	; 50
     300:	89 b7       	in	r24, 0x39	; 57
     302:	81 60       	ori	r24, 0x01	; 1
     304:	89 bf       	out	0x39, r24	; 57
     306:	08 95       	ret
     308:	83 b7       	in	r24, 0x33	; 51
     30a:	8f 7b       	andi	r24, 0xBF	; 191
     30c:	83 bf       	out	0x33, r24	; 51
     30e:	83 b7       	in	r24, 0x33	; 51
     310:	88 60       	ori	r24, 0x08	; 8
     312:	83 bf       	out	0x33, r24	; 51
     314:	89 ef       	ldi	r24, 0xF9	; 249
     316:	8c bf       	out	0x3c, r24	; 60
     318:	89 b7       	in	r24, 0x39	; 57
     31a:	82 60       	ori	r24, 0x02	; 2
     31c:	89 bf       	out	0x39, r24	; 57
     31e:	08 95       	ret
     320:	83 b7       	in	r24, 0x33	; 51
     322:	80 64       	ori	r24, 0x40	; 64
     324:	83 bf       	out	0x33, r24	; 51
     326:	83 b7       	in	r24, 0x33	; 51
     328:	88 60       	ori	r24, 0x08	; 8
     32a:	83 bf       	out	0x33, r24	; 51
     32c:	44 23       	and	r20, r20
     32e:	19 f0       	breq	.+6      	; 0x336 <TMR0_init+0x5e>
     330:	41 30       	cpi	r20, 0x01	; 1
     332:	41 f0       	breq	.+16     	; 0x344 <TMR0_init+0x6c>
     334:	0d c0       	rjmp	.+26     	; 0x350 <TMR0_init+0x78>
     336:	83 b7       	in	r24, 0x33	; 51
     338:	80 61       	ori	r24, 0x10	; 16
     33a:	83 bf       	out	0x33, r24	; 51
     33c:	83 b7       	in	r24, 0x33	; 51
     33e:	80 62       	ori	r24, 0x20	; 32
     340:	83 bf       	out	0x33, r24	; 51
     342:	06 c0       	rjmp	.+12     	; 0x350 <TMR0_init+0x78>
     344:	83 b7       	in	r24, 0x33	; 51
     346:	8f 7e       	andi	r24, 0xEF	; 239
     348:	83 bf       	out	0x33, r24	; 51
     34a:	83 b7       	in	r24, 0x33	; 51
     34c:	80 62       	ori	r24, 0x20	; 32
     34e:	83 bf       	out	0x33, r24	; 51
     350:	83 b7       	in	r24, 0x33	; 51
     352:	80 64       	ori	r24, 0x40	; 64
     354:	83 bf       	out	0x33, r24	; 51
     356:	83 b7       	in	r24, 0x33	; 51
     358:	87 7f       	andi	r24, 0xF7	; 247
     35a:	83 bf       	out	0x33, r24	; 51
     35c:	44 23       	and	r20, r20
     35e:	19 f0       	breq	.+6      	; 0x366 <TMR0_init+0x8e>
     360:	41 30       	cpi	r20, 0x01	; 1
     362:	41 f0       	breq	.+16     	; 0x374 <TMR0_init+0x9c>
     364:	08 95       	ret
     366:	83 b7       	in	r24, 0x33	; 51
     368:	80 61       	ori	r24, 0x10	; 16
     36a:	83 bf       	out	0x33, r24	; 51
     36c:	83 b7       	in	r24, 0x33	; 51
     36e:	80 62       	ori	r24, 0x20	; 32
     370:	83 bf       	out	0x33, r24	; 51
     372:	08 95       	ret
     374:	83 b7       	in	r24, 0x33	; 51
     376:	8f 7e       	andi	r24, 0xEF	; 239
     378:	83 bf       	out	0x33, r24	; 51
     37a:	83 b7       	in	r24, 0x33	; 51
     37c:	80 62       	ori	r24, 0x20	; 32
     37e:	83 bf       	out	0x33, r24	; 51
     380:	08 95       	ret

00000382 <TMR0_start>:
     382:	82 30       	cpi	r24, 0x02	; 2
     384:	f9 f0       	breq	.+62     	; 0x3c4 <TMR0_start+0x42>
     386:	28 f4       	brcc	.+10     	; 0x392 <TMR0_start+0x10>
     388:	88 23       	and	r24, r24
     38a:	41 f0       	breq	.+16     	; 0x39c <TMR0_start+0x1a>
     38c:	81 30       	cpi	r24, 0x01	; 1
     38e:	81 f0       	breq	.+32     	; 0x3b0 <TMR0_start+0x2e>
     390:	08 95       	ret
     392:	83 30       	cpi	r24, 0x03	; 3
     394:	09 f1       	breq	.+66     	; 0x3d8 <TMR0_start+0x56>
     396:	84 30       	cpi	r24, 0x04	; 4
     398:	49 f1       	breq	.+82     	; 0x3ec <TMR0_start+0x6a>
     39a:	08 95       	ret
     39c:	83 b7       	in	r24, 0x33	; 51
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	83 bf       	out	0x33, r24	; 51
     3a2:	83 b7       	in	r24, 0x33	; 51
     3a4:	8d 7f       	andi	r24, 0xFD	; 253
     3a6:	83 bf       	out	0x33, r24	; 51
     3a8:	83 b7       	in	r24, 0x33	; 51
     3aa:	8b 7f       	andi	r24, 0xFB	; 251
     3ac:	83 bf       	out	0x33, r24	; 51
     3ae:	08 95       	ret
     3b0:	83 b7       	in	r24, 0x33	; 51
     3b2:	8e 7f       	andi	r24, 0xFE	; 254
     3b4:	83 bf       	out	0x33, r24	; 51
     3b6:	83 b7       	in	r24, 0x33	; 51
     3b8:	82 60       	ori	r24, 0x02	; 2
     3ba:	83 bf       	out	0x33, r24	; 51
     3bc:	83 b7       	in	r24, 0x33	; 51
     3be:	8b 7f       	andi	r24, 0xFB	; 251
     3c0:	83 bf       	out	0x33, r24	; 51
     3c2:	08 95       	ret
     3c4:	83 b7       	in	r24, 0x33	; 51
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	83 bf       	out	0x33, r24	; 51
     3ca:	83 b7       	in	r24, 0x33	; 51
     3cc:	82 60       	ori	r24, 0x02	; 2
     3ce:	83 bf       	out	0x33, r24	; 51
     3d0:	83 b7       	in	r24, 0x33	; 51
     3d2:	8b 7f       	andi	r24, 0xFB	; 251
     3d4:	83 bf       	out	0x33, r24	; 51
     3d6:	08 95       	ret
     3d8:	83 b7       	in	r24, 0x33	; 51
     3da:	8e 7f       	andi	r24, 0xFE	; 254
     3dc:	83 bf       	out	0x33, r24	; 51
     3de:	83 b7       	in	r24, 0x33	; 51
     3e0:	8d 7f       	andi	r24, 0xFD	; 253
     3e2:	83 bf       	out	0x33, r24	; 51
     3e4:	83 b7       	in	r24, 0x33	; 51
     3e6:	84 60       	ori	r24, 0x04	; 4
     3e8:	83 bf       	out	0x33, r24	; 51
     3ea:	08 95       	ret
     3ec:	83 b7       	in	r24, 0x33	; 51
     3ee:	81 60       	ori	r24, 0x01	; 1
     3f0:	83 bf       	out	0x33, r24	; 51
     3f2:	83 b7       	in	r24, 0x33	; 51
     3f4:	8d 7f       	andi	r24, 0xFD	; 253
     3f6:	83 bf       	out	0x33, r24	; 51
     3f8:	83 b7       	in	r24, 0x33	; 51
     3fa:	84 60       	ori	r24, 0x04	; 4
     3fc:	83 bf       	out	0x33, r24	; 51
     3fe:	08 95       	ret

00000400 <TMR0_generatePWM>:
     400:	85 36       	cpi	r24, 0x65	; 101
     402:	08 f0       	brcs	.+2      	; 0x406 <TMR0_generatePWM+0x6>
     404:	84 e6       	ldi	r24, 0x64	; 100
     406:	66 23       	and	r22, r22
     408:	71 f0       	breq	.+28     	; 0x426 <TMR0_generatePWM+0x26>
     40a:	61 30       	cpi	r22, 0x01	; 1
     40c:	e9 f4       	brne	.+58     	; 0x448 <TMR0_generatePWM+0x48>
     40e:	98 2f       	mov	r25, r24
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	64 e6       	ldi	r22, 0x64	; 100
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	0e 94 c4 09 	call	0x1388	; 0x1388 <__divmodhi4>
     41a:	61 50       	subi	r22, 0x01	; 1
     41c:	6c bf       	out	0x3c, r22	; 60
     41e:	84 2f       	mov	r24, r20
     420:	0e 94 c1 01 	call	0x382	; 0x382 <TMR0_start>
     424:	08 95       	ret
     426:	64 e6       	ldi	r22, 0x64	; 100
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	9b 01       	movw	r18, r22
     42c:	28 1b       	sub	r18, r24
     42e:	31 09       	sbc	r19, r1
     430:	5f ef       	ldi	r21, 0xFF	; 255
     432:	52 9f       	mul	r21, r18
     434:	c0 01       	movw	r24, r0
     436:	53 9f       	mul	r21, r19
     438:	90 0d       	add	r25, r0
     43a:	11 24       	eor	r1, r1
     43c:	0e 94 c4 09 	call	0x1388	; 0x1388 <__divmodhi4>
     440:	6c bf       	out	0x3c, r22	; 60
     442:	84 2f       	mov	r24, r20
     444:	0e 94 c1 01 	call	0x382	; 0x382 <TMR0_start>
     448:	08 95       	ret

0000044a <TMR0_stop>:
     44a:	83 b7       	in	r24, 0x33	; 51
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	83 bf       	out	0x33, r24	; 51
     450:	83 b7       	in	r24, 0x33	; 51
     452:	8d 7f       	andi	r24, 0xFD	; 253
     454:	83 bf       	out	0x33, r24	; 51
     456:	83 b7       	in	r24, 0x33	; 51
     458:	8b 7f       	andi	r24, 0xFB	; 251
     45a:	83 bf       	out	0x33, r24	; 51
     45c:	08 95       	ret

0000045e <__vector_11>:
     45e:	1f 92       	push	r1
     460:	0f 92       	push	r0
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	0f 92       	push	r0
     466:	11 24       	eor	r1, r1
     468:	2f 93       	push	r18
     46a:	3f 93       	push	r19
     46c:	4f 93       	push	r20
     46e:	5f 93       	push	r21
     470:	6f 93       	push	r22
     472:	7f 93       	push	r23
     474:	8f 93       	push	r24
     476:	9f 93       	push	r25
     478:	af 93       	push	r26
     47a:	bf 93       	push	r27
     47c:	ef 93       	push	r30
     47e:	ff 93       	push	r31
     480:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <overflowCounter.1709>
     484:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <overflowCounter.1709+0x1>
     488:	a0 91 fa 00 	lds	r26, 0x00FA	; 0x8000fa <overflowCounter.1709+0x2>
     48c:	b0 91 fb 00 	lds	r27, 0x00FB	; 0x8000fb <overflowCounter.1709+0x3>
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	a1 1d       	adc	r26, r1
     494:	b1 1d       	adc	r27, r1
     496:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <overflowCounter.1709>
     49a:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <overflowCounter.1709+0x1>
     49e:	a0 93 fa 00 	sts	0x00FA, r26	; 0x8000fa <overflowCounter.1709+0x2>
     4a2:	b0 93 fb 00 	sts	0x00FB, r27	; 0x8000fb <overflowCounter.1709+0x3>
     4a6:	40 91 fc 00 	lds	r20, 0x00FC	; 0x8000fc <PRV_u16CounterVal>
     4aa:	50 91 fd 00 	lds	r21, 0x00FD	; 0x8000fd <PRV_u16CounterVal+0x1>
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	84 17       	cp	r24, r20
     4b4:	95 07       	cpc	r25, r21
     4b6:	a6 07       	cpc	r26, r22
     4b8:	b7 07       	cpc	r27, r23
     4ba:	78 f0       	brcs	.+30     	; 0x4da <__vector_11+0x7c>
     4bc:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <overflowCounter.1709>
     4c0:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <overflowCounter.1709+0x1>
     4c4:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <overflowCounter.1709+0x2>
     4c8:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <overflowCounter.1709+0x3>
     4cc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <PRV_ptrFuncCallBack_OVF>
     4d0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <PRV_ptrFuncCallBack_OVF+0x1>
     4d4:	30 97       	sbiw	r30, 0x00	; 0
     4d6:	09 f0       	breq	.+2      	; 0x4da <__vector_11+0x7c>
     4d8:	09 95       	icall
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	0f 90       	pop	r0
     4f8:	1f 90       	pop	r1
     4fa:	18 95       	reti

000004fc <__vector_10>:
     4fc:	1f 92       	push	r1
     4fe:	0f 92       	push	r0
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	2f 93       	push	r18
     508:	3f 93       	push	r19
     50a:	4f 93       	push	r20
     50c:	5f 93       	push	r21
     50e:	6f 93       	push	r22
     510:	7f 93       	push	r23
     512:	8f 93       	push	r24
     514:	9f 93       	push	r25
     516:	af 93       	push	r26
     518:	bf 93       	push	r27
     51a:	ef 93       	push	r30
     51c:	ff 93       	push	r31
     51e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
     522:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__data_end+0x1>
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <__data_end+0x1>
     52c:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
     530:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <PRV_u16CounterVal>
     534:	30 91 fd 00 	lds	r19, 0x00FD	; 0x8000fd <PRV_u16CounterVal+0x1>
     538:	82 17       	cp	r24, r18
     53a:	93 07       	cpc	r25, r19
     53c:	58 f0       	brcs	.+22     	; 0x554 <__vector_10+0x58>
     53e:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__data_end+0x1>
     542:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__data_end>
     546:	e0 91 fe 00 	lds	r30, 0x00FE	; 0x8000fe <PRV_ptrFuncCallBack_CTC>
     54a:	f0 91 ff 00 	lds	r31, 0x00FF	; 0x8000ff <PRV_ptrFuncCallBack_CTC+0x1>
     54e:	30 97       	sbiw	r30, 0x00	; 0
     550:	09 f0       	breq	.+2      	; 0x554 <__vector_10+0x58>
     552:	09 95       	icall
     554:	ff 91       	pop	r31
     556:	ef 91       	pop	r30
     558:	bf 91       	pop	r27
     55a:	af 91       	pop	r26
     55c:	9f 91       	pop	r25
     55e:	8f 91       	pop	r24
     560:	7f 91       	pop	r23
     562:	6f 91       	pop	r22
     564:	5f 91       	pop	r21
     566:	4f 91       	pop	r20
     568:	3f 91       	pop	r19
     56a:	2f 91       	pop	r18
     56c:	0f 90       	pop	r0
     56e:	0f be       	out	0x3f, r0	; 63
     570:	0f 90       	pop	r0
     572:	1f 90       	pop	r1
     574:	18 95       	reti

00000576 <L293D_init>:
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <TMR0_init>
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	63 e0       	ldi	r22, 0x03	; 3
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     58a:	41 e0       	ldi	r20, 0x01	; 1
     58c:	64 e0       	ldi	r22, 0x04	; 4
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     594:	41 e0       	ldi	r20, 0x01	; 1
     596:	65 e0       	ldi	r22, 0x05	; 5
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     59e:	41 e0       	ldi	r20, 0x01	; 1
     5a0:	66 e0       	ldi	r22, 0x06	; 6
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     5a8:	41 e0       	ldi	r20, 0x01	; 1
     5aa:	67 e0       	ldi	r22, 0x07	; 7
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     5b2:	41 e0       	ldi	r20, 0x01	; 1
     5b4:	62 e0       	ldi	r22, 0x02	; 2
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     5bc:	41 e0       	ldi	r20, 0x01	; 1
     5be:	62 e0       	ldi	r22, 0x02	; 2
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     5c6:	41 e0       	ldi	r20, 0x01	; 1
     5c8:	66 e0       	ldi	r22, 0x06	; 6
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     5d0:	41 e0       	ldi	r20, 0x01	; 1
     5d2:	63 e0       	ldi	r22, 0x03	; 3
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     5da:	08 95       	ret

000005dc <Motors_forward>:
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	0e 94 00 02 	call	0x400	; 0x400 <TMR0_generatePWM>
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	63 e0       	ldi	r22, 0x03	; 3
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	64 e0       	ldi	r22, 0x04	; 4
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	65 e0       	ldi	r22, 0x05	; 5
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     602:	41 e0       	ldi	r20, 0x01	; 1
     604:	66 e0       	ldi	r22, 0x06	; 6
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	67 e0       	ldi	r22, 0x07	; 7
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     616:	41 e0       	ldi	r20, 0x01	; 1
     618:	62 e0       	ldi	r22, 0x02	; 2
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	62 e0       	ldi	r22, 0x02	; 2
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     62a:	41 e0       	ldi	r20, 0x01	; 1
     62c:	66 e0       	ldi	r22, 0x06	; 6
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     634:	08 95       	ret

00000636 <Motors_left>:
     636:	40 e0       	ldi	r20, 0x00	; 0
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	0e 94 00 02 	call	0x400	; 0x400 <TMR0_generatePWM>
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	67 e0       	ldi	r22, 0x07	; 7
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     648:	41 e0       	ldi	r20, 0x01	; 1
     64a:	62 e0       	ldi	r22, 0x02	; 2
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     652:	41 e0       	ldi	r20, 0x01	; 1
     654:	63 e0       	ldi	r22, 0x03	; 3
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	64 e0       	ldi	r22, 0x04	; 4
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	62 e0       	ldi	r22, 0x02	; 2
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	66 e0       	ldi	r22, 0x06	; 6
     674:	83 e0       	ldi	r24, 0x03	; 3
     676:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	65 e0       	ldi	r22, 0x05	; 5
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	66 e0       	ldi	r22, 0x06	; 6
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     68e:	08 95       	ret

00000690 <Motors_right>:
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	0e 94 00 02 	call	0x400	; 0x400 <TMR0_generatePWM>
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	63 e0       	ldi	r22, 0x03	; 3
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	64 e0       	ldi	r22, 0x04	; 4
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	67 e0       	ldi	r22, 0x07	; 7
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	62 e0       	ldi	r22, 0x02	; 2
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	65 e0       	ldi	r22, 0x05	; 5
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	66 e0       	ldi	r22, 0x06	; 6
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	62 e0       	ldi	r22, 0x02	; 2
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	66 e0       	ldi	r22, 0x06	; 6
     6e2:	83 e0       	ldi	r24, 0x03	; 3
     6e4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6e8:	08 95       	ret

000006ea <Motors_off>:
     6ea:	0e 94 25 02 	call	0x44a	; 0x44a <TMR0_stop>
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	63 e0       	ldi	r22, 0x03	; 3
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     6f8:	40 e0       	ldi	r20, 0x00	; 0
     6fa:	64 e0       	ldi	r22, 0x04	; 4
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	65 e0       	ldi	r22, 0x05	; 5
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	66 e0       	ldi	r22, 0x06	; 6
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	67 e0       	ldi	r22, 0x07	; 7
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	62 e0       	ldi	r22, 0x02	; 2
     724:	83 e0       	ldi	r24, 0x03	; 3
     726:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	62 e0       	ldi	r22, 0x02	; 2
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	66 e0       	ldi	r22, 0x06	; 6
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     73e:	08 95       	ret

00000740 <TCRT_init>:
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	62 e0       	ldi	r22, 0x02	; 2
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	67 e0       	ldi	r22, 0x07	; 7
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	63 e0       	ldi	r22, 0x03	; 3
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	66 e0       	ldi	r22, 0x06	; 6
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     768:	40 e0       	ldi	r20, 0x00	; 0
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	65 e0       	ldi	r22, 0x05	; 5
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     77c:	08 95       	ret

0000077e <TCRT_getDigitalVal>:

void TCRT_getDigitalVal(u8 copy_u8SensorPosition, u8 *copy_u8State) {
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	eb 01       	movw	r28, r22
	// Reading state of the Digital value of sensors
	switch (copy_u8SensorPosition) {
     784:	81 30       	cpi	r24, 0x01	; 1
     786:	81 f0       	breq	.+32     	; 0x7a8 <TCRT_getDigitalVal+0x2a>
     788:	18 f0       	brcs	.+6      	; 0x790 <TCRT_getDigitalVal+0x12>
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	39 f0       	breq	.+14     	; 0x79c <TCRT_getDigitalVal+0x1e>
     78e:	11 c0       	rjmp	.+34     	; 0x7b2 <TCRT_getDigitalVal+0x34>
		case CENTER_SENSOR:
		*copy_u8State = DIO_readPinVal(TCRT_CENTER_PORT, TCRT_CENTER_PIN);
     790:	65 e0       	ldi	r22, 0x05	; 5
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_readPinVal>
     798:	88 83       	st	Y, r24
		break;
     79a:	0b c0       	rjmp	.+22     	; 0x7b2 <TCRT_getDigitalVal+0x34>
		case LEFT_SENSOR:
		*copy_u8State = DIO_readPinVal(TCRT_LEFT_PORT, TCRT_LEFT_PIN);
     79c:	67 e0       	ldi	r22, 0x07	; 7
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_readPinVal>
     7a4:	88 83       	st	Y, r24
		break;
     7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <TCRT_getDigitalVal+0x34>
		case RIGHT_SENSOR:
		*copy_u8State = DIO_readPinVal(TCRT_RIGHT_PORT, TCRT_RIGHT_PIN);
     7a8:	66 e0       	ldi	r22, 0x06	; 6
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_readPinVal>
     7b0:	88 83       	st	Y, r24
		break;
		default: // Add error state
		break;
	}
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <AUTOV_init>:
*/

// Function to initialize pins connected, modules, and peripherals.
void AUTOV_init(void) {
	// Calling function to setup L293D module board functions
	L293D_init();
     7b8:	0e 94 bb 02 	call	0x576	; 0x576 <L293D_init>
	// Calling initialization of HC-SR04 ultrasonic sensor
	HCSR04_init();
     7bc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HCSR04_init>
	// Initializing Servo motor
	SG90_init();
     7c0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <SG90_init>
	// Start ADC peripheral
	/*ADC_init(ADC_REFERENCE_AVCC);*/
	// Initializing all pins of the Infrared tracking sensors
	TCRT_init();
     7c4:	0e 94 a0 03 	call	0x740	; 0x740 <TCRT_init>
	// Global interrupts
	GIE_enable();
     7c8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <GIE_enable>
	// LCD initialize
	LCD_init();
     7cc:	0e 94 b0 05 	call	0xb60	; 0xb60 <LCD_init>
	
	// Loading start robot
	LCD_clear();
     7d0:	0e 94 1a 06 	call	0xc34	; 0xc34 <LCD_clear>
	LCD_displayString((u8*) "Starting.");
     7d4:	88 e7       	ldi	r24, 0x78	; 120
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	89 ef       	ldi	r24, 0xF9	; 249
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	21 50       	subi	r18, 0x01	; 1
     7e4:	80 40       	sbci	r24, 0x00	; 0
     7e6:	90 40       	sbci	r25, 0x00	; 0
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <AUTOV_init+0x2a>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <AUTOV_init+0x34>
     7ec:	00 00       	nop
	_delay_ms(20);
	LCD_displayString((u8*)".");
     7ee:	88 ed       	ldi	r24, 0xD8	; 216
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
     7f6:	2f ef       	ldi	r18, 0xFF	; 255
     7f8:	89 ef       	ldi	r24, 0xF9	; 249
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	21 50       	subi	r18, 0x01	; 1
     7fe:	80 40       	sbci	r24, 0x00	; 0
     800:	90 40       	sbci	r25, 0x00	; 0
     802:	e1 f7       	brne	.-8      	; 0x7fc <AUTOV_init+0x44>
     804:	00 c0       	rjmp	.+0      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     806:	00 00       	nop
	_delay_ms(20);
	LCD_displayString((u8*)".");
     808:	88 ed       	ldi	r24, 0xD8	; 216
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
     810:	2f ef       	ldi	r18, 0xFF	; 255
     812:	89 ef       	ldi	r24, 0xF9	; 249
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	21 50       	subi	r18, 0x01	; 1
     818:	80 40       	sbci	r24, 0x00	; 0
     81a:	90 40       	sbci	r25, 0x00	; 0
     81c:	e1 f7       	brne	.-8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     820:	00 00       	nop
	_delay_ms(20);
	LCD_displayString((u8*)".");
     822:	88 ed       	ldi	r24, 0xD8	; 216
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
     82a:	2f ef       	ldi	r18, 0xFF	; 255
     82c:	89 ef       	ldi	r24, 0xF9	; 249
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	21 50       	subi	r18, 0x01	; 1
     832:	80 40       	sbci	r24, 0x00	; 0
     834:	90 40       	sbci	r25, 0x00	; 0
     836:	e1 f7       	brne	.-8      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     838:	00 c0       	rjmp	.+0      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     83a:	00 00       	nop
	_delay_ms(20);
	LCD_displayString((u8*)".!");
     83c:	82 e8       	ldi	r24, 0x82	; 130
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
	
	// Initialize Buzzer connection
	DIO_setPinDirection(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT);
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	67 e0       	ldi	r22, 0x07	; 7
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     84e:	08 95       	ret

00000850 <AUTOV_lineFollowing>:
}

// Main line following function, this function simply follows the line on ground by reading
// output of 3 TCRT sensors and constantly checking for obstacles using the Ultrasonic sensor
// And taking the appropriate action should an obstacle appear
void AUTOV_lineFollowing(void) {
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <AUTOV_lineFollowing+0x6>
     856:	1f 92       	push	r1
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
	// Sensor variables
	u8 local_u8CenterState = 0, local_u8LeftState = 0, local_u8RightState = 0;
     85c:	19 82       	std	Y+1, r1	; 0x01
     85e:	1a 82       	std	Y+2, r1	; 0x02
     860:	1b 82       	std	Y+3, r1	; 0x03
	
	// Error Variable
	u8 local_u8ErrVar = 0;
	
	// Checking for TCRT sensor values digital readings
	TCRT_getDigitalVal(RIGHT_SENSOR, &local_u8RightState);
     862:	be 01       	movw	r22, r28
     864:	6d 5f       	subi	r22, 0xFD	; 253
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	0e 94 bf 03 	call	0x77e	; 0x77e <TCRT_getDigitalVal>
	TCRT_getDigitalVal(CENTER_SENSOR, &local_u8CenterState);
     86e:	be 01       	movw	r22, r28
     870:	6f 5f       	subi	r22, 0xFF	; 255
     872:	7f 4f       	sbci	r23, 0xFF	; 255
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	0e 94 bf 03 	call	0x77e	; 0x77e <TCRT_getDigitalVal>
	TCRT_getDigitalVal(LEFT_SENSOR, &local_u8LeftState);
     87a:	be 01       	movw	r22, r28
     87c:	6e 5f       	subi	r22, 0xFE	; 254
     87e:	7f 4f       	sbci	r23, 0xFF	; 255
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	0e 94 bf 03 	call	0x77e	; 0x77e <TCRT_getDigitalVal>
	LCD_moveCursor(1, 0);
	LCD_displayNumber(local_f32DistMeasured, 2);
	_delay_ms(400);*/
	
	// Main Line following conditions
	if (local_u8RightState == RIGHT_LOW && local_u8LeftState == LEFT_LOW) {
     886:	8b 81       	ldd	r24, Y+3	; 0x03
     888:	81 11       	cpse	r24, r1
     88a:	21 c0       	rjmp	.+66     	; 0x8ce <__stack+0x6f>
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	91 11       	cpse	r25, r1
     890:	1e c0       	rjmp	.+60     	; 0x8ce <__stack+0x6f>
		Motors_forward(FULL_SPEED);
     892:	84 e6       	ldi	r24, 0x64	; 100
     894:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Motors_forward>
		LCD_clear(); 
     898:	0e 94 1a 06 	call	0xc34	; 0xc34 <LCD_clear>
		LCD_displayString((u8*) "Direction: ");
     89c:	85 e8       	ldi	r24, 0x85	; 133
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
		LCD_moveCursor(1, 0);
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_moveCursor>
		LCD_displayString((u8*) "Forward ");
     8b0:	81 e9       	ldi	r24, 0x91	; 145
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
		LCD_createAndDisplayChar(0, arrowUP, 1, 9);
     8b8:	29 e0       	ldi	r18, 0x09	; 9
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	41 e0       	ldi	r20, 0x01	; 1
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e7       	ldi	r22, 0x70	; 112
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <LCD_createAndDisplayChar>
	LCD_moveCursor(1, 0);
	LCD_displayNumber(local_f32DistMeasured, 2);
	_delay_ms(400);*/
	
	// Main Line following conditions
	if (local_u8RightState == RIGHT_LOW && local_u8LeftState == LEFT_LOW) {
     8cc:	58 c0       	rjmp	.+176    	; 0x97e <__stack+0x11f>
		LCD_displayString((u8*) "Direction: ");
		LCD_moveCursor(1, 0);
		LCD_displayString((u8*) "Forward ");
		LCD_createAndDisplayChar(0, arrowUP, 1, 9);
	}
	else if (local_u8RightState == RIGHT_HIGH && local_u8LeftState == LEFT_LOW) {
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	09 f5       	brne	.+66     	; 0x914 <__stack+0xb5>
     8d2:	9a 81       	ldd	r25, Y+2	; 0x02
     8d4:	91 11       	cpse	r25, r1
     8d6:	1e c0       	rjmp	.+60     	; 0x914 <__stack+0xb5>
		Motors_right(FULL_SPEED);
     8d8:	84 e6       	ldi	r24, 0x64	; 100
     8da:	0e 94 48 03 	call	0x690	; 0x690 <Motors_right>
		LCD_clear();
     8de:	0e 94 1a 06 	call	0xc34	; 0xc34 <LCD_clear>
		LCD_displayString((u8*) "Direction: ");
     8e2:	85 e8       	ldi	r24, 0x85	; 133
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
		LCD_moveCursor(1, 0);
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_moveCursor>
		LCD_displayString((u8*) "Right ");
     8f6:	8a e9       	ldi	r24, 0x9A	; 154
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
		LCD_createAndDisplayChar(1, arrowRIGHT, 1, 7);
     8fe:	27 e0       	ldi	r18, 0x07	; 7
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	41 e0       	ldi	r20, 0x01	; 1
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	68 e6       	ldi	r22, 0x68	; 104
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <LCD_createAndDisplayChar>
		LCD_displayString((u8*) "Direction: ");
		LCD_moveCursor(1, 0);
		LCD_displayString((u8*) "Forward ");
		LCD_createAndDisplayChar(0, arrowUP, 1, 9);
	}
	else if (local_u8RightState == RIGHT_HIGH && local_u8LeftState == LEFT_LOW) {
     912:	35 c0       	rjmp	.+106    	; 0x97e <__stack+0x11f>
		LCD_displayString((u8*) "Direction: ");
		LCD_moveCursor(1, 0);
		LCD_displayString((u8*) "Right ");
		LCD_createAndDisplayChar(1, arrowRIGHT, 1, 7);
	}
	else if (local_u8RightState == RIGHT_LOW && local_u8LeftState == LEFT_HIGH) {
     914:	81 11       	cpse	r24, r1
     916:	21 c0       	rjmp	.+66     	; 0x95a <__stack+0xfb>
     918:	8a 81       	ldd	r24, Y+2	; 0x02
     91a:	81 30       	cpi	r24, 0x01	; 1
     91c:	f1 f4       	brne	.+60     	; 0x95a <__stack+0xfb>
		Motors_left(FULL_SPEED);
     91e:	84 e6       	ldi	r24, 0x64	; 100
     920:	0e 94 1b 03 	call	0x636	; 0x636 <Motors_left>
		LCD_clear();
     924:	0e 94 1a 06 	call	0xc34	; 0xc34 <LCD_clear>
		LCD_displayString((u8*) "Direction: ");
     928:	85 e8       	ldi	r24, 0x85	; 133
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
		LCD_moveCursor(1, 0);
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_moveCursor>
		LCD_displayString((u8*) "Left ");
     93c:	81 ea       	ldi	r24, 0xA1	; 161
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
		LCD_createAndDisplayChar(1, arrowLEFT, 1, 6);
     944:	26 e0       	ldi	r18, 0x06	; 6
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	41 e0       	ldi	r20, 0x01	; 1
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	60 e6       	ldi	r22, 0x60	; 96
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 2e 06 	call	0xc5c	; 0xc5c <LCD_createAndDisplayChar>
		LCD_displayString((u8*) "Direction: ");
		LCD_moveCursor(1, 0);
		LCD_displayString((u8*) "Right ");
		LCD_createAndDisplayChar(1, arrowRIGHT, 1, 7);
	}
	else if (local_u8RightState == RIGHT_LOW && local_u8LeftState == LEFT_HIGH) {
     958:	12 c0       	rjmp	.+36     	; 0x97e <__stack+0x11f>
		LCD_displayString((u8*) "Left ");
		LCD_createAndDisplayChar(1, arrowLEFT, 1, 6);
	}
	else {
		local_u8ErrVar = 1; // Error in reading sensor values
		Motors_off();
     95a:	0e 94 75 03 	call	0x6ea	; 0x6ea <Motors_off>
		LCD_clear();
     95e:	0e 94 1a 06 	call	0xc34	; 0xc34 <LCD_clear>
		LCD_displayString((u8*) "Error type 1");
     962:	87 ea       	ldi	r24, 0xA7	; 167
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
		LCD_moveCursor(1, 0);
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_moveCursor>
		LCD_displayString((u8*) "Reading sensors");
     976:	84 eb       	ldi	r24, 0xB4	; 180
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
		}
}
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	08 95       	ret

0000098a <AUTOV_buzzerAlarm>:

void AUTOV_buzzerAlarm(void) {
	// Generating a tone for the buzzer
	DIO_setPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT_HIGH);
     98a:	41 e0       	ldi	r20, 0x01	; 1
     98c:	67 e0       	ldi	r22, 0x07	; 7
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	81 ee       	ldi	r24, 0xE1	; 225
     998:	94 e0       	ldi	r25, 0x04	; 4
     99a:	21 50       	subi	r18, 0x01	; 1
     99c:	80 40       	sbci	r24, 0x00	; 0
     99e:	90 40       	sbci	r25, 0x00	; 0
     9a0:	e1 f7       	brne	.-8      	; 0x99a <AUTOV_buzzerAlarm+0x10>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <AUTOV_buzzerAlarm+0x1a>
     9a4:	00 00       	nop
	_delay_ms(100);
	DIO_setPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT_LOW);
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	67 e0       	ldi	r22, 0x07	; 7
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
     9b2:	81 ee       	ldi	r24, 0xE1	; 225
     9b4:	94 e0       	ldi	r25, 0x04	; 4
     9b6:	21 50       	subi	r18, 0x01	; 1
     9b8:	80 40       	sbci	r24, 0x00	; 0
     9ba:	90 40       	sbci	r25, 0x00	; 0
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <AUTOV_buzzerAlarm+0x2c>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <AUTOV_buzzerAlarm+0x36>
     9c0:	00 00       	nop
	_delay_ms(100);
	DIO_setPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT_HIGH);
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	67 e0       	ldi	r22, 0x07	; 7
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     9cc:	2f ef       	ldi	r18, 0xFF	; 255
     9ce:	81 ee       	ldi	r24, 0xE1	; 225
     9d0:	94 e0       	ldi	r25, 0x04	; 4
     9d2:	21 50       	subi	r18, 0x01	; 1
     9d4:	80 40       	sbci	r24, 0x00	; 0
     9d6:	90 40       	sbci	r25, 0x00	; 0
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <AUTOV_buzzerAlarm+0x48>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <AUTOV_buzzerAlarm+0x52>
     9dc:	00 00       	nop
	_delay_ms(100);
	DIO_setPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT_LOW);
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	67 e0       	ldi	r22, 0x07	; 7
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     9e8:	2f ef       	ldi	r18, 0xFF	; 255
     9ea:	81 ee       	ldi	r24, 0xE1	; 225
     9ec:	94 e0       	ldi	r25, 0x04	; 4
     9ee:	21 50       	subi	r18, 0x01	; 1
     9f0:	80 40       	sbci	r24, 0x00	; 0
     9f2:	90 40       	sbci	r25, 0x00	; 0
     9f4:	e1 f7       	brne	.-8      	; 0x9ee <AUTOV_buzzerAlarm+0x64>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <AUTOV_buzzerAlarm+0x6e>
     9f8:	00 00       	nop
	_delay_ms(100);
	DIO_setPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT_HIGH);
     9fa:	41 e0       	ldi	r20, 0x01	; 1
     9fc:	67 e0       	ldi	r22, 0x07	; 7
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     a04:	2f ef       	ldi	r18, 0xFF	; 255
     a06:	81 ee       	ldi	r24, 0xE1	; 225
     a08:	94 e0       	ldi	r25, 0x04	; 4
     a0a:	21 50       	subi	r18, 0x01	; 1
     a0c:	80 40       	sbci	r24, 0x00	; 0
     a0e:	90 40       	sbci	r25, 0x00	; 0
     a10:	e1 f7       	brne	.-8      	; 0xa0a <AUTOV_buzzerAlarm+0x80>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <AUTOV_buzzerAlarm+0x8a>
     a14:	00 00       	nop
	_delay_ms(100);
	DIO_setPinVal(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT_LOW);	
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	67 e0       	ldi	r22, 0x07	; 7
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     a20:	08 95       	ret

00000a22 <AUTOV_obstacleAvoidance>:
// This is the second main function of the Autonomous vehicle where if an obstacle is detected
// at less than 30cm, it is activated. This function checks the right direction and left direction
// And if both are clear, then the Autonomous robot is free to swerve at any direction then return back on track
void AUTOV_obstacleAvoidance(void) {
	// Turning off motors
	Motors_off();
     a22:	0e 94 75 03 	call	0x6ea	; 0x6ea <Motors_off>
	
	// Display warning on screen
	LCD_clear();
     a26:	0e 94 1a 06 	call	0xc34	; 0xc34 <LCD_clear>
	LCD_displayString((u8*) "Obstacle is");
     a2a:	84 ec       	ldi	r24, 0xC4	; 196
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
	LCD_moveCursor(1, 0);
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_moveCursor>
	LCD_displayString((u8*) "detected.");
     a3e:	80 ed       	ldi	r24, 0xD0	; 208
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
     a46:	2f ef       	ldi	r18, 0xFF	; 255
     a48:	88 ef       	ldi	r24, 0xF8	; 248
     a4a:	95 e1       	ldi	r25, 0x15	; 21
     a4c:	21 50       	subi	r18, 0x01	; 1
     a4e:	80 40       	sbci	r24, 0x00	; 0
     a50:	90 40       	sbci	r25, 0x00	; 0
     a52:	e1 f7       	brne	.-8      	; 0xa4c <AUTOV_obstacleAvoidance+0x2a>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <AUTOV_obstacleAvoidance+0x34>
     a56:	00 00       	nop
	_delay_ms(450);
	LCD_clear();
     a58:	0e 94 1a 06 	call	0xc34	; 0xc34 <LCD_clear>
	LCD_displayString((u8*) "Please remove");
     a5c:	8a ed       	ldi	r24, 0xDA	; 218
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
	LCD_moveCursor(1, 0);
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_moveCursor>
	LCD_displayString((u8*) "the obstacle");
     a70:	88 ee       	ldi	r24, 0xE8	; 232
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_displayString>
     a78:	2f ef       	ldi	r18, 0xFF	; 255
     a7a:	84 e3       	ldi	r24, 0x34	; 52
     a7c:	9c e0       	ldi	r25, 0x0C	; 12
     a7e:	21 50       	subi	r18, 0x01	; 1
     a80:	80 40       	sbci	r24, 0x00	; 0
     a82:	90 40       	sbci	r25, 0x00	; 0
     a84:	e1 f7       	brne	.-8      	; 0xa7e <AUTOV_obstacleAvoidance+0x5c>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <AUTOV_obstacleAvoidance+0x66>
     a88:	00 00       	nop
	_delay_ms(250);
	
	// Sound off buzzer as an alarm sound
	AUTOV_buzzerAlarm();
     a8a:	0e 94 c5 04 	call	0x98a	; 0x98a <AUTOV_buzzerAlarm>
     a8e:	08 95       	ret

00000a90 <PRV_writeHalfPort>:
	// Map the angle to the corresponding pulse width
	// Pulse width range: 1ms (1000us) to 2ms (2000us)
	f32 local_f32PulseWidth = ((copy_u8Angle * 11.1) + 1000);

	// Set OCR1A for the desired pulse width
	OCR1A_u16_REG = START_PULSE + local_f32PulseWidth;
     a90:	cf 93       	push	r28
     a92:	c8 2f       	mov	r28, r24
     a94:	48 2f       	mov	r20, r24
     a96:	41 70       	andi	r20, 0x01	; 1
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     aa0:	c1 fb       	bst	r28, 1
     aa2:	44 27       	eor	r20, r20
     aa4:	40 f9       	bld	r20, 0
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	83 e0       	ldi	r24, 0x03	; 3
     aaa:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     aae:	c2 fb       	bst	r28, 2
     ab0:	44 27       	eor	r20, r20
     ab2:	40 f9       	bld	r20, 0
     ab4:	63 e0       	ldi	r22, 0x03	; 3
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     abc:	c3 fb       	bst	r28, 3
     abe:	44 27       	eor	r20, r20
     ac0:	40 f9       	bld	r20, 0
     ac2:	64 e0       	ldi	r22, 0x04	; 4
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     aca:	cf 91       	pop	r28
     acc:	08 95       	ret

00000ace <PRV_enableTriggerWrite>:
     ace:	41 e0       	ldi	r20, 0x01	; 1
     ad0:	62 e0       	ldi	r22, 0x02	; 2
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     ad8:	8f e9       	ldi	r24, 0x9F	; 159
     ada:	9f e0       	ldi	r25, 0x0F	; 15
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <PRV_enableTriggerWrite+0xe>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <PRV_enableTriggerWrite+0x14>
     ae2:	00 00       	nop
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	62 e0       	ldi	r22, 0x02	; 2
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     aee:	08 95       	ret

00000af0 <GIE_enable>:
     af0:	8f b7       	in	r24, 0x3f	; 63
     af2:	80 68       	ori	r24, 0x80	; 128
     af4:	8f bf       	out	0x3f, r24	; 63
     af6:	08 95       	ret

00000af8 <LCD_displayChar>:
     af8:	cf 93       	push	r28
     afa:	c8 2f       	mov	r28, r24
     afc:	41 e0       	ldi	r20, 0x01	; 1
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     b10:	8c 2f       	mov	r24, r28
     b12:	82 95       	swap	r24
     b14:	8f 70       	andi	r24, 0x0F	; 15
     b16:	0e 94 48 05 	call	0xa90	; 0xa90 <PRV_writeHalfPort>
     b1a:	0e 94 67 05 	call	0xace	; 0xace <PRV_enableTriggerWrite>
     b1e:	8c 2f       	mov	r24, r28
     b20:	0e 94 48 05 	call	0xa90	; 0xa90 <PRV_writeHalfPort>
     b24:	0e 94 67 05 	call	0xace	; 0xace <PRV_enableTriggerWrite>
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <LCD_sendCommand>:
     b2c:	cf 93       	push	r28
     b2e:	c8 2f       	mov	r28, r24
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     b44:	8c 2f       	mov	r24, r28
     b46:	82 95       	swap	r24
     b48:	8f 70       	andi	r24, 0x0F	; 15
     b4a:	0e 94 48 05 	call	0xa90	; 0xa90 <PRV_writeHalfPort>
     b4e:	0e 94 67 05 	call	0xace	; 0xace <PRV_enableTriggerWrite>
     b52:	8c 2f       	mov	r24, r28
     b54:	0e 94 48 05 	call	0xa90	; 0xa90 <PRV_writeHalfPort>
     b58:	0e 94 67 05 	call	0xace	; 0xace <PRV_enableTriggerWrite>
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <LCD_init>:
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	62 e0       	ldi	r22, 0x02	; 2
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     b88:	41 e0       	ldi	r20, 0x01	; 1
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	63 e0       	ldi	r22, 0x03	; 3
     b96:	83 e0       	ldi	r24, 0x03	; 3
     b98:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     b9c:	41 e0       	ldi	r20, 0x01	; 1
     b9e:	64 e0       	ldi	r22, 0x04	; 4
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     ba6:	2f e7       	ldi	r18, 0x7F	; 127
     ba8:	85 eb       	ldi	r24, 0xB5	; 181
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	21 50       	subi	r18, 0x01	; 1
     bae:	80 40       	sbci	r24, 0x00	; 0
     bb0:	90 40       	sbci	r25, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <LCD_init+0x4c>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <LCD_init+0x56>
     bb6:	00 00       	nop
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	0e 94 48 05 	call	0xa90	; 0xa90 <PRV_writeHalfPort>
     bd2:	0e 94 67 05 	call	0xace	; 0xace <PRV_enableTriggerWrite>
     bd6:	88 e2       	ldi	r24, 0x28	; 40
     bd8:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_sendCommand>
     bdc:	20 ef       	ldi	r18, 0xF0	; 240
     bde:	2a 95       	dec	r18
     be0:	f1 f7       	brne	.-4      	; 0xbde <LCD_init+0x7e>
     be2:	8f e0       	ldi	r24, 0x0F	; 15
     be4:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_sendCommand>
     be8:	80 ef       	ldi	r24, 0xF0	; 240
     bea:	8a 95       	dec	r24
     bec:	f1 f7       	brne	.-4      	; 0xbea <LCD_init+0x8a>
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_sendCommand>
     bf4:	8f e3       	ldi	r24, 0x3F	; 63
     bf6:	9f e1       	ldi	r25, 0x1F	; 31
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <LCD_init+0x98>
     bfc:	00 c0       	rjmp	.+0      	; 0xbfe <LCD_init+0x9e>
     bfe:	00 00       	nop
     c00:	86 e0       	ldi	r24, 0x06	; 6
     c02:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_sendCommand>
     c06:	08 95       	ret

00000c08 <LCD_displayString>:
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	cf 93       	push	r28
     c0e:	00 97       	sbiw	r24, 0x00	; 0
     c10:	29 f4       	brne	.+10     	; 0xc1c <LCD_displayString+0x14>
     c12:	0c c0       	rjmp	.+24     	; 0xc2c <LCD_displayString+0x24>
     c14:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LCD_displayChar>
     c18:	cf 5f       	subi	r28, 0xFF	; 255
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <LCD_displayString+0x18>
     c1c:	8c 01       	movw	r16, r24
     c1e:	c0 e0       	ldi	r28, 0x00	; 0
     c20:	f8 01       	movw	r30, r16
     c22:	ec 0f       	add	r30, r28
     c24:	f1 1d       	adc	r31, r1
     c26:	80 81       	ld	r24, Z
     c28:	81 11       	cpse	r24, r1
     c2a:	f4 cf       	rjmp	.-24     	; 0xc14 <LCD_displayString+0xc>
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	08 95       	ret

00000c34 <LCD_clear>:
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_sendCommand>
     c3a:	8f e3       	ldi	r24, 0x3F	; 63
     c3c:	9f e1       	ldi	r25, 0x1F	; 31
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <LCD_clear+0xa>
     c42:	00 c0       	rjmp	.+0      	; 0xc44 <LCD_clear+0x10>
     c44:	00 00       	nop
     c46:	08 95       	ret

00000c48 <LCD_moveCursor>:
     c48:	88 23       	and	r24, r24
     c4a:	19 f0       	breq	.+6      	; 0xc52 <LCD_moveCursor+0xa>
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	29 f4       	brne	.+10     	; 0xc5a <LCD_moveCursor+0x12>
     c50:	60 5c       	subi	r22, 0xC0	; 192
     c52:	86 2f       	mov	r24, r22
     c54:	80 68       	ori	r24, 0x80	; 128
     c56:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_sendCommand>
     c5a:	08 95       	ret

00000c5c <LCD_createAndDisplayChar>:
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	8b 01       	movw	r16, r22
     c6a:	e4 2e       	mov	r14, r20
     c6c:	d2 2f       	mov	r29, r18
     c6e:	87 70       	andi	r24, 0x07	; 7
     c70:	f8 2e       	mov	r15, r24
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	80 64       	ori	r24, 0x40	; 64
     c82:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_sendCommand>
     c86:	c0 e0       	ldi	r28, 0x00	; 0
     c88:	07 c0       	rjmp	.+14     	; 0xc98 <LCD_createAndDisplayChar+0x3c>
     c8a:	f8 01       	movw	r30, r16
     c8c:	ec 0f       	add	r30, r28
     c8e:	f1 1d       	adc	r31, r1
     c90:	80 81       	ld	r24, Z
     c92:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LCD_displayChar>
     c96:	cf 5f       	subi	r28, 0xFF	; 255
     c98:	c8 30       	cpi	r28, 0x08	; 8
     c9a:	b8 f3       	brcs	.-18     	; 0xc8a <LCD_createAndDisplayChar+0x2e>
     c9c:	ee 20       	and	r14, r14
     c9e:	21 f0       	breq	.+8      	; 0xca8 <LCD_createAndDisplayChar+0x4c>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	e8 16       	cp	r14, r24
     ca4:	21 f0       	breq	.+8      	; 0xcae <LCD_createAndDisplayChar+0x52>
     ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <LCD_createAndDisplayChar+0x58>
     ca8:	80 e8       	ldi	r24, 0x80	; 128
     caa:	8d 0f       	add	r24, r29
     cac:	05 c0       	rjmp	.+10     	; 0xcb8 <LCD_createAndDisplayChar+0x5c>
     cae:	80 ec       	ldi	r24, 0xC0	; 192
     cb0:	8d 0f       	add	r24, r29
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <LCD_createAndDisplayChar+0x5c>
     cb4:	80 e8       	ldi	r24, 0x80	; 128
     cb6:	8d 0f       	add	r24, r29
     cb8:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_sendCommand>
     cbc:	8f 2d       	mov	r24, r15
     cbe:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LCD_displayChar>
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	08 95       	ret

00000cd0 <HCSR04_init>:
     cd0:	41 e0       	ldi	r20, 0x01	; 1
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     ce4:	08 95       	ret

00000ce6 <HCSR04_trigger>:
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     cf0:	8a e0       	ldi	r24, 0x0A	; 10
     cf2:	8a 95       	dec	r24
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <HCSR04_trigger+0xc>
     cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <HCSR04_trigger+0x12>
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     d02:	85 e3       	ldi	r24, 0x35	; 53
     d04:	8a 95       	dec	r24
     d06:	f1 f7       	brne	.-4      	; 0xd04 <HCSR04_trigger+0x1e>
     d08:	00 00       	nop
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_setPinVal>
     d14:	08 95       	ret

00000d16 <HCSR04_getDistance>:
     d16:	cf 92       	push	r12
     d18:	df 92       	push	r13
     d1a:	ef 92       	push	r14
     d1c:	ff 92       	push	r15
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	ec 01       	movw	r28, r24
     d24:	0e 94 73 06 	call	0xce6	; 0xce6 <HCSR04_trigger>
     d28:	c1 2c       	mov	r12, r1
     d2a:	d1 2c       	mov	r13, r1
     d2c:	76 01       	movw	r14, r12
     d2e:	15 c0       	rjmp	.+42     	; 0xd5a <HCSR04_getDistance+0x44>
     d30:	8f ef       	ldi	r24, 0xFF	; 255
     d32:	c8 1a       	sub	r12, r24
     d34:	d8 0a       	sbc	r13, r24
     d36:	e8 0a       	sbc	r14, r24
     d38:	f8 0a       	sbc	r15, r24
     d3a:	81 e3       	ldi	r24, 0x31	; 49
     d3c:	c8 16       	cp	r12, r24
     d3e:	85 e7       	ldi	r24, 0x75	; 117
     d40:	d8 06       	cpc	r13, r24
     d42:	e1 04       	cpc	r14, r1
     d44:	f1 04       	cpc	r15, r1
     d46:	48 f0       	brcs	.+18     	; 0xd5a <HCSR04_getDistance+0x44>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e8       	ldi	r26, 0x80	; 128
     d4e:	bf eb       	ldi	r27, 0xBF	; 191
     d50:	88 83       	st	Y, r24
     d52:	99 83       	std	Y+1, r25	; 0x01
     d54:	aa 83       	std	Y+2, r26	; 0x02
     d56:	bb 83       	std	Y+3, r27	; 0x03
     d58:	2d c0       	rjmp	.+90     	; 0xdb4 <HCSR04_getDistance+0x9e>
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_readPinVal>
     d62:	88 23       	and	r24, r24
     d64:	29 f3       	breq	.-54     	; 0xd30 <HCSR04_getDistance+0x1a>
     d66:	c1 2c       	mov	r12, r1
     d68:	d1 2c       	mov	r13, r1
     d6a:	76 01       	movw	r14, r12
     d6c:	09 c0       	rjmp	.+18     	; 0xd80 <HCSR04_getDistance+0x6a>
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	c8 1a       	sub	r12, r24
     d72:	d8 0a       	sbc	r13, r24
     d74:	e8 0a       	sbc	r14, r24
     d76:	f8 0a       	sbc	r15, r24
     d78:	85 e0       	ldi	r24, 0x05	; 5
     d7a:	8a 95       	dec	r24
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <HCSR04_getDistance+0x64>
     d7e:	00 00       	nop
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_readPinVal>
     d88:	81 11       	cpse	r24, r1
     d8a:	f1 cf       	rjmp	.-30     	; 0xd6e <HCSR04_getDistance+0x58>
     d8c:	c7 01       	movw	r24, r14
     d8e:	b6 01       	movw	r22, r12
     d90:	0e 94 a0 08 	call	0x1140	; 0x1140 <__floatunsisf>
     d94:	28 e2       	ldi	r18, 0x28	; 40
     d96:	3e e7       	ldi	r19, 0x7E	; 126
     d98:	4c e0       	ldi	r20, 0x0C	; 12
     d9a:	5d e3       	ldi	r21, 0x3D	; 61
     d9c:	0e 94 57 09 	call	0x12ae	; 0x12ae <__mulsf3>
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e0       	ldi	r20, 0x00	; 0
     da6:	5f e3       	ldi	r21, 0x3F	; 63
     da8:	0e 94 57 09 	call	0x12ae	; 0x12ae <__mulsf3>
     dac:	68 83       	st	Y, r22
     dae:	79 83       	std	Y+1, r23	; 0x01
     db0:	8a 83       	std	Y+2, r24	; 0x02
     db2:	9b 83       	std	Y+3, r25	; 0x03
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	ff 90       	pop	r15
     dba:	ef 90       	pop	r14
     dbc:	df 90       	pop	r13
     dbe:	cf 90       	pop	r12
     dc0:	08 95       	ret

00000dc2 <HCSR04_getAverageDistance>:
     dc2:	4f 92       	push	r4
     dc4:	5f 92       	push	r5
     dc6:	6f 92       	push	r6
     dc8:	7f 92       	push	r7
     dca:	af 92       	push	r10
     dcc:	bf 92       	push	r11
     dce:	cf 92       	push	r12
     dd0:	df 92       	push	r13
     dd2:	ef 92       	push	r14
     dd4:	ff 92       	push	r15
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	00 d0       	rcall	.+0      	; 0xde0 <HCSR04_getAverageDistance+0x1e>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <HCSR04_getAverageDistance+0x20>
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	08 2f       	mov	r16, r24
     de8:	5b 01       	movw	r10, r22
     dea:	10 e0       	ldi	r17, 0x00	; 0
     dec:	41 2c       	mov	r4, r1
     dee:	51 2c       	mov	r5, r1
     df0:	32 01       	movw	r6, r4
     df2:	29 c0       	rjmp	.+82     	; 0xe46 <HCSR04_getAverageDistance+0x84>
     df4:	ce 01       	movw	r24, r28
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	0e 94 8b 06 	call	0xd16	; 0xd16 <HCSR04_getDistance>
     dfc:	c9 80       	ldd	r12, Y+1	; 0x01
     dfe:	da 80       	ldd	r13, Y+2	; 0x02
     e00:	eb 80       	ldd	r14, Y+3	; 0x03
     e02:	fc 80       	ldd	r15, Y+4	; 0x04
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	a9 01       	movw	r20, r18
     e0a:	c7 01       	movw	r24, r14
     e0c:	b6 01       	movw	r22, r12
     e0e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__gesf2>
     e12:	88 23       	and	r24, r24
     e14:	6c f0       	brlt	.+26     	; 0xe30 <HCSR04_getAverageDistance+0x6e>
     e16:	c3 01       	movw	r24, r6
     e18:	b2 01       	movw	r22, r4
     e1a:	0e 94 a0 08 	call	0x1140	; 0x1140 <__floatunsisf>
     e1e:	a7 01       	movw	r20, r14
     e20:	96 01       	movw	r18, r12
     e22:	0e 94 93 07 	call	0xf26	; 0xf26 <__addsf3>
     e26:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__fixunssfsi>
     e2a:	2b 01       	movw	r4, r22
     e2c:	3c 01       	movw	r6, r24
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <HCSR04_getAverageDistance+0x70>
     e30:	11 50       	subi	r17, 0x01	; 1
     e32:	2f ef       	ldi	r18, 0xFF	; 255
     e34:	8d ee       	ldi	r24, 0xED	; 237
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	21 50       	subi	r18, 0x01	; 1
     e3a:	80 40       	sbci	r24, 0x00	; 0
     e3c:	90 40       	sbci	r25, 0x00	; 0
     e3e:	e1 f7       	brne	.-8      	; 0xe38 <HCSR04_getAverageDistance+0x76>
     e40:	00 c0       	rjmp	.+0      	; 0xe42 <HCSR04_getAverageDistance+0x80>
     e42:	00 00       	nop
     e44:	1f 5f       	subi	r17, 0xFF	; 255
     e46:	10 17       	cp	r17, r16
     e48:	a8 f2       	brcs	.-86     	; 0xdf4 <HCSR04_getAverageDistance+0x32>
     e4a:	c3 01       	movw	r24, r6
     e4c:	b2 01       	movw	r22, r4
     e4e:	0e 94 a0 08 	call	0x1140	; 0x1140 <__floatunsisf>
     e52:	6b 01       	movw	r12, r22
     e54:	7c 01       	movw	r14, r24
     e56:	60 2f       	mov	r22, r16
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 a2 08 	call	0x1144	; 0x1144 <__floatsisf>
     e62:	9b 01       	movw	r18, r22
     e64:	ac 01       	movw	r20, r24
     e66:	c7 01       	movw	r24, r14
     e68:	b6 01       	movw	r22, r12
     e6a:	0e 94 ff 07 	call	0xffe	; 0xffe <__divsf3>
     e6e:	f5 01       	movw	r30, r10
     e70:	60 83       	st	Z, r22
     e72:	71 83       	std	Z+1, r23	; 0x01
     e74:	82 83       	std	Z+2, r24	; 0x02
     e76:	93 83       	std	Z+3, r25	; 0x03
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	df 90       	pop	r13
     e8e:	cf 90       	pop	r12
     e90:	bf 90       	pop	r11
     e92:	af 90       	pop	r10
     e94:	7f 90       	pop	r7
     e96:	6f 90       	pop	r6
     e98:	5f 90       	pop	r5
     e9a:	4f 90       	pop	r4
     e9c:	08 95       	ret

00000e9e <SG90_init>:
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	65 e0       	ldi	r22, 0x05	; 5
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
     ea8:	8f b5       	in	r24, 0x2f	; 47
     eaa:	82 60       	ori	r24, 0x02	; 2
     eac:	8f bd       	out	0x2f, r24	; 47
     eae:	8e b5       	in	r24, 0x2e	; 46
     eb0:	88 61       	ori	r24, 0x18	; 24
     eb2:	8e bd       	out	0x2e, r24	; 46
     eb4:	8f b5       	in	r24, 0x2f	; 47
     eb6:	80 68       	ori	r24, 0x80	; 128
     eb8:	8f bd       	out	0x2f, r24	; 47
     eba:	8f b5       	in	r24, 0x2f	; 47
     ebc:	8f 7b       	andi	r24, 0xBF	; 191
     ebe:	8f bd       	out	0x2f, r24	; 47
     ec0:	8e b5       	in	r24, 0x2e	; 46
     ec2:	82 60       	ori	r24, 0x02	; 2
     ec4:	8e bd       	out	0x2e, r24	; 46
     ec6:	8e b5       	in	r24, 0x2e	; 46
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
     eca:	8e bd       	out	0x2e, r24	; 46
     ecc:	8e b5       	in	r24, 0x2e	; 46
     ece:	8b 7f       	andi	r24, 0xFB	; 251
     ed0:	8e bd       	out	0x2e, r24	; 46
     ed2:	8f e3       	ldi	r24, 0x3F	; 63
     ed4:	9c e9       	ldi	r25, 0x9C	; 156
     ed6:	97 bd       	out	0x27, r25	; 39
     ed8:	86 bd       	out	0x26, r24	; 38
     eda:	08 95       	ret

00000edc <main>:
#include "../../../HAL/HC-SR04 sensor/HC-SR04 sensor/HCSR04_INT.h"
#include "../../../HAL/HC-SR04 sensor/HC-SR04 sensor/HCSR04_PROG.C"
#include "../../../HAL/SG-90 Servo motor/SG-90 Servo motor/SERVO_INT.h"
#include "../../../HAL/SG-90 Servo motor/SG-90 Servo motor/SERVO_PROG.C"

int main(void) {
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <main+0x6>
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <main+0x8>
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
    // Calling startup function to initialize program
	AUTOV_init();
     ee8:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <AUTOV_init>
	
	// Ultrasonic distance variable
	f32 local_f32DistMeasured = 0.0;
     eec:	19 82       	std	Y+1, r1	; 0x01
     eee:	1a 82       	std	Y+2, r1	; 0x02
     ef0:	1b 82       	std	Y+3, r1	; 0x03
     ef2:	1c 82       	std	Y+4, r1	; 0x04
	
    while (1) {
		// Checking Ultrasonic sensor reading
		HCSR04_getAverageDistance(HCSR04_SAMPLES, &local_f32DistMeasured);
     ef4:	be 01       	movw	r22, r28
     ef6:	6f 5f       	subi	r22, 0xFF	; 255
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <HCSR04_getAverageDistance>
		LCD_displayString((u8*) "Distance: ");
		LCD_moveCursor(1, 0);
		LCD_displayNumber(local_f32DistMeasured, 2);
		_delay_ms(400);*/
		
		if (local_f32DistMeasured > HCSR04_MIN_DISTANCE) {
     f00:	69 81       	ldd	r22, Y+1	; 0x01
     f02:	7a 81       	ldd	r23, Y+2	; 0x02
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e4       	ldi	r20, 0x40	; 64
     f0e:	51 e4       	ldi	r21, 0x41	; 65
     f10:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__gesf2>
     f14:	18 16       	cp	r1, r24
     f16:	1c f4       	brge	.+6      	; 0xf1e <main+0x42>
			// Main program
			AUTOV_lineFollowing();
     f18:	0e 94 28 04 	call	0x850	; 0x850 <AUTOV_lineFollowing>
     f1c:	eb cf       	rjmp	.-42     	; 0xef4 <main+0x18>
		}
		else {
			// Calling the function responsible for going into obstacle avoidance mode
			AUTOV_obstacleAvoidance();
     f1e:	0e 94 11 05 	call	0xa22	; 0xa22 <AUTOV_obstacleAvoidance>
     f22:	e8 cf       	rjmp	.-48     	; 0xef4 <main+0x18>

00000f24 <__subsf3>:
     f24:	50 58       	subi	r21, 0x80	; 128

00000f26 <__addsf3>:
     f26:	bb 27       	eor	r27, r27
     f28:	aa 27       	eor	r26, r26
     f2a:	0e 94 aa 07 	call	0xf54	; 0xf54 <__addsf3x>
     f2e:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_round>
     f32:	0e 94 0a 09 	call	0x1214	; 0x1214 <__fp_pscA>
     f36:	38 f0       	brcs	.+14     	; 0xf46 <__addsf3+0x20>
     f38:	0e 94 11 09 	call	0x1222	; 0x1222 <__fp_pscB>
     f3c:	20 f0       	brcs	.+8      	; 0xf46 <__addsf3+0x20>
     f3e:	39 f4       	brne	.+14     	; 0xf4e <__addsf3+0x28>
     f40:	9f 3f       	cpi	r25, 0xFF	; 255
     f42:	19 f4       	brne	.+6      	; 0xf4a <__addsf3+0x24>
     f44:	26 f4       	brtc	.+8      	; 0xf4e <__addsf3+0x28>
     f46:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_nan>
     f4a:	0e f4       	brtc	.+2      	; 0xf4e <__addsf3+0x28>
     f4c:	e0 95       	com	r30
     f4e:	e7 fb       	bst	r30, 7
     f50:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__fp_inf>

00000f54 <__addsf3x>:
     f54:	e9 2f       	mov	r30, r25
     f56:	0e 94 29 09 	call	0x1252	; 0x1252 <__fp_split3>
     f5a:	58 f3       	brcs	.-42     	; 0xf32 <__addsf3+0xc>
     f5c:	ba 17       	cp	r27, r26
     f5e:	62 07       	cpc	r22, r18
     f60:	73 07       	cpc	r23, r19
     f62:	84 07       	cpc	r24, r20
     f64:	95 07       	cpc	r25, r21
     f66:	20 f0       	brcs	.+8      	; 0xf70 <__addsf3x+0x1c>
     f68:	79 f4       	brne	.+30     	; 0xf88 <__addsf3x+0x34>
     f6a:	a6 f5       	brtc	.+104    	; 0xfd4 <__addsf3x+0x80>
     f6c:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_zero>
     f70:	0e f4       	brtc	.+2      	; 0xf74 <__addsf3x+0x20>
     f72:	e0 95       	com	r30
     f74:	0b 2e       	mov	r0, r27
     f76:	ba 2f       	mov	r27, r26
     f78:	a0 2d       	mov	r26, r0
     f7a:	0b 01       	movw	r0, r22
     f7c:	b9 01       	movw	r22, r18
     f7e:	90 01       	movw	r18, r0
     f80:	0c 01       	movw	r0, r24
     f82:	ca 01       	movw	r24, r20
     f84:	a0 01       	movw	r20, r0
     f86:	11 24       	eor	r1, r1
     f88:	ff 27       	eor	r31, r31
     f8a:	59 1b       	sub	r21, r25
     f8c:	99 f0       	breq	.+38     	; 0xfb4 <__addsf3x+0x60>
     f8e:	59 3f       	cpi	r21, 0xF9	; 249
     f90:	50 f4       	brcc	.+20     	; 0xfa6 <__addsf3x+0x52>
     f92:	50 3e       	cpi	r21, 0xE0	; 224
     f94:	68 f1       	brcs	.+90     	; 0xff0 <__addsf3x+0x9c>
     f96:	1a 16       	cp	r1, r26
     f98:	f0 40       	sbci	r31, 0x00	; 0
     f9a:	a2 2f       	mov	r26, r18
     f9c:	23 2f       	mov	r18, r19
     f9e:	34 2f       	mov	r19, r20
     fa0:	44 27       	eor	r20, r20
     fa2:	58 5f       	subi	r21, 0xF8	; 248
     fa4:	f3 cf       	rjmp	.-26     	; 0xf8c <__addsf3x+0x38>
     fa6:	46 95       	lsr	r20
     fa8:	37 95       	ror	r19
     faa:	27 95       	ror	r18
     fac:	a7 95       	ror	r26
     fae:	f0 40       	sbci	r31, 0x00	; 0
     fb0:	53 95       	inc	r21
     fb2:	c9 f7       	brne	.-14     	; 0xfa6 <__addsf3x+0x52>
     fb4:	7e f4       	brtc	.+30     	; 0xfd4 <__addsf3x+0x80>
     fb6:	1f 16       	cp	r1, r31
     fb8:	ba 0b       	sbc	r27, r26
     fba:	62 0b       	sbc	r22, r18
     fbc:	73 0b       	sbc	r23, r19
     fbe:	84 0b       	sbc	r24, r20
     fc0:	ba f0       	brmi	.+46     	; 0xff0 <__addsf3x+0x9c>
     fc2:	91 50       	subi	r25, 0x01	; 1
     fc4:	a1 f0       	breq	.+40     	; 0xfee <__addsf3x+0x9a>
     fc6:	ff 0f       	add	r31, r31
     fc8:	bb 1f       	adc	r27, r27
     fca:	66 1f       	adc	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	88 1f       	adc	r24, r24
     fd0:	c2 f7       	brpl	.-16     	; 0xfc2 <__addsf3x+0x6e>
     fd2:	0e c0       	rjmp	.+28     	; 0xff0 <__addsf3x+0x9c>
     fd4:	ba 0f       	add	r27, r26
     fd6:	62 1f       	adc	r22, r18
     fd8:	73 1f       	adc	r23, r19
     fda:	84 1f       	adc	r24, r20
     fdc:	48 f4       	brcc	.+18     	; 0xff0 <__addsf3x+0x9c>
     fde:	87 95       	ror	r24
     fe0:	77 95       	ror	r23
     fe2:	67 95       	ror	r22
     fe4:	b7 95       	ror	r27
     fe6:	f7 95       	ror	r31
     fe8:	9e 3f       	cpi	r25, 0xFE	; 254
     fea:	08 f0       	brcs	.+2      	; 0xfee <__addsf3x+0x9a>
     fec:	b0 cf       	rjmp	.-160    	; 0xf4e <__addsf3+0x28>
     fee:	93 95       	inc	r25
     ff0:	88 0f       	add	r24, r24
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <__addsf3x+0xa2>
     ff4:	99 27       	eor	r25, r25
     ff6:	ee 0f       	add	r30, r30
     ff8:	97 95       	ror	r25
     ffa:	87 95       	ror	r24
     ffc:	08 95       	ret

00000ffe <__divsf3>:
     ffe:	0e 94 13 08 	call	0x1026	; 0x1026 <__divsf3x>
    1002:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_round>
    1006:	0e 94 11 09 	call	0x1222	; 0x1222 <__fp_pscB>
    100a:	58 f0       	brcs	.+22     	; 0x1022 <__divsf3+0x24>
    100c:	0e 94 0a 09 	call	0x1214	; 0x1214 <__fp_pscA>
    1010:	40 f0       	brcs	.+16     	; 0x1022 <__divsf3+0x24>
    1012:	29 f4       	brne	.+10     	; 0x101e <__divsf3+0x20>
    1014:	5f 3f       	cpi	r21, 0xFF	; 255
    1016:	29 f0       	breq	.+10     	; 0x1022 <__divsf3+0x24>
    1018:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__fp_inf>
    101c:	51 11       	cpse	r21, r1
    101e:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__fp_szero>
    1022:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_nan>

00001026 <__divsf3x>:
    1026:	0e 94 29 09 	call	0x1252	; 0x1252 <__fp_split3>
    102a:	68 f3       	brcs	.-38     	; 0x1006 <__divsf3+0x8>

0000102c <__divsf3_pse>:
    102c:	99 23       	and	r25, r25
    102e:	b1 f3       	breq	.-20     	; 0x101c <__divsf3+0x1e>
    1030:	55 23       	and	r21, r21
    1032:	91 f3       	breq	.-28     	; 0x1018 <__divsf3+0x1a>
    1034:	95 1b       	sub	r25, r21
    1036:	55 0b       	sbc	r21, r21
    1038:	bb 27       	eor	r27, r27
    103a:	aa 27       	eor	r26, r26
    103c:	62 17       	cp	r22, r18
    103e:	73 07       	cpc	r23, r19
    1040:	84 07       	cpc	r24, r20
    1042:	38 f0       	brcs	.+14     	; 0x1052 <__divsf3_pse+0x26>
    1044:	9f 5f       	subi	r25, 0xFF	; 255
    1046:	5f 4f       	sbci	r21, 0xFF	; 255
    1048:	22 0f       	add	r18, r18
    104a:	33 1f       	adc	r19, r19
    104c:	44 1f       	adc	r20, r20
    104e:	aa 1f       	adc	r26, r26
    1050:	a9 f3       	breq	.-22     	; 0x103c <__divsf3_pse+0x10>
    1052:	35 d0       	rcall	.+106    	; 0x10be <__divsf3_pse+0x92>
    1054:	0e 2e       	mov	r0, r30
    1056:	3a f0       	brmi	.+14     	; 0x1066 <__divsf3_pse+0x3a>
    1058:	e0 e8       	ldi	r30, 0x80	; 128
    105a:	32 d0       	rcall	.+100    	; 0x10c0 <__divsf3_pse+0x94>
    105c:	91 50       	subi	r25, 0x01	; 1
    105e:	50 40       	sbci	r21, 0x00	; 0
    1060:	e6 95       	lsr	r30
    1062:	00 1c       	adc	r0, r0
    1064:	ca f7       	brpl	.-14     	; 0x1058 <__divsf3_pse+0x2c>
    1066:	2b d0       	rcall	.+86     	; 0x10be <__divsf3_pse+0x92>
    1068:	fe 2f       	mov	r31, r30
    106a:	29 d0       	rcall	.+82     	; 0x10be <__divsf3_pse+0x92>
    106c:	66 0f       	add	r22, r22
    106e:	77 1f       	adc	r23, r23
    1070:	88 1f       	adc	r24, r24
    1072:	bb 1f       	adc	r27, r27
    1074:	26 17       	cp	r18, r22
    1076:	37 07       	cpc	r19, r23
    1078:	48 07       	cpc	r20, r24
    107a:	ab 07       	cpc	r26, r27
    107c:	b0 e8       	ldi	r27, 0x80	; 128
    107e:	09 f0       	breq	.+2      	; 0x1082 <__divsf3_pse+0x56>
    1080:	bb 0b       	sbc	r27, r27
    1082:	80 2d       	mov	r24, r0
    1084:	bf 01       	movw	r22, r30
    1086:	ff 27       	eor	r31, r31
    1088:	93 58       	subi	r25, 0x83	; 131
    108a:	5f 4f       	sbci	r21, 0xFF	; 255
    108c:	3a f0       	brmi	.+14     	; 0x109c <__divsf3_pse+0x70>
    108e:	9e 3f       	cpi	r25, 0xFE	; 254
    1090:	51 05       	cpc	r21, r1
    1092:	78 f0       	brcs	.+30     	; 0x10b2 <__divsf3_pse+0x86>
    1094:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__fp_inf>
    1098:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__fp_szero>
    109c:	5f 3f       	cpi	r21, 0xFF	; 255
    109e:	e4 f3       	brlt	.-8      	; 0x1098 <__divsf3_pse+0x6c>
    10a0:	98 3e       	cpi	r25, 0xE8	; 232
    10a2:	d4 f3       	brlt	.-12     	; 0x1098 <__divsf3_pse+0x6c>
    10a4:	86 95       	lsr	r24
    10a6:	77 95       	ror	r23
    10a8:	67 95       	ror	r22
    10aa:	b7 95       	ror	r27
    10ac:	f7 95       	ror	r31
    10ae:	9f 5f       	subi	r25, 0xFF	; 255
    10b0:	c9 f7       	brne	.-14     	; 0x10a4 <__divsf3_pse+0x78>
    10b2:	88 0f       	add	r24, r24
    10b4:	91 1d       	adc	r25, r1
    10b6:	96 95       	lsr	r25
    10b8:	87 95       	ror	r24
    10ba:	97 f9       	bld	r25, 7
    10bc:	08 95       	ret
    10be:	e1 e0       	ldi	r30, 0x01	; 1
    10c0:	66 0f       	add	r22, r22
    10c2:	77 1f       	adc	r23, r23
    10c4:	88 1f       	adc	r24, r24
    10c6:	bb 1f       	adc	r27, r27
    10c8:	62 17       	cp	r22, r18
    10ca:	73 07       	cpc	r23, r19
    10cc:	84 07       	cpc	r24, r20
    10ce:	ba 07       	cpc	r27, r26
    10d0:	20 f0       	brcs	.+8      	; 0x10da <__divsf3_pse+0xae>
    10d2:	62 1b       	sub	r22, r18
    10d4:	73 0b       	sbc	r23, r19
    10d6:	84 0b       	sbc	r24, r20
    10d8:	ba 0b       	sbc	r27, r26
    10da:	ee 1f       	adc	r30, r30
    10dc:	88 f7       	brcc	.-30     	; 0x10c0 <__divsf3_pse+0x94>
    10de:	e0 95       	com	r30
    10e0:	08 95       	ret

000010e2 <__fixunssfsi>:
    10e2:	0e 94 31 09 	call	0x1262	; 0x1262 <__fp_splitA>
    10e6:	88 f0       	brcs	.+34     	; 0x110a <__fixunssfsi+0x28>
    10e8:	9f 57       	subi	r25, 0x7F	; 127
    10ea:	98 f0       	brcs	.+38     	; 0x1112 <__fixunssfsi+0x30>
    10ec:	b9 2f       	mov	r27, r25
    10ee:	99 27       	eor	r25, r25
    10f0:	b7 51       	subi	r27, 0x17	; 23
    10f2:	b0 f0       	brcs	.+44     	; 0x1120 <__fixunssfsi+0x3e>
    10f4:	e1 f0       	breq	.+56     	; 0x112e <__fixunssfsi+0x4c>
    10f6:	66 0f       	add	r22, r22
    10f8:	77 1f       	adc	r23, r23
    10fa:	88 1f       	adc	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	1a f0       	brmi	.+6      	; 0x1106 <__fixunssfsi+0x24>
    1100:	ba 95       	dec	r27
    1102:	c9 f7       	brne	.-14     	; 0x10f6 <__fixunssfsi+0x14>
    1104:	14 c0       	rjmp	.+40     	; 0x112e <__fixunssfsi+0x4c>
    1106:	b1 30       	cpi	r27, 0x01	; 1
    1108:	91 f0       	breq	.+36     	; 0x112e <__fixunssfsi+0x4c>
    110a:	0e 94 4b 09 	call	0x1296	; 0x1296 <__fp_zero>
    110e:	b1 e0       	ldi	r27, 0x01	; 1
    1110:	08 95       	ret
    1112:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_zero>
    1116:	67 2f       	mov	r22, r23
    1118:	78 2f       	mov	r23, r24
    111a:	88 27       	eor	r24, r24
    111c:	b8 5f       	subi	r27, 0xF8	; 248
    111e:	39 f0       	breq	.+14     	; 0x112e <__fixunssfsi+0x4c>
    1120:	b9 3f       	cpi	r27, 0xF9	; 249
    1122:	cc f3       	brlt	.-14     	; 0x1116 <__fixunssfsi+0x34>
    1124:	86 95       	lsr	r24
    1126:	77 95       	ror	r23
    1128:	67 95       	ror	r22
    112a:	b3 95       	inc	r27
    112c:	d9 f7       	brne	.-10     	; 0x1124 <__fixunssfsi+0x42>
    112e:	3e f4       	brtc	.+14     	; 0x113e <__fixunssfsi+0x5c>
    1130:	90 95       	com	r25
    1132:	80 95       	com	r24
    1134:	70 95       	com	r23
    1136:	61 95       	neg	r22
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	8f 4f       	sbci	r24, 0xFF	; 255
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	08 95       	ret

00001140 <__floatunsisf>:
    1140:	e8 94       	clt
    1142:	09 c0       	rjmp	.+18     	; 0x1156 <__floatsisf+0x12>

00001144 <__floatsisf>:
    1144:	97 fb       	bst	r25, 7
    1146:	3e f4       	brtc	.+14     	; 0x1156 <__floatsisf+0x12>
    1148:	90 95       	com	r25
    114a:	80 95       	com	r24
    114c:	70 95       	com	r23
    114e:	61 95       	neg	r22
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	99 23       	and	r25, r25
    1158:	a9 f0       	breq	.+42     	; 0x1184 <__floatsisf+0x40>
    115a:	f9 2f       	mov	r31, r25
    115c:	96 e9       	ldi	r25, 0x96	; 150
    115e:	bb 27       	eor	r27, r27
    1160:	93 95       	inc	r25
    1162:	f6 95       	lsr	r31
    1164:	87 95       	ror	r24
    1166:	77 95       	ror	r23
    1168:	67 95       	ror	r22
    116a:	b7 95       	ror	r27
    116c:	f1 11       	cpse	r31, r1
    116e:	f8 cf       	rjmp	.-16     	; 0x1160 <__floatsisf+0x1c>
    1170:	fa f4       	brpl	.+62     	; 0x11b0 <__floatsisf+0x6c>
    1172:	bb 0f       	add	r27, r27
    1174:	11 f4       	brne	.+4      	; 0x117a <__floatsisf+0x36>
    1176:	60 ff       	sbrs	r22, 0
    1178:	1b c0       	rjmp	.+54     	; 0x11b0 <__floatsisf+0x6c>
    117a:	6f 5f       	subi	r22, 0xFF	; 255
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	16 c0       	rjmp	.+44     	; 0x11b0 <__floatsisf+0x6c>
    1184:	88 23       	and	r24, r24
    1186:	11 f0       	breq	.+4      	; 0x118c <__floatsisf+0x48>
    1188:	96 e9       	ldi	r25, 0x96	; 150
    118a:	11 c0       	rjmp	.+34     	; 0x11ae <__floatsisf+0x6a>
    118c:	77 23       	and	r23, r23
    118e:	21 f0       	breq	.+8      	; 0x1198 <__floatsisf+0x54>
    1190:	9e e8       	ldi	r25, 0x8E	; 142
    1192:	87 2f       	mov	r24, r23
    1194:	76 2f       	mov	r23, r22
    1196:	05 c0       	rjmp	.+10     	; 0x11a2 <__floatsisf+0x5e>
    1198:	66 23       	and	r22, r22
    119a:	71 f0       	breq	.+28     	; 0x11b8 <__floatsisf+0x74>
    119c:	96 e8       	ldi	r25, 0x86	; 134
    119e:	86 2f       	mov	r24, r22
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	2a f0       	brmi	.+10     	; 0x11b0 <__floatsisf+0x6c>
    11a6:	9a 95       	dec	r25
    11a8:	66 0f       	add	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	88 1f       	adc	r24, r24
    11ae:	da f7       	brpl	.-10     	; 0x11a6 <__floatsisf+0x62>
    11b0:	88 0f       	add	r24, r24
    11b2:	96 95       	lsr	r25
    11b4:	87 95       	ror	r24
    11b6:	97 f9       	bld	r25, 7
    11b8:	08 95       	ret

000011ba <__fp_cmp>:
    11ba:	99 0f       	add	r25, r25
    11bc:	00 08       	sbc	r0, r0
    11be:	55 0f       	add	r21, r21
    11c0:	aa 0b       	sbc	r26, r26
    11c2:	e0 e8       	ldi	r30, 0x80	; 128
    11c4:	fe ef       	ldi	r31, 0xFE	; 254
    11c6:	16 16       	cp	r1, r22
    11c8:	17 06       	cpc	r1, r23
    11ca:	e8 07       	cpc	r30, r24
    11cc:	f9 07       	cpc	r31, r25
    11ce:	c0 f0       	brcs	.+48     	; 0x1200 <__fp_cmp+0x46>
    11d0:	12 16       	cp	r1, r18
    11d2:	13 06       	cpc	r1, r19
    11d4:	e4 07       	cpc	r30, r20
    11d6:	f5 07       	cpc	r31, r21
    11d8:	98 f0       	brcs	.+38     	; 0x1200 <__fp_cmp+0x46>
    11da:	62 1b       	sub	r22, r18
    11dc:	73 0b       	sbc	r23, r19
    11de:	84 0b       	sbc	r24, r20
    11e0:	95 0b       	sbc	r25, r21
    11e2:	39 f4       	brne	.+14     	; 0x11f2 <__fp_cmp+0x38>
    11e4:	0a 26       	eor	r0, r26
    11e6:	61 f0       	breq	.+24     	; 0x1200 <__fp_cmp+0x46>
    11e8:	23 2b       	or	r18, r19
    11ea:	24 2b       	or	r18, r20
    11ec:	25 2b       	or	r18, r21
    11ee:	21 f4       	brne	.+8      	; 0x11f8 <__fp_cmp+0x3e>
    11f0:	08 95       	ret
    11f2:	0a 26       	eor	r0, r26
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <__fp_cmp+0x3e>
    11f6:	a1 40       	sbci	r26, 0x01	; 1
    11f8:	a6 95       	lsr	r26
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	81 1d       	adc	r24, r1
    11fe:	81 1d       	adc	r24, r1
    1200:	08 95       	ret

00001202 <__fp_inf>:
    1202:	97 f9       	bld	r25, 7
    1204:	9f 67       	ori	r25, 0x7F	; 127
    1206:	80 e8       	ldi	r24, 0x80	; 128
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	08 95       	ret

0000120e <__fp_nan>:
    120e:	9f ef       	ldi	r25, 0xFF	; 255
    1210:	80 ec       	ldi	r24, 0xC0	; 192
    1212:	08 95       	ret

00001214 <__fp_pscA>:
    1214:	00 24       	eor	r0, r0
    1216:	0a 94       	dec	r0
    1218:	16 16       	cp	r1, r22
    121a:	17 06       	cpc	r1, r23
    121c:	18 06       	cpc	r1, r24
    121e:	09 06       	cpc	r0, r25
    1220:	08 95       	ret

00001222 <__fp_pscB>:
    1222:	00 24       	eor	r0, r0
    1224:	0a 94       	dec	r0
    1226:	12 16       	cp	r1, r18
    1228:	13 06       	cpc	r1, r19
    122a:	14 06       	cpc	r1, r20
    122c:	05 06       	cpc	r0, r21
    122e:	08 95       	ret

00001230 <__fp_round>:
    1230:	09 2e       	mov	r0, r25
    1232:	03 94       	inc	r0
    1234:	00 0c       	add	r0, r0
    1236:	11 f4       	brne	.+4      	; 0x123c <__fp_round+0xc>
    1238:	88 23       	and	r24, r24
    123a:	52 f0       	brmi	.+20     	; 0x1250 <__fp_round+0x20>
    123c:	bb 0f       	add	r27, r27
    123e:	40 f4       	brcc	.+16     	; 0x1250 <__fp_round+0x20>
    1240:	bf 2b       	or	r27, r31
    1242:	11 f4       	brne	.+4      	; 0x1248 <__fp_round+0x18>
    1244:	60 ff       	sbrs	r22, 0
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <__fp_round+0x20>
    1248:	6f 5f       	subi	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	8f 4f       	sbci	r24, 0xFF	; 255
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	08 95       	ret

00001252 <__fp_split3>:
    1252:	57 fd       	sbrc	r21, 7
    1254:	90 58       	subi	r25, 0x80	; 128
    1256:	44 0f       	add	r20, r20
    1258:	55 1f       	adc	r21, r21
    125a:	59 f0       	breq	.+22     	; 0x1272 <__fp_splitA+0x10>
    125c:	5f 3f       	cpi	r21, 0xFF	; 255
    125e:	71 f0       	breq	.+28     	; 0x127c <__fp_splitA+0x1a>
    1260:	47 95       	ror	r20

00001262 <__fp_splitA>:
    1262:	88 0f       	add	r24, r24
    1264:	97 fb       	bst	r25, 7
    1266:	99 1f       	adc	r25, r25
    1268:	61 f0       	breq	.+24     	; 0x1282 <__fp_splitA+0x20>
    126a:	9f 3f       	cpi	r25, 0xFF	; 255
    126c:	79 f0       	breq	.+30     	; 0x128c <__fp_splitA+0x2a>
    126e:	87 95       	ror	r24
    1270:	08 95       	ret
    1272:	12 16       	cp	r1, r18
    1274:	13 06       	cpc	r1, r19
    1276:	14 06       	cpc	r1, r20
    1278:	55 1f       	adc	r21, r21
    127a:	f2 cf       	rjmp	.-28     	; 0x1260 <__fp_split3+0xe>
    127c:	46 95       	lsr	r20
    127e:	f1 df       	rcall	.-30     	; 0x1262 <__fp_splitA>
    1280:	08 c0       	rjmp	.+16     	; 0x1292 <__fp_splitA+0x30>
    1282:	16 16       	cp	r1, r22
    1284:	17 06       	cpc	r1, r23
    1286:	18 06       	cpc	r1, r24
    1288:	99 1f       	adc	r25, r25
    128a:	f1 cf       	rjmp	.-30     	; 0x126e <__fp_splitA+0xc>
    128c:	86 95       	lsr	r24
    128e:	71 05       	cpc	r23, r1
    1290:	61 05       	cpc	r22, r1
    1292:	08 94       	sec
    1294:	08 95       	ret

00001296 <__fp_zero>:
    1296:	e8 94       	clt

00001298 <__fp_szero>:
    1298:	bb 27       	eor	r27, r27
    129a:	66 27       	eor	r22, r22
    129c:	77 27       	eor	r23, r23
    129e:	cb 01       	movw	r24, r22
    12a0:	97 f9       	bld	r25, 7
    12a2:	08 95       	ret

000012a4 <__gesf2>:
    12a4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fp_cmp>
    12a8:	08 f4       	brcc	.+2      	; 0x12ac <__gesf2+0x8>
    12aa:	8f ef       	ldi	r24, 0xFF	; 255
    12ac:	08 95       	ret

000012ae <__mulsf3>:
    12ae:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__mulsf3x>
    12b2:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_round>
    12b6:	0e 94 0a 09 	call	0x1214	; 0x1214 <__fp_pscA>
    12ba:	38 f0       	brcs	.+14     	; 0x12ca <__mulsf3+0x1c>
    12bc:	0e 94 11 09 	call	0x1222	; 0x1222 <__fp_pscB>
    12c0:	20 f0       	brcs	.+8      	; 0x12ca <__mulsf3+0x1c>
    12c2:	95 23       	and	r25, r21
    12c4:	11 f0       	breq	.+4      	; 0x12ca <__mulsf3+0x1c>
    12c6:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__fp_inf>
    12ca:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_nan>
    12ce:	11 24       	eor	r1, r1
    12d0:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__fp_szero>

000012d4 <__mulsf3x>:
    12d4:	0e 94 29 09 	call	0x1252	; 0x1252 <__fp_split3>
    12d8:	70 f3       	brcs	.-36     	; 0x12b6 <__mulsf3+0x8>

000012da <__mulsf3_pse>:
    12da:	95 9f       	mul	r25, r21
    12dc:	c1 f3       	breq	.-16     	; 0x12ce <__mulsf3+0x20>
    12de:	95 0f       	add	r25, r21
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	55 1f       	adc	r21, r21
    12e4:	62 9f       	mul	r22, r18
    12e6:	f0 01       	movw	r30, r0
    12e8:	72 9f       	mul	r23, r18
    12ea:	bb 27       	eor	r27, r27
    12ec:	f0 0d       	add	r31, r0
    12ee:	b1 1d       	adc	r27, r1
    12f0:	63 9f       	mul	r22, r19
    12f2:	aa 27       	eor	r26, r26
    12f4:	f0 0d       	add	r31, r0
    12f6:	b1 1d       	adc	r27, r1
    12f8:	aa 1f       	adc	r26, r26
    12fa:	64 9f       	mul	r22, r20
    12fc:	66 27       	eor	r22, r22
    12fe:	b0 0d       	add	r27, r0
    1300:	a1 1d       	adc	r26, r1
    1302:	66 1f       	adc	r22, r22
    1304:	82 9f       	mul	r24, r18
    1306:	22 27       	eor	r18, r18
    1308:	b0 0d       	add	r27, r0
    130a:	a1 1d       	adc	r26, r1
    130c:	62 1f       	adc	r22, r18
    130e:	73 9f       	mul	r23, r19
    1310:	b0 0d       	add	r27, r0
    1312:	a1 1d       	adc	r26, r1
    1314:	62 1f       	adc	r22, r18
    1316:	83 9f       	mul	r24, r19
    1318:	a0 0d       	add	r26, r0
    131a:	61 1d       	adc	r22, r1
    131c:	22 1f       	adc	r18, r18
    131e:	74 9f       	mul	r23, r20
    1320:	33 27       	eor	r19, r19
    1322:	a0 0d       	add	r26, r0
    1324:	61 1d       	adc	r22, r1
    1326:	23 1f       	adc	r18, r19
    1328:	84 9f       	mul	r24, r20
    132a:	60 0d       	add	r22, r0
    132c:	21 1d       	adc	r18, r1
    132e:	82 2f       	mov	r24, r18
    1330:	76 2f       	mov	r23, r22
    1332:	6a 2f       	mov	r22, r26
    1334:	11 24       	eor	r1, r1
    1336:	9f 57       	subi	r25, 0x7F	; 127
    1338:	50 40       	sbci	r21, 0x00	; 0
    133a:	9a f0       	brmi	.+38     	; 0x1362 <__mulsf3_pse+0x88>
    133c:	f1 f0       	breq	.+60     	; 0x137a <__mulsf3_pse+0xa0>
    133e:	88 23       	and	r24, r24
    1340:	4a f0       	brmi	.+18     	; 0x1354 <__mulsf3_pse+0x7a>
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	bb 1f       	adc	r27, r27
    1348:	66 1f       	adc	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	91 50       	subi	r25, 0x01	; 1
    1350:	50 40       	sbci	r21, 0x00	; 0
    1352:	a9 f7       	brne	.-22     	; 0x133e <__mulsf3_pse+0x64>
    1354:	9e 3f       	cpi	r25, 0xFE	; 254
    1356:	51 05       	cpc	r21, r1
    1358:	80 f0       	brcs	.+32     	; 0x137a <__mulsf3_pse+0xa0>
    135a:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__fp_inf>
    135e:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__fp_szero>
    1362:	5f 3f       	cpi	r21, 0xFF	; 255
    1364:	e4 f3       	brlt	.-8      	; 0x135e <__mulsf3_pse+0x84>
    1366:	98 3e       	cpi	r25, 0xE8	; 232
    1368:	d4 f3       	brlt	.-12     	; 0x135e <__mulsf3_pse+0x84>
    136a:	86 95       	lsr	r24
    136c:	77 95       	ror	r23
    136e:	67 95       	ror	r22
    1370:	b7 95       	ror	r27
    1372:	f7 95       	ror	r31
    1374:	e7 95       	ror	r30
    1376:	9f 5f       	subi	r25, 0xFF	; 255
    1378:	c1 f7       	brne	.-16     	; 0x136a <__mulsf3_pse+0x90>
    137a:	fe 2b       	or	r31, r30
    137c:	88 0f       	add	r24, r24
    137e:	91 1d       	adc	r25, r1
    1380:	96 95       	lsr	r25
    1382:	87 95       	ror	r24
    1384:	97 f9       	bld	r25, 7
    1386:	08 95       	ret

00001388 <__divmodhi4>:
    1388:	97 fb       	bst	r25, 7
    138a:	07 2e       	mov	r0, r23
    138c:	16 f4       	brtc	.+4      	; 0x1392 <__divmodhi4+0xa>
    138e:	00 94       	com	r0
    1390:	07 d0       	rcall	.+14     	; 0x13a0 <__divmodhi4_neg1>
    1392:	77 fd       	sbrc	r23, 7
    1394:	09 d0       	rcall	.+18     	; 0x13a8 <__divmodhi4_neg2>
    1396:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__udivmodhi4>
    139a:	07 fc       	sbrc	r0, 7
    139c:	05 d0       	rcall	.+10     	; 0x13a8 <__divmodhi4_neg2>
    139e:	3e f4       	brtc	.+14     	; 0x13ae <__divmodhi4_exit>

000013a0 <__divmodhi4_neg1>:
    13a0:	90 95       	com	r25
    13a2:	81 95       	neg	r24
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	08 95       	ret

000013a8 <__divmodhi4_neg2>:
    13a8:	70 95       	com	r23
    13aa:	61 95       	neg	r22
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255

000013ae <__divmodhi4_exit>:
    13ae:	08 95       	ret

000013b0 <__udivmodhi4>:
    13b0:	aa 1b       	sub	r26, r26
    13b2:	bb 1b       	sub	r27, r27
    13b4:	51 e1       	ldi	r21, 0x11	; 17
    13b6:	07 c0       	rjmp	.+14     	; 0x13c6 <__udivmodhi4_ep>

000013b8 <__udivmodhi4_loop>:
    13b8:	aa 1f       	adc	r26, r26
    13ba:	bb 1f       	adc	r27, r27
    13bc:	a6 17       	cp	r26, r22
    13be:	b7 07       	cpc	r27, r23
    13c0:	10 f0       	brcs	.+4      	; 0x13c6 <__udivmodhi4_ep>
    13c2:	a6 1b       	sub	r26, r22
    13c4:	b7 0b       	sbc	r27, r23

000013c6 <__udivmodhi4_ep>:
    13c6:	88 1f       	adc	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	5a 95       	dec	r21
    13cc:	a9 f7       	brne	.-22     	; 0x13b8 <__udivmodhi4_loop>
    13ce:	80 95       	com	r24
    13d0:	90 95       	com	r25
    13d2:	bc 01       	movw	r22, r24
    13d4:	cd 01       	movw	r24, r26
    13d6:	08 95       	ret

000013d8 <_exit>:
    13d8:	f8 94       	cli

000013da <__stop_program>:
    13da:	ff cf       	rjmp	.-2      	; 0x13da <__stop_program>
